((3) 0 () 11 ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-over-under-and-elsewhere.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-09-29-emacs-and-racket.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-09-26-emacs-and-dired.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2014-02-17-emacs-and-mail.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-livefrog-a-livejournal-utility.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-21-usync-yet-another-data-synchronizer.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-09-10-emacs-and-hax.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-squandered-relentlessness.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2014-02-19-an-introduction-to-frog.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-the-y-combinator-in-scheme-in-six-easy-steps.scrbl" . unix) (p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2014-02-21-an-introduction-to-ugarit.scrbl" . unix)) () (h ! (equal) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-squandered-relentlessness.scrbl" . unix) f post (u . "Squandered Relentlessness") (? . 7) 1374051139 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/05/09/squandered-relentlessness/index.html" . unix) "/blog/2013/05/09/squandered-relentlessness/" (u . "2013-05-09T16:11:03") (? . 0) (? . 5) (c (u . "rants")) (u . "\n<p>There is a disturbing, and eerie sensation that I feel whenever the\ndamping realization that I am no longer a young child, is observed in\nmy consciousness. The uneasy struggle between learning to let go of my\nportentous past and my capricious future, grips me, with heavy\nclench. It is not about the inability to redo gratuitous expenditure\nof somewhat liberally-provided lax confinements of time, but it is\nabout the unsettling observation that the mindset I previously took\nfor granted, is now something that would require me Atlas strength to\neven begin to summon. I miss the unrelenting inquisitiveness that I\nonce wielded with ease, to my daily scuffling scores with the hordes\nof raids of life.</p>") #t (u . "\n<p>There is a disturbing, and eerie sensation that I feel whenever the\ndamping realization that I am no longer a young child, is observed in\nmy consciousness. The uneasy struggle between learning to let go of my\nportentous past and my capricious future, grips me, with heavy\nclench. It is not about the inability to redo gratuitous expenditure\nof somewhat liberally-provided lax confinements of time, but it is\nabout the unsettling observation that the mindset I previously took\nfor granted, is now something that would require me Atlas strength to\neven begin to summon. I miss the unrelenting inquisitiveness that I\nonce wielded with ease, to my daily scuffling scores with the hordes\nof raids of life.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<p>When we move past our zones of comfort, we are filled with eagerness\nto return back to our own fortified bunkers. We see our own phantasmal\ndoppelgangers, communicating and showing to us what impending\natrocities may rise out of the ground, ready to devour us alive. The\nlonger we stay outside, the higher the probability of death. We make\nourselves believe our own convictions. We justify through our own\nuncalibrated scales of what choices to make. Whenever unfamiliar\nterritory is explored, we almost instantly coil ourselves, back, into\nseemingly intractable forms. We do it because of fear. We do it\nbecause we do not like the unfamiliar. We do it because of our\naffinity and devotion to safety.</p>\n\n<p>We complain of the stifling absence of bounty, and yet we voluntarily\nstop ourselves from making even an inch of movement of a limb towards\nmaking the advancement on a prey. We are so romantically in love, with\nfervor, on the seeking of rationale to our unjustifiable excuses, but\nwe equally seek sound reason. It is even more appalling to see that\nsome of us insidiously advertise illusions of grandeur, with claims of\nfull reprising sensations of the bounty&rsquo;s meat. Our personal biases\ntowards reaching the reward, effectively stops us from actually\nreaching it. We succumb to the remorseless claims of others, on their\nfailure, effectively rendering us ignorant of the unseen reality. When\nthe number of persons that flock around us, is high enough, according\nto our personal metrics, we ignorantly instill to ourselves what they\nbuzz to us, and then we impair ourselves and subsequently kill the\nessence of our individuality.</p>\n\n<p>As adults, we are taught to restrain ourselves inside cages that we\nourselves have built. It is unnerving to see this monstrous act unfold\nbefore my short field of view, everyday. We drag ourselves towards\nsolitary confinements of our own barbed rooms. We make ourselves fond\nof preaching doubt to our fellowmen. And if our own kind does the\nsame, we see feelings of accomplishment. That is not only horrendous,\nbut also unsurprisingly stupid. When we were still young, we reach out\nto empty space, and create our own discoveries. We find out about\nthings previously untaught to us. We have the willful disregard for\ndanger and authority. We do not care how about the scratches and\nbruises that we get, as long as we satisfy our wild and insatiable\ntaste for discovery. When fueled by curiosity, we discover yet another\nrealm of possibilities &ndash; we find ourselves immersed in dimensions\nnever before heard or seen, and no matter how much dirt and mud we\nlather up to our bodies, we did not care. All that mattered to us was\nto have fun in walking the unending journey of discovery. And yet, we\nlearned.</p>\n\n<p>It is ironic that just when we think we are already old enough to\nventure the world unaided by our training wheels, we smother ourselves\nwith mediocre goals of pseudo-discovery. When the curtain is unveiled,\nwe are confronted by an unsettling sight &ndash; we have lost the drive\nthat once propelled us to have insights. We grew afraid to exercise\nthe same techniques and principles we had once as children. We stopped\nourselves from making curious inquisitions about what&rsquo;s out there. We\nhave made ourselves feel comfortable with what is served on the\ninstitutionalized plates, without the slightest attempt to bolster up\nto devise questions. The society, which we are all part of, is part of\nthe disease. This very illness is what we have been aiding to develop,\nfrom its inception. This unit is what we have been working hard on, to\nform our own senses of individuality. We wanted to stand out, and yet\nall we do is just blend in. How can a formidable hunter become so\ndocile that he becomes the prey himself? Why do we throw away our\nspears when they are all we have to give us the ability to fight back?\nOur sensibilities have drifted away into black, bottomless pits, which\nwe have all contributed to making.</p>\n\n<p>It is aggreging to our shoulders, to see that generations after\ngenerations, we squander and believe that discoveries should always be\nmade for us, peeled off then fed to our mouths. What have we become as\nsailors of the stars? Have we given up the drive to motivate ourselves\nto see what is on the other side of the rainbow? Have we tame\nourselves too much, that we became willing to be incarcerated in zoos,\nfor the pleasure of others?  Or did we just flush out our sense of\npower, to make ourselves stand out less, and mix more with the crowd,\ngreatly reducing our distinctiveness when viewed from afar? It seems\nthat, for now, we refuse to answer some questions, yet we retaliate to\nthe idea that we are being interrogated of things deemed to be simpler\nthan high school classroom lessons. But some things are common to us,\nalbeit not all: we are afraid to see how society may react to our\nactions, no matter how silly or grave our actions may be. But on\nmatters of more weight, we readily blend in, because we do not want\nrejection. Most of us are more than happy to think and move with the\nherd, without any forethought.</p>\n\n<p>When we voluntarily attach to our legs, heavy chains and balls of\nsteel, we should not expect to be able to run around the colosseum\nwith ease. When we dare to explore uncharted territories, without\nregrets, without dis-enchantments, without the necessity to have\nanother ship propel us forward, we have triumphed.</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2014-02-17-emacs-and-mail.scrbl" . unix) f post (u . "Emacs and Mail") (? . 3) 1393353886 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2014/02/17/emacs-and-mail/index.html" . unix) "/blog/2014/02/17/emacs-and-mail/" (u . "2014-02-17T16:02:38") (? . 1) (? . 8) (c (u . "emacs") c (u . "mail")) (u . "\n<p>In this day and age, checking our mail means going to the website of our mail\nprovider, or using a mobile app. However, there are some cases when we want to\nhave more control over our messages, especially when the feature we want is not\npresent with the mainstream options.</p>\n\n<p>Emacs provides a plethora (gnus, wanderlust, vm, etc.) of ways of sending and\nreceiving mail. In this post, we&rsquo;re going to talk\n<a href=\"http://pyropus.ca/software/getmail/\">getmail</a>,\n<a href=\"http://www.djcbsoftware.nl/code/mu/\">mu</a>, and\n<a href=\"http://www.djcbsoftware.nl/code/mu/mu4e.html\">mu4e</a>, and how to\nset them up quickly. In this tutorial We&rsquo;ll assume that we&rsquo;re going to get our\nmessages from <a href=\"http://gmail.com\">Gmail</a> via its IMAP interface.</p>") #t (u . "\n<p>In this day and age, checking our mail means going to the website of our mail\nprovider, or using a mobile app. However, there are some cases when we want to\nhave more control over our messages, especially when the feature we want is not\npresent with the mainstream options.</p>\n\n<p>Emacs provides a plethora (gnus, wanderlust, vm, etc.) of ways of sending and\nreceiving mail. In this post, we&rsquo;re going to talk\n<a href=\"http://pyropus.ca/software/getmail/\">getmail</a>,\n<a href=\"http://www.djcbsoftware.nl/code/mu/\">mu</a>, and\n<a href=\"http://www.djcbsoftware.nl/code/mu/mu4e.html\">mu4e</a>, and how to\nset them up quickly. In this tutorial We&rsquo;ll assume that we&rsquo;re going to get our\nmessages from <a href=\"http://gmail.com\">Gmail</a> via its IMAP interface.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Fetching_.Messages)\"></a>Fetching Messages</h1>\n\n<p>We first need to have a way to download our mails, off our mail server. A\neasy-to-use application that will do that for us is\n<a href=\"http://pyropus.ca/software/getmail/\">getmail</a>.</p>\n\n<h2>1.1\n <tt>&nbsp;</tt><a name=\"(part._.Installation)\"></a>Installation</h2>\n\n<p>Most of the time, getmail can be readily installed via your system&rsquo;s package\nmanager. If you are using a\n<a href=\"https://www.debian.org/misc/children-distros\">Debian-based\nsystem</a>, you can install it by running:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo apt-get install getmail4</span></span></p></td></tr></tbody></table>\n\n<p>If you are using <a href=\"https://nixos.org/nixos/\">NixOS</a>, you can\ninstall by running:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ nix-env -i getmail</span></span></p></td></tr></tbody></table>\n\n<p>However, if your system doesn&rsquo;t provide an easy way for you to install getmail,\nyou can always head to its <a href=\"http://pyropus.ca/software/getmail/\">homepage</a>, then download the tarball.</p>\n\n<h2>1.2\n <tt>&nbsp;</tt><a name=\"(part._.Configuration)\"></a>Configuration</h2>\n\n<p>Next, we need to conjure the incantation so that getmail knows how to get your\nstuff. Create the file <span class=\"stt\">~/.getmail/getmailrc</span>. In addition to that, we\nneed to create and specify where the messages will go:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ mkdir ~/Maildir</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ mkdir ~/.getmail</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs ~/.getmail/getmailrc</span></span></p></td></tr></tbody></table>\n\n<p>Then put in the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">[retriever]</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">type = SimpleIMAPSSLRetriever</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">server = imap.gmail.com</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">username = USERNAME@gmail.com</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">password = PASSWORD</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">[destination]</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">type = Maildir</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">path = ~/Maildir/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">[options]</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">verbose = 2</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">message_log = ~/.getmail/gmail.log</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">read_all = false</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">delivered_to = false</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">received = false</span></span></p></td></tr></tbody></table>\n\n<p>Replace USERNAME with your Gmail username, then replace PASSWORD with your\nGmail password. However, if you are using\n<a href=\"http://www.google.com/landing/2step/\">2-step authentication</a>, use\nan <a href=\"https://accounts.google.com/IssuedAuthSubTokens\">application-specific</a> password for the password field. Take note, that\n<span class=\"stt\">~/Maildir</span> is the default directory that Mail Transfer Agents (MTA) which\nuse the <a href=\"https://en.wikipedia.org/wiki/Maildir\">maildir</a> format\nuse, to store data.</p>\n\n<h2>1.3\n <tt>&nbsp;</tt><a name=\"(part._.Execution)\"></a>Execution</h2>\n\n<p>To verify that we can indeed fetch our messages, run getmail:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ getmail</span></span></p></td></tr></tbody></table>\n\n<p>If it doesn&rsquo;t choke, and displays something like the following, then you have\nconfigured getmail correctly.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">getmail version 4.43.0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\">Copyright (C) 1998-2012 Charles Cazabon.<span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">Licensed under the GNU GPL version 2.</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">SimpleIMAPSSLRetriever:foobar@gmail.com@imap.gmail.com:993:</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">...</span></span></p></td></tr></tbody></table>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Reading_.Messages)\"></a>Reading Messages</h1>\n\n<p>Now that we can download our messages, we need to have a way to read them. This\nis where mu and the accompanying emacs-based client, mu, comes in.</p>\n\n<h2>2.1\n <tt>&nbsp;</tt><a name=\"(part._.Installation)\"></a>Installation</h2>\n\n<p>Just like with getmail above, chances are, mu can be installed via your\nsystem&rsquo;s package manager. If you are using a\n<a href=\"https://www.debian.org/misc/children-distros\">Debian-based\nsystem</a>, you can install it by running:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo apt-get install maildir-utils</span></span></p></td></tr></tbody></table>\n\n<p>If you are using <a href=\"https://nixos.org/nixos/\">NixOS</a>, you can\ninstall by running:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ nix-env -i mu</span></span></p></td></tr></tbody></table>\n\n<p>In addition to the above, we need to fetch mu4e. This comes with mu&rsquo;s source\ncode. Download it by running:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ mkdir ~/.emacs.d</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd ~/.emacs.d</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git clone git@github.com:djcb/mu.git</span></span></p></td></tr></tbody></table>\n\n<p>This creates a <span class=\"stt\">mu/</span> directory in the current directory, which happens to\nbe the default location from which emacs looks for init files. Take note, that\nthe git command above actually fetches the source code of mu, and we can\nactually use it to install mu. But since, you have your package manager, we&rsquo;ll\nignore that. Also the location from which the <span class=\"stt\">mu/mu4e/</span> subdirectory exists\nfrom the package manager&rsquo;s installation, varies between systems. So, for now,\nwe&rsquo;re only interested with the <span class=\"stt\">mu/mu4e/</span> subdirectory.</p>\n\n<h2>2.2\n <tt>&nbsp;</tt><a name=\"(part._.Configuration)\"></a>Configuration</h2>\n\n<p>We now need to make that mu4e directory accessible to emacs. To do so, we need\nto edit either <span class=\"stt\">~/.emacs.d/init.el</span> or <span class=\"stt\">~/.emacs</span>:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs ~/.emacs.d/init.el</span></span></p></td></tr></tbody></table>\n\n<p>Then add the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(setq load-path (append load-path '(\"~/.emacs.d/mu/mu4e\")))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(require 'mu4e)</span></span></p></td></tr></tbody></table>\n\n<p>Additionally we need to put in some information about us, so that emacs won&rsquo;t\nbother asking us about those details later on:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(setq user-full-name \"Foo B. Baz\"</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">user-mail-address \"foo@bar.baz\")</span></span></p></td></tr></tbody></table>\n\n<p>To make our life even easier, we&rsquo;ll set some variables:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(setq mu4e-get-mail-command \"getmail\"</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">mu4e-update-interval 300</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">mu4e-attachment-dir \"~/Downloads\")</span></span></p></td></tr></tbody></table>\n\n<h2>2.3\n <tt>&nbsp;</tt><a name=\"(part._.Execution)\"></a>Execution</h2>\n\n<p>You can restart emacs so that those settings can take effect, or alternatively,\nyou can mark (C-space) those lines, then hit:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">M-x eval-region</span></span></p></td></tr></tbody></table>\n\n<p>At this point, you can now use mu4e, by hitting:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">M-x mu4e</span></span></p></td></tr></tbody></table>\n\n<p>You&rsquo;ll get a sexy menu, wherein you can hit shortcuts to get you to where you\nwant. To compose a message, hit <span class=\"stt\">C</span>, fill in the fields, then hit\n<span class=\"stt\">C-c C-c</span> to send the message. The rest of the commands should be\nself-explanatory, but if you want to learn more, you can read the nice\n<a href=\"http://www.djcbsoftware.nl/code/mu/mu4e/index.html\">mu4e manual</a>.</p>\n\n<h2>2.4\n <tt>&nbsp;</tt><a name=\"(part._.Encryption)\"></a>Encryption</h2>\n\n<p>Optionally, you may want to add some tweaks so that encryption and\ndecryption of messages, will be easier. This is actually one of my primary\nreasons why I&rsquo;m using mu4e &ndash; it has been pointed out to me that despite using\nbrowser extensions like <a href=\"http://getfiregpg.org/s/home\">FireGPG</a>, and\n<a href=\"https://addons.mozilla.org/en-US/firefox/addon/its-all-text/\">It&rsquo;s\nAll Text!</a>, the supposedly private message that you composed got auto-saved by\ndefault to the <span style=\"font-style: italic\">Drafts</span> folder. This implies, that your unencrypted\nmessage, was still saved somewhere. Ahem.</p>\n\n<p>To make use of these cryptographic utilities, edit your emacs init:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs ~/.emacs.d/init.el</span></span></p></td></tr></tbody></table>\n\n<p>Then add the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(require 'mml2015)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(require 'epa-file)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun encrypt-message (&amp;optional arg)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive \"p\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(mml-secure-message-encrypt-pgp))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun decrypt-message (&amp;optional arg)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive \"p\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(epa-decrypt-armor-in-region (point-min) (point-max)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defalias 'ec 'encrypt-message)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defalias 'dc 'decrypt-message)</span></span></p></td></tr></tbody></table>\n\n<p>Mark those lines, then hit:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">M-x eval-region</span></span></p></td></tr></tbody></table>\n\n<p>To make the settings take effect, immediately.</p>\n\n<p>To send an encrypt a message, hit <span class=\"stt\">C</span> from the main menu of mu4e, fill in\nthe usual fields like <span class=\"stt\">To:</span>, and <span class=\"stt\">Subject:</span>, then on the message\nbody, hit:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">M-x ec</span></span></p></td></tr></tbody></table>\n\n<p>This will tag your outgoing message to be signed and encrypted. To send the\nit, hit <span class=\"stt\">C-c C-c</span>. This will then prompt you to input your\npassphrase. It will also ask you to fill in some information regarding your\noutgoing mail server (SMTP). The SMTP server for Gmail is\n<span style=\"font-style: italic\">smtp.gmail.com</span>, then use USERNAME@gmail.com when prompted for the\nusername. Use your regular password, when prompted, or input your\napplication-specific password, as described earlier. These information will be\nsaved to <span class=\"stt\">~/.authinfo</span>, and will be used for later messages.</p>\n\n<p>To decrypt a message, open the message, then hit:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">M-x dc</span></span></p></td></tr></tbody></table>\n\n<p>This will prompt you to input your passphrase. After which, you&rsquo;ll be prompted\nif you&rsquo;ll want to replace the contents of the buffer, say yes to this.</p>\n\n<p>These approaches are not fool-proof, because there&rsquo;s at least two gaping holes\nthat you have to be aware of &ndash; emacs backups, and mu4e drafts. With the\nformer, when you are using emacs&rsquo; backup facility, or a package like\n<a href=\"http://www.emacswiki.org/emacs/BackupDirectory\">backup-dir</a>,\nmessages that you compose, presumably before you encrypt it, will have an\nunencrypted copy to the local disk. With the latter, the same principle\napplies. So be wary of these situations, and tweak your configuration, as\nnecessary.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Conclusion)\"></a>Conclusion</h1>\n\n<p>Bear in mind that I purposely avoided fleshing out many details, as it would\nconflate the attempt of this article to make things simple. However, if you\nwant to learn more, you can always go to the\n<a href=\"http://pyropus.ca/software/getmail/documentation.html\">getmail</a>\nand <a href=\"http://www.djcbsoftware.nl/code/mu/mu4e/index.html\">mu4e</a>\ndocumentation, to fill in missing gaps, that you may have.</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-09-10-emacs-and-hax.scrbl" . unix) f post (u . "Emacs and Hax") (? . 6) 1395207431 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/09/10/emacs-and-hax/index.html" . unix) "/blog/2013/09/10/emacs-and-hax/" (u . "2013-09-10T13:23:34") (? . 4) (? . 2) (c (u . "emacs") c (u . "programming")) (u . "\n<p>In this series of posts, I will be sharing my personal hacks on how\nI use Emacs for my day-to-day stuff. Most, if not all of the code\ncontained in these posts are excerpts from the respective\nconfiguration files that I use.</p>\n\n<p>The rest of the configuration can be found at\n<a href=\"http://github.com/ebzzry/dotemacs\">github.com/ebzzry/dotemacs</a>.</p>") #t (u . "\n<p>In this series of posts, I will be sharing my personal hacks on how\nI use Emacs for my day-to-day stuff. Most, if not all of the code\ncontained in these posts are excerpts from the respective\nconfiguration files that I use.</p>\n\n<p>The rest of the configuration can be found at\n<a href=\"http://github.com/ebzzry/dotemacs\">github.com/ebzzry/dotemacs</a>.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun delete-forward-char-or-region (&amp;optional arg)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive \"p\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(if (region-active-p)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(delete-region (region-beginning)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(region-end))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(delete-forward-char arg)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [deletechar] 'delete-forward-char-or-region)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [del] 'delete-forward-char-or-region)</span></span></p></td></tr></tbody></table>\n\n<p>This command deletes a region if one is active, or deletes the\ncharacter underneath the cursor. I have this bound to the DEL key.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun compile-file ()</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(compile \"make -k\"))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [(control ?x) ?c] 'compile-file)</span></span></p></td></tr></tbody></table>\n\n<p>I use this command frequently, and I use it from typesetting LaTeX\ndocuments, compiling Scribble documents, compiling code, and just\nabout anything that I can use Make with.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun geiser-save ()</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(geiser-repl--write-input-ring))</span></span></p></td></tr></tbody></table>\n\n<p>This comes in very handy for me, because sometimes I lose the REPL\nbuffer before the input ring has been saved. When I need to run I\nexecute &lsquo;M-x geiser-save&lsquo;.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun my-scheme-mode-hook ()</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(put '&#955; 'scheme-indent-function 1)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(define-key scheme-mode-map [(control ?c) tab] 'completion-at-point))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)</span></span></p></td></tr></tbody></table>\n\n<p>I also have the above, since I want to align the &lsquo;&#955;&lsquo; symbol nicely.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(require 'tramp)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(add-to-list 'tramp-remote-path \"/var/run/current-system/sw/bin\")</span></span></p></td></tr></tbody></table>\n\n<p>The above snippet is applicable only to users of NixOS, since the\nfilesystem tree is deviantly different from \"regular\" nixen.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun other-window-1 (&amp;optional arg)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive \"p\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(other-window (- arg)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [(control left)] 'other-window-1)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [(control right)] 'other-window)</span></span></p></td></tr></tbody></table>\n\n<p>One of my favorites, and I may be biased because I&rsquo;m using a\n[Kinesis Advantage keyboard](http://www.kinesis-ergo.com/advantage.htm),\nwherein the arrow keys are very easy to reach, but nevertheless, YMMV.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun find-two-files (orientation directory file1 file2)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(let ((file-path1 (file-truename file1))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(file-path2 (file-truename file2)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(delete-other-windows)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(case orientation</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(vertical (progn (split-window-right)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(find-file file-path1)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(other-window 1)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(find-file file-path2)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(horizontal (progn (split-window)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(find-file file-path1)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(other-window 1)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(find-file file-path2)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(other-window 1))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun find-two-files-vertically (directory file1 file2)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(find-two-files 'vertical directory file1 file2))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun find-two-files-horizontally (directory file1 file2)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(find-two-files 'horizontal directory file1 file2))</span></span></p></td></tr></tbody></table>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">ev () {</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">emacsclient -nw --eval \"(find-two-files-vertically \\\"$(pwd)\\\" \\\"$1\\\" \\\"$2\\\")\"</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">}</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">eh () {</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">emacsclient -nw --eval \"(find-two-files-horizontally \\\"$(pwd)\\\" \\\"$1\\\" \\\"$2\\\")\"</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">}</span></span></p></td></tr></tbody></table>\n\n<p>The two snippets above, for Elisp and Zsh (or your shell),\nrespectively, load two files into an Emacs buffer, oriented\nhorizontally, and vertically, respectively.</p>\n\n<p>So, to load &lsquo;~/test1.txt&lsquo; and &lsquo;~/test2.txt&lsquo; in Emacs, split windows,\nhorizontally, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ev ~/test1.txt ~/test2.txt</span></span></p></td></tr></tbody></table>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(require 'server)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(unless (server-running-p)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(server-start))</span></span></p></td></tr></tbody></table>\n\n<p>This snippet runs the server instance, when it is not\nrunning, yet:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun kill-current-buffer ()</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(kill-buffer (current-buffer)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [(control ?x) (control ?k)] 'kill-current-buffer)</span></span></p></td></tr></tbody></table>\n\n<p>A lot of us have this, but this is my simple, unconvoluted version</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun mark-line (&amp;optional arg)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive \"p\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(if (not mark-active)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(progn</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(beginning-of-line)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(push-mark)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(setq mark-active t)))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(forward-line arg))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [(shift ? )] 'mark-line)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(define-key global-map [(control ?z)] 'mark-line)</span></span></p></td></tr></tbody></table>\n\n<p>There have been plenty of times in the past when I needed this\nfunction, and I would have to press a long series of keystrokes just\nto get it down. The above is what I have, instead.</p>\n\n<p>Well, that is it for now. Ciao!</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-the-y-combinator-in-scheme-in-six-easy-steps.scrbl" . unix) f post (u . "The Y Combinator in Six Easy Steps") (? . 9) 1393353902 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/05/09/the-y-combinator-in-six-easy-steps/index.html" . unix) "/blog/2013/05/09/the-y-combinator-in-six-easy-steps/" (u . "2013-05-09T12:43:11") #f (? . 0) (c (u . "racket") c (u . "programming")) (u . "\n<p>A lot of us have been taught that to be able to define a recursive procedure,\nthe recursive invocation must \"use\" the name of the recursive procedure. The\n<a href=\"http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\">Y combinator</a>, however, lets us perform recursion, without referring to the\nnamed identifier.</p>\n\n<p>The Y combinator has been both a source of inspiration and frustration\nfor many. It evokes a eureka-like sensation once you get past the\nwall, but it also renders us scratching our heads when it just doesn&rsquo;t\nmake sense to traverse the labyrinth. This post aims to bring my own\napproach on how to derive the Y combinator. It may not be the most\nelegant way, but it may work for you.</p>") #t (u . "\n<p>A lot of us have been taught that to be able to define a recursive procedure,\nthe recursive invocation must \"use\" the name of the recursive procedure. The\n<a href=\"http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\">Y combinator</a>, however, lets us perform recursion, without referring to the\nnamed identifier.</p>\n\n<p>The Y combinator has been both a source of inspiration and frustration\nfor many. It evokes a eureka-like sensation once you get past the\nwall, but it also renders us scratching our heads when it just doesn&rsquo;t\nmake sense to traverse the labyrinth. This post aims to bring my own\napproach on how to derive the Y combinator. It may not be the most\nelegant way, but it may work for you.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<p>In the code examples in this post, the <span class=\"stt\">&gt;</span> symbol denotes the prompt\nsymbol for your Scheme implementation.</p>\n\n<p>Let&rsquo;s start by defining a procedure named <span class=\"stt\">sum0</span> that computes the\n<a href=\"http://en.wikipedia.org/wiki/Summation\">summation</a> of a positive\ninteger, down to zero. In the following snippet, the recursive call happens\nwhen <span class=\"stt\">sum0</span> is applied in the else part of the condition.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (define sum0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n (sum0 (- n 1))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (sum0 100)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">5050</span></span></p></td></tr></tbody></table>\n\n<p>You have have observed that I have defined <span class=\"stt\">sum0</span> using an explicit\n<span class=\"stt\">lambda</span>. You&rsquo;ll see shortly, why.</p>\n\n<p>Let&rsquo;s break that procedure futher, into more elementary components,\nand we&rsquo;ll apply it, using\n<a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a>.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (define sum0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n ((f f) (- n 1)))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; ((sum0 sum0) 100)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">5050</span></span></p></td></tr></tbody></table>\n\n<p>The extra <span class=\"stt\">lambda</span> was needed because we needed to have a way to\n\"anonymize\" the recursive procedure. In this case, we used the\nidentifier <span class=\"stt\">f</span> to bind to the recursive procedure, which is <span class=\"stt\">sum0</span>,\nitself. The weird-looking <span class=\"stt\">((f f) ...)</span> is needed, because we have to\nperform the same procedure invocation method used initially: <span class=\"stt\">((sum0 sum0) 100)</span>.</p>\n\n<p>We&rsquo;re now going to exploit that property, to use a \"nameless\"\napproach, that is, without using the <span class=\"stt\">sum0</span> name.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (((lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n ((f f) (- n 1))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n ((f f) (- n 1)))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">100)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">5050</span></span></p></td></tr></tbody></table>\n\n<p>Take note, that at this point, we&rsquo;re no longer using the <span class=\"stt\">sum0</span> name,\nto refer the the definition, except for later.</p>\n\n<p>Next, we need to move the <span class=\"stt\">(f f)</span> part outside, to isolate the general\n(Y combinator), from the specific (<span class=\"stt\">sum0</span>) code.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (((lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">((lambda (p)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n (p (- n 1))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (v) ((f f) v))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">((lambda (p)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n (p (- n 1))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (v) ((f f) v)))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">100)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">5050</span></span></p></td></tr></tbody></table>\n\n<p>During the procedure application, the identifier <span class=\"stt\">p</span> will be bound to\n<span class=\"stt\">(lambda (v) ((f f) v))</span>, and the identifier <span class=\"stt\">v</span> will be bound to <span class=\"stt\">(-\nn 1)</span>.</p>\n\n<p>Finally, we&rsquo;re going to isolate the Y combinator, from the <span class=\"stt\">sum0</span>\nprocedure.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (((lambda (x)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">((lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(x (lambda (v) ((f f) v))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(x (lambda (v) ((f f) v))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (p)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n (p (- n 1)))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">100)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">5050</span></span></p></td></tr></tbody></table>\n\n<p>We replace the <span class=\"stt\">sum0</span>-specific definition with <span class=\"stt\">x</span>. This requires us\nagain, to create an enveloping <span class=\"stt\">lambda</span>. Since <span class=\"stt\">x</span> is bound to the\ncomputing procedure, we no longer need to repeat it.</p>\n\n<p>Optionally, we can explicitly create separate procedure definitions for\nthe Y combinator itself, and the <span class=\"stt\">sum0</span> procedure.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (define y</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (x)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">((lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(x (lambda (v) ((f f) v))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (f)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(x (lambda (v) ((f f) v)))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (define %sum0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (p)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(lambda (n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(if (zero? n)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">0</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">(+ n (p (- n 1)))))))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (define sum0 (y %sum0))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; (sum0 100)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">5050</span></span></p></td></tr></tbody></table>\n\n<p>I hope this post has been useful in making you understand the\nY combinator, currying, and procedure application. Please post your\ncomments and suggestions, below. &lt;-:</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-09-29-emacs-and-racket.scrbl" . unix) f post (u . "Emacs and Racket") (? . 1) 1393353833 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/09/29/emacs-and-racket/index.html" . unix) "/blog/2013/09/29/emacs-and-racket/" (u . "2013-09-29T22:21:19") (? . 2) (? . 3) (c (u . "emacs") c (u . "programming") c (u . "racket")) (u . "\n<p>In this post, I&rsquo;ll discuss the easiest approach that I took to setup up a\n<a href=\"http://racket-lang.org\">Racket</a> development environment on\nEmacs. Take note, that this is not the only approach available &ndash; some did it\nin arguably better ways. In this article, I&rsquo;ll try to explain the shortest\nroute that I took.</p>") #t (u . "\n<p>In this post, I&rsquo;ll discuss the easiest approach that I took to setup up a\n<a href=\"http://racket-lang.org\">Racket</a> development environment on\nEmacs. Take note, that this is not the only approach available &ndash; some did it\nin arguably better ways. In this article, I&rsquo;ll try to explain the shortest\nroute that I took.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p>Editing Racket code with Emacs has traditionally been done by rudimentary modes\nthat mostly lacked flexibility. They were able to evaluate current definitions,\nlast definitions, and entire buffers, for the most part. Unfortunately, that\ndidn&rsquo;t suffice with the way Racket dealt with things. A more intelligent way of\nhandling code, was needed.</p>\n\n<p>Fortunately, we have <a href=\"http://www.nongnu.org/geiser/\">Geiser</a>. To\nquote the first paragraph on its homepage:</p>\n\n<p><span style=\"font-style: italic\">Geiser is a collection of Emacs major and minor modes that conspire with\none or more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws\ninspiration (and a bit more) from environments such as Common Lisp&#8217;s Slime,\nFactor&#8217;s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking\ninside Emacs (even more) fun.</span>.</p>\n\n<p>I saw several other major modes that tries to do what Geiser does, but I became\nmost comfortable with what Geiser offered. Some similar libraries can co-exist\nwith Geiser, too. I tried those, but it became too complex, for me. I wound up\njust using Geiser. Also, as a semi-related note, I&rsquo;m using Emacs to edit Racket\ncode because I don&rsquo;t know of any other editor that does it so well. I don&rsquo;t use\nDrRacket, except when I need to use its nice GUI debugger. </p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Installation)\"></a>Installation</h1>\n\n<p>My installation method is crude, but it works, at least for me. Other\ninstallation methods exist, but I couldn&rsquo;t wrap my brain around them, so I\nopted instead for something that requires the minimal amount of chore. Also,\nI&rsquo;m still not sure what are the hidden consequences of not doing it the\n\"elegant\" way, presuming there is one.</p>\n\n<p>Let&rsquo;s say that you want to install your Geiser files in\n<span class=\"RktSym\">~/.emacs.d/elisp/</span><span class=\"RktMeta\"></span>. We&rsquo;ll issue the following commands to install Geiser\nto that location:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ mkdir ~/.emacs.d/elisp</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd ~/.emacs.d/elisp</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git clone http://git.sv.gnu.org/r/geiser.git</span></span></p></td></tr></tbody></table>\n\n<p>After that, in <span class=\"RktSym\">~/.emacs.d/elisp/geiser/</span><span class=\"RktMeta\"></span>, you&rsquo;ll have something that\nlooks like the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">AUTHORS</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">autogen.sh*</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">bin/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">ChangeLog</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">configure.ac</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">COPYING</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">doc/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">elisp/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">.git/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">.gitignore</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">INSTALL</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Makefile.am</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">NEWS</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">README</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">README.elpa</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">scheme/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">THANKS</span></span></p></td></tr></tbody></table>\n\n<p>Next, we want the directory <span class=\"RktSym\">~/.emacs.d/elisp/geiser/elisp/</span><span class=\"RktMeta\"></span> to be a\nmember of the Emacs variable <span class=\"RktSym\">load-path</span><span class=\"RktMeta\"></span> so that <span class=\"RktSym\">require</span><span class=\"RktMeta\"></span> and\nfriends will know where to find things. To do that, add the following to your\nEmacs init file &ndash; either in <span class=\"RktSym\">~/.emacs.d/init.el</span><span class=\"RktMeta\"></span>, or in <span class=\"RktSym\">~/.emacs</span><span class=\"RktMeta\"></span>\n(deprecated):</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(add-to-list 'load-path \"~/.emacs.d/elisp/geiser/elisp/\")</span></span></p></td></tr></tbody></table>\n\n<p>Next, we&rsquo;ll put in the actual code that invokes and configures Geiser:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(require 'geiser)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(setq geiser-active-implementations '(racket))</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(defun geiser-save ()</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(interactive)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">(geiser-repl--write-input-ring))</span></span></p></td></tr></tbody></table>\n\n<p>The first expression loads Geiser, itself. The second one specifies that it\nwon&rsquo;t prompt you for other implementations if it finds them. The last one is\noptional &ndash; it enables you to execute <span class=\"RktSym\">M-x</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">geiser-save</span><span class=\"RktMeta\"></span> in the REPL buffer\nto force saving of the history to the disk file, which is\n<span class=\"RktSym\">~/.geiser_history.racket</span><span class=\"RktMeta\"></span>, by default. It is useful if you want to save\nyour REPL session, immediately (Nothing is more horrifying than losing\n<span style=\"font-style: italic\">THAT</span> expression). For all the Emacs code above, to take effect, you can\nevaluate them now using members of the eval-* troupe (<span class=\"RktSym\">eval-defun</span><span class=\"RktMeta\"></span>,\n<span class=\"RktSym\">eval-last-sexp</span><span class=\"RktMeta\"></span>, <span class=\"RktSym\">eval-region</span><span class=\"RktMeta\"></span>), or, you can still opt to respawn a\nnew Emacs process.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Usage)\"></a>Usage</h1>\n\n<p>To reap what you sowed, create or open a <span class=\"RktSym\">.rkt</span><span class=\"RktMeta\"></span> file, with at least a\nproper module declaration. Then hit:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">M-x run-geiser</span></span></p></td></tr></tbody></table>\n\n<p>And, boomshakalaka! A new (Emacs) window opens, containing the <span class=\"RktSym\">*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Racket</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">REPL</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">*</span><span class=\"RktMeta\"></span> buffer. Whatever you can do with the REPL invoked with vanilla\ncommand-line <span class=\"RktSym\">racket</span><span class=\"RktMeta\"></span>, you can also do with this, and more. This major\nmode is actually Comint mode, under the hood, with hooks to a a Racket\nprocess. For those of you who are unfamiliar with Comint mode, it is the same\nmode that handles <span class=\"RktSym\">M-x</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shell</span><span class=\"RktMeta\"></span>.</p>\n\n<p>So, what can we do with it? While editing <span class=\"RktSym\">.rkt</span><span class=\"RktMeta\"></span> file, here are some of\nthe usual shortcuts that I use (The full list of keys are\n<a href=\"http://www.nongnu.org/geiser/geiser_5.html#Cheat-sheet\">available\nhere</a>). Take note, that the description of the keys that I used below, are for\nmyself initially, to help me understand what they do. They may, or may not\ndiverge from the official description, listed on the aforementioned link.</p>\n\n<p><span style=\"font-weight: bold\">Racket buffer</span></p>\n\n<p></p>\n\n<table cellspacing=\"0\" class=\"boxed\">\n <tbody>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">Key</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p><span style=\"font-weight: bold\">What it does</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c C-z</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Switch to the REPL</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c C-a</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Evaluate buffer, then switch to the REPL</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-M-x</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Evaluate current expression</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-x C-e</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Evaluate last expression</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c C-r</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Evaluate region</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c C-\\</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Insert a &#955; symbol</p></td></tr></tbody></table>\n\n<p><span style=\"font-weight: bold\">REPL buffer</span></p>\n\n<p></p>\n\n<table cellspacing=\"0\" class=\"boxed\">\n <tbody>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">Key</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p><span style=\"font-weight: bold\">What it does</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c C-z</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Switch to the Racket buffer</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">M-p</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Switch to previous history item</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">M-n</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Switch to next history item</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c M-p</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Jump to previous prompt</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c M-p</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Jump to next prompt</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C-c C-q</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Quit the REPL</p></td></tr></tbody></table>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Conclusion)\"></a>Conclusion</h1>\n\n<p>I have intentionally skipped many topics from the\n<a href=\"http://www.nongnu.org/geiser/\">official manual</a> because it makes\nit unattractive to people who are averse to reading long blocks of text\n(ironically, this article may even qualify as one.). The methods described\nabove are by in no way representative of community-advised ways of installing\nand using Racket with Emacs. Feel free to drop a comment below!  Ciao!</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-livefrog-a-livejournal-utility.scrbl" . unix) f post (u . "Livefrog: A LiveJournal Utility") (? . 4) 1394694213 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/05/29/livefrog-a-livejournal-utility/index.html" . unix) "/blog/2013/05/29/livefrog-a-livejournal-utility/" (u . "2013-05-29T15:10:34") (? . 5) (? . 6) (c (u . "racket") c (u . "programming")) (u . "\n<p>I am pleased to announce the release of <span style=\"font-weight: bold\">livefrog</span>, a utility I wrote to\nmigrate LiveJournal articles to\n<a href=\"http://github.com/greghendershott/frog\">Frog</a>.</p>\n\n<p>The sources, along with additional information, are located at\n<a href=\"http://github.com/ebzzry/livefrog\">github.com/ebzzry/livefrog</a>.</p>") #t (u . "\n<p>I am pleased to announce the release of <span style=\"font-weight: bold\">livefrog</span>, a utility I wrote to\nmigrate LiveJournal articles to\n<a href=\"http://github.com/greghendershott/frog\">Frog</a>.</p>\n\n<p>The sources, along with additional information, are located at\n<a href=\"http://github.com/ebzzry/livefrog\">github.com/ebzzry/livefrog</a>.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p><span style=\"font-weight: bold\">livefrog</span> is a utility written in <a href=\"http://racket-lang.org\">Racket</a>, used to migrate LiveJournal posts to\n<a href=\"https://github.com/greghendershott/frog/\">Frog</a>, a blogging\nplatform written in Racket, too. It uses the files dumped by either\n<a href=\"http://hewgill.com/ljdump/\">ljdump</a>, or\n<a href=\"http://github.com/ceejbot/ljmigrate\">ljmigrate</a>.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Installation)\"></a>Installation</h1>\n\n<p><span style=\"font-weight: bold\">livefrog</span> is available via Racket&rsquo;s\n<a href=\"http://pkg.racket-lang.org\">Planet2</a>:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco pkg install livefrog</span></span></p></td></tr></tbody></table>\n\n<p>If that doesn&rsquo;t work, you can alternately install by fetching livefrog, and the\ndependencies, from github</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git clone https://github.com/jbclements/sxml.git</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git clone https://github.com/greghendershott/frog.git</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git clone https://github.com/ebzzry/livefrog.git</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco pkg install frog/ sxml/ livefrog/</span></span></p></td></tr></tbody></table>\n\n<p>The trailing slashes are important, to tell <span class=\"stt\">raco</span> that you are\ninstalling from local directories. Without it, it will try to fetch\nthe sources from the internet.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Usage)\"></a>Usage</h1>\n\n<p>This sections contains instructions for creating files suitable for\nuse with Frog.</p>\n\n<h2>3.1\n <tt>&nbsp;</tt><a name=\"(part._.Basics)\"></a>Basics</h2>\n\n<p>To create a Markdown file from the file entry.xml</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco livefrog -m entry.xml</span></span></p></td></tr></tbody></table>\n\n<p>That, however, becomes cumbersome if you&rsquo;re going to manage more than a hundred\nentries. To automatically \"pick up\" the files created by ljdump or ljmigrate,\nand convert them to Markdown.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco livefrog -am</span></span></p></td></tr></tbody></table>\n\n<p>Bear in mind, though, that ljdump and ljmigrate differ on how the trees for the\ndata are created. ljdump has the following tree format, where USERNAME is your\nLiveJournal account name:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">ljdump/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">build</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ChangeLog</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">convertdump.py</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">USERNAME/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">L-1</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">L-2</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">C-2</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">L-3</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">...</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljdump.config</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljdump.config.sample</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljdump-gui.py</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljdump.py*</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">README.txt</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">TODO</span></span></p></td></tr></tbody></table>\n\n<p>ljmigrate, on the other hand, uses a different format:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">ljmigrate/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">LICENSE.text</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljmigrate.cfg</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljmigrate.cfg.sample</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">ljmigrate.py*</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">README.md</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">README_windows.txt</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">TODO</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"stt\">www.livejournal.com/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">USERNAME/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">entry00001/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">entry.xml</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">entry00002/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">entry.xml</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">comment.xml</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">html/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">metadata/</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">userpics/</span></span></p></td></tr></tbody></table>\n\n<p>After creating the Markdown Frog source files, you may now copy them\nto your Frog source directory, designated at <span class=\"stt\">_src/posts/</span></p>\n\n<h2>3.2\n <tt>&nbsp;</tt><a name=\"(part._.Comments)\"></a>Comments</h2>\n\n<p>Frog, by default, uses <a href=\"http://disqus.com\">Disqus</a> to handle the\ncomments. To import comments to this platform, we need to generate an XML file\nthat must adhere to Disqus&rsquo; comment import rules.</p>\n\n<p>To create a file, named <span class=\"stt\">comments.xml</span> that will be used for importing\ncomments, to be used with <a href=\"http://import.disqus.com/\">import.disqus.com</a>, using <span class=\"stt\">foo.bar.com</span> as the root site:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco livefrog -s foo.bar.com -c comments.xml</span></span></p></td></tr></tbody></table>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Updating)\"></a>Updating</h1>\n\n<p>If you installed livefrog using Planet2, you can update it by running:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco pkg update livefrog</span></span></p></td></tr></tbody></table>\n\n<p>However, if you used the latter method, you may update it by pulling\nthe updates, uninstalling livefrog, then installing it\nagain:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd livefrog</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git pull origin master</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd ..</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco pkg remove livefrog</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco pkg install livefrog/</span></span></p></td></tr></tbody></table>\n\n<h1>5\n <tt>&nbsp;</tt><a name=\"(part._.Miscellany)\"></a>Miscellany</h1>\n\n<p>To reduce typing, you may optionally create an alias to <span class=\"stt\">raco\nlivefrog</span> in your shell.</p>\n\n<p>Sh-like shells:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ echo 'alias livefrog=\"raco livefrog\"' &gt;&gt; ~/.bashrc</span></span></p></td></tr></tbody></table>\n\n<p>Csh-like shells:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ echo 'alias livefrog raco livefrog' &gt;&gt; ~/.cshrc</span></span></p></td></tr></tbody></table>\n\n<p>Replace <span class=\"stt\">.bashrc</span>, and <span class=\"stt\">.cshrc</span>, with the appropriate init file for\nyour shell.</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-21-usync-yet-another-data-synchronizer.scrbl" . unix) f post (u . "Usync: A Data Synchronizer") (? . 5) 1394694522 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/05/21/usync-a-data-synchronizer/index.html" . unix) "/blog/2013/05/21/usync-a-data-synchronizer/" (u . "2013-05-21T19:18:33") (? . 7) (? . 4) (c (u . "scheme") c (u . "programming")) (u . "\n<p>I am pleased to announce the release of <span style=\"font-weight: bold\">Usync</span>, a site-to-site\nsynchronization tool written in <a href=\"http://www.scsh.net\">Scsh</a>. It\nmakes use of <a href=\"http://www.cis.upenn.edu/~bcpierce/unison/\">Unison</a>,\nand <a href=\"http://rsync.samba.org/\">rsync</a>, for bi- and uni-directional\nsynchronizations, respectively.</p>\n\n<p>The sources, along with additional information, are located at\n<a href=\"http://github.com/ebzzry/usync\">github.com/ebzzry/usync</a>.</p>") #t (u . "\n<p>I am pleased to announce the release of <span style=\"font-weight: bold\">Usync</span>, a site-to-site\nsynchronization tool written in <a href=\"http://www.scsh.net\">Scsh</a>. It\nmakes use of <a href=\"http://www.cis.upenn.edu/~bcpierce/unison/\">Unison</a>,\nand <a href=\"http://rsync.samba.org/\">rsync</a>, for bi- and uni-directional\nsynchronizations, respectively.</p>\n\n<p>The sources, along with additional information, are located at\n<a href=\"http://github.com/ebzzry/usync\">github.com/ebzzry/usync</a>.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p>Site-to-site synchronizations are usually needed, when two locations, which are\ncalled sites, in this article, make file updates independently. Let&rsquo;s say the\ncompany <span style=\"font-style: italic\">Foo</span> has two offices. In the first office, they have the\naccounting, and logistics departments. In the second office, they have the IT,\nand HR departments. Both have a common <span class=\"stt\">/pub</span> tree, that has subdirectories\nassigned to each department. Without synchronization, when the first office\nneeds information from the second office, they&rsquo;d have to pull the updates,\nmanually. With synchronization, the first office can access the files from the\nsecond office, as if the IT and HR departments, were in the first office. Usync\nhelps to achieve this.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Basic_.Usage)\"></a>Basic Usage</h1>\n\n<p>To perform two-way synchronization of the directory <span class=\"stt\">/pub/yot/ninam</span>,\nbetween the current host, to the hosts <span class=\"stt\">tarupam</span>, and <span class=\"stt\">taubetmo</span>,\nwhile preserving the directory structure remotely (take note, that\nthere must be no spaces between the hosts specification, due to the\n<span class=\"stt\">IFS</span> environment variable, found in most shells):</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ usync /pub/yot/ninam/ tarupam,taubetmo</span></span></p></td></tr></tbody></table>\n\n<p>The command above will perform two-way synchronization of the diretory\n<span class=\"stt\">ninam/</span> found under <span class=\"stt\">/pub/yot/</span>, to <span class=\"stt\">tarupam:/pub/yot/</span>, and\n<span class=\"stt\">taubetmo:/pub/yot/</span>.</p>\n\n<p>Using our example above, the two-way synchronization system basically\ntells that if the tree <span class=\"stt\">tarupam:/pub/yot/ninam/</span> contains new and/or\nupdated items, compared with <span class=\"stt\">localhost:/pub/yot/ninam/</span>, and\n<span class=\"stt\">localhost:/pub/yot/ninam/</span> also happens to have new and/or updated\nitems, then, they will trade updates.</p>\n\n<p>Ideally, the result is that <span class=\"stt\">localhost:/pub/yot/ninam/</span>,\n<span class=\"stt\">tarupam:/pub/yot/ninam/</span>, and <span class=\"stt\">taubetmo:/pub/yot/ninam/</span>, are all\nequal.</p>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Semi-advanced_.Usage)\"></a>Semi-advanced Usage</h1>\n\n<p>It is also possible to perform synchronization of multiple files, and\ndirectories, to remote hosts. To do so, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ usync /pub/yot/ninam/ ~/file.text ~reyn/*.blend tarupam,taubetmo</span></span></p></td></tr></tbody></table>\n\n<p>The command above will perform two-way synchronization of the paths\n<span class=\"stt\">/pub/yot/ninam/</span>, <span class=\"stt\">~/file.text</span>, and <span class=\"stt\">~reyn/*.blend</span> to the\nremote hosts <span class=\"stt\">tarupam</span>, and <span class=\"stt\">taubetmo</span>, using the same directory\nstructuring system described above.</p>\n\n<p>If you want to perform one-way synchronization, of the above, like\n<span class=\"stt\">rsync</span>, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ usync --one-way --prefer-local /pub/yot/ninam/ ~/file.text ~reyn/draft.blend tarupam,taubetmo</span></span></p></td></tr></tbody></table>\n\n<p>For more usage information, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ usync --help</span></span></p></td></tr></tbody></table>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Caveats)\"></a>Caveats</h1>\n\n<p>This program has been used on FreeBSD, hence making the shebang\nline contain <span class=\"stt\">/usr/local/bin/scsh</span>. Please change it, accordingly.</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-09-26-emacs-and-dired.scrbl" . unix) f post (u . "Emacs and Dired") (? . 2) 1393353892 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/09/26/emacs-and-dired/index.html" . unix) "/blog/2013/09/26/emacs-and-dired/" (u . "2013-09-26T17:57:00") (? . 6) (? . 1) (c (u . "emacs") c (u . "programming")) (u . "\n<p>In this post, I&rsquo;ll be focusing on one of the novel ways Emacs handles\n<span style=\"font-style: italic\">\"directory editing\"</span>. The directory editor, or <span style=\"font-weight: bold\">dired</span> (pronounced\ndir-ed, not die-rd), for short, is the Emacs equivalent of a file\nmanager. Whatever you can do with regular file buffers, you can also do it with\ndired buffers, to a certain extent.</p>") #t (u . "\n<p>In this post, I&rsquo;ll be focusing on one of the novel ways Emacs handles\n<span style=\"font-style: italic\">\"directory editing\"</span>. The directory editor, or <span style=\"font-weight: bold\">dired</span> (pronounced\ndir-ed, not die-rd), for short, is the Emacs equivalent of a file\nmanager. Whatever you can do with regular file buffers, you can also do it with\ndired buffers, to a certain extent.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p>To run dired, run emacs on the command line, supplying a directory as its argument:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">emacs ~/Desktop/</span></span></p></td></tr></tbody></table>\n\n<p>Or, alternatively, you can press <span class=\"stt\">C-x d</span> inside Emacs. If you are\ncurrently editing a file, the directory of that file will be presented as the\ndefault value in the minibuffer area. Either way, when you hit <span class=\"stt\">Enter</span>, a\nbuffer of the directory will load, that looks like the output of\n<span class=\"stt\">ls -l</span>:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/home/john/Desktop/foo:</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">total used in directory 84 available 540767396</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">-rw-r--r-- 1 john users 5935 Sep 27 18:17 index.html</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">-rw-r--r-- 1 john users 5944 Sep 27 18:17 index2.html</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">drwxr-xr-x 3 john users 4096 Sep 26 17:42 pics</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">drwxr-xr-x 3 john users 4096 Sep 26 05:39 vids</span></span></p></td></tr></tbody></table>\n\n<p>Okay, now that we have it, what can we do with it? Well, here is a short list\nof what, we can do with it. Take note, that the keyboard shortcuts in this\narticle are case-sensitive, unless explicitly stated otherwise.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Common_commands)\"></a>Common commands</h1>\n\n<p>These are the usual commands that you would use, in a dired buffer. In addition\nto that, they can operate on single, or multiple items. Using them for multiple\nitems will be explained, next.</p>\n\n<p></p>\n\n<table cellspacing=\"0\" class=\"boxed\">\n <tbody>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">Key</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p><span style=\"font-weight: bold\">What it does</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">R</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Rename item(s)</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">C</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Copy item(s)</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">D</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Delete item(s)</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">O</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Change item(s) owner</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">G</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Change item(s) group</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">M</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Change item(s) permission</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">S</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Create symlink</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">T</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Touch item(s), like \"touch\"</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">X</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Execute a shell command on item(s)</p></td></tr></tbody></table>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Mark_commands)\"></a>Mark commands</h1>\n\n<p>These commands perform mark-related operations on items. Creating marks simply\nmeans putting a tag on items, so that you can perform the operations in the\nprevious section, on them.</p>\n\n<p></p>\n\n<table cellspacing=\"0\" class=\"boxed\">\n <tbody>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">Key</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p><span style=\"font-weight: bold\">What it does</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">m</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Mark an item, for the above-listed commands</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">u</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Unmark a single item</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">U</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Unmark all items</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">t</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Toggle marks between marked and unmarked items</p></td></tr></tbody></table>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Other_commands)\"></a>Other commands</h1>\n\n<p>These commands act on their own. They operate on single items, and they don&rsquo;t\nmake use of marks. The <span style=\"font-weight: bold\">w</span> command, however, is an exception.</p>\n\n<p></p>\n\n<table cellspacing=\"0\" class=\"boxed\">\n <tbody>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">Key</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p><span style=\"font-weight: bold\">What it does</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">+</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Create directory</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">^</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Go up, one level, like \"cd ..\"</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">e</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Edit an item</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">f</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Edit an item</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">v</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>View an item, like \"less\" or \"more\"</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">g</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Reload the current directory</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">j</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Jump to an item</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">s</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Change sort order</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">y</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Show file type of item, like \"file\"</p></td></tr>\n  <tr>\n   <td>\n    <p><span style=\"font-weight: bold\">w</span></p></td>\n   <td>\n    <p><span class=\"hspace\">&nbsp;</span></p></td>\n   <td>\n    <p>Copy item name(s) to the clipboard</p></td></tr></tbody></table>\n\n<h1>5\n <tt>&nbsp;</tt><a name=\"(part._.W.Dired_mode)\"></a>WDired mode</h1>\n\n<p><span style=\"font-weight: bold\">BUT</span>, one of the coolest, and often-overlooked feature of dired is the\n<span style=\"font-weight: bold\">WDired</span> mode. What it does is that it gives you a decent ability to edit\nthe item names in a dired buffer, just as you would on a typical buffer. To\nenter wdired mode, hit <span class=\"stt\">M-x wdired-change-to-wdired-mode</span>. The major mode\nchanges from <span style=\"font-weight: bold\"><span style=\"font-style: italic\">Dired</span></span> to <span style=\"font-weight: bold\"><span style=\"font-style: italic\">Editable Dired</span></span>. You can then\nrename the files, and directories, with ease. You can even use rectangle and\nreplace functions on them, to make things easier. The changes you have made at\nthis point are not yet saved. To save the changes, press <span class=\"stt\">C-c C-c</span>.</p>\n\n<p>Well, that is it for now. Ciao!</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2014-02-21-an-introduction-to-ugarit.scrbl" . unix) f post (u . "An Introduction to Ugarit") (? . 10) 1406517207 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2014/02/21/an-introduction-to-ugarit/index.html" . unix) "/blog/2014/02/21/an-introduction-to-ugarit/" (u . "2014-02-21T12:07:18") (? . 8) #f (c (u . "backups")) (u . "\n<p>How many times have we experienced hindsight, after a catastrophic event has\nhappened? how many times have we told ourselves that had we created backups of\nour precious data, we wouldn&rsquo;t be in that dire situation, pulling our hairs out\nlike a maniac?</p>\n\n<p>Most of us have been there &ndash; we lost our precious files due inadvertent\ncauses. We lost them because of disk crash, data corruption, security breach,\nand other reasons. But had we created a fallback, a big, safe foam that we can\nland on, it wouldn&rsquo;t have been a lot of trouble, and heart ache. On the flip\nside, creating and managing backups can be daunting, and equally dangerous.</p>\n\n<p>In this post, we&rsquo;ll talk about\n<a href=\"http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki\">Ugarit</a>, a nice piece of technology, that combines ease-of-use, and security,\nin a single tool.</p>") #t (u . "\n<p>How many times have we experienced hindsight, after a catastrophic event has\nhappened? how many times have we told ourselves that had we created backups of\nour precious data, we wouldn&rsquo;t be in that dire situation, pulling our hairs out\nlike a maniac?</p>\n\n<p>Most of us have been there &ndash; we lost our precious files due inadvertent\ncauses. We lost them because of disk crash, data corruption, security breach,\nand other reasons. But had we created a fallback, a big, safe foam that we can\nland on, it wouldn&rsquo;t have been a lot of trouble, and heart ache. On the flip\nside, creating and managing backups can be daunting, and equally dangerous.</p>\n\n<p>In this post, we&rsquo;ll talk about\n<a href=\"http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki\">Ugarit</a>, a nice piece of technology, that combines ease-of-use, and security,\nin a single tool.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p>Ugarit is a classic example of a tool, that requires minimal setup and\nconfiguration, but is used many times. That once the initial tinkering is done,\nall we need to do is reuse the tool. But that isn&rsquo;t Ugarit&rsquo;s main strength &ndash;\nit is the almost unholy marriage of convenience and security.</p>\n\n<p>Most, if not all the time, convenience is inversely proportional to\nsecurity. That is, the more convenient something is, the less secure it\nis. With Ugarit, creating and managing backups is as easy as typing a short\ncommand.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Installation)\"></a>Installation</h1>\n\n<p>First, we need to install <a href=\"http://www.call-cc.org/\">Chicken</a>. Most\nlikely, it can be installed via your package manager:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo apt-get install chicken-bin</span></span></p></td></tr></tbody></table>\n\n<p>If it isn&rsquo;t available on your system, you may download it from\n<a href=\"http://code.call-cc.org/\">code.call-cc.org</a>.</p>\n\n<p>After Chicken is installed, let&rsquo;s install Ugarit itself, and some dependencies:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ chicken-install -s ugarit tiger-hash aes</span></span></p></td></tr></tbody></table>\n\n<p>After this command completes, the command <span class=\"stt\">ugarit</span> will become\navailable. To display command-line help:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit -h</span></span></p></td></tr></tbody></table>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.Configuration)\"></a>Configuration</h1>\n\n<p>Ugarit at this point isn&rsquo;t usable yet &ndash; we need to specify where will it store\nthe snapshots. When creating a snapshot of a directory several terabytes big, it is\nideal to store the data on a fast, reliable, stress-tolerant disk. It is not\nuncommon for the command <span class=\"stt\">ls</span> to experience a noticeable lag when ran inside\nthe data directory. Let&rsquo;s presume that <span class=\"stt\">/dev/sdb1</span> is a large filesystem and\nwe want to mount it to <span class=\"stt\">/ugarit/</span>.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo mkdir /ugarit</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo mount /dev/sdb1 /ugarit</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo mkdir /ugarit/vault</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo chown -R $USER /ugarit</span></span></p></td></tr></tbody></table>\n\n<p>Another, equally important requirement that we need to have is its config file,\nusually named <span class=\"stt\">ugarit.conf</span>. It is supplied as part of the required command\nline arguments. It is important to note, that this file does not reside in a\nfixed location, in contrast with some programs that look for a config file at\nstart-up, from $tt{~/}. But before we actually create that file, we need to run\nsome commands. Save the outputs of these commands, because we&rsquo;ll be needing them\nlater:</p>\n\n<p>Create a salt, for the hash function:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ dd if=/dev/random bs=1 count=64 2&gt;/dev/null | base64 -w 0 | tail -1</span></span></p></td></tr></tbody></table>\n\n<p>Create the key, for the vault:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ dd if=/dev/random bs=32 count=1 2&gt;/dev/null | od -An -tx1 | tr -d ' \\t\\n'</span></span></p></td></tr></tbody></table>\n\n<p>After we run those commands, we&rsquo;ll create the config file, <span class=\"stt\">ugarit.conf</span>. To\nmake it consistent with the example above, we&rsquo;ll store it inside <span class=\"stt\">/ugarit</span>:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs /ugarit/ugarit.conf</span></span></p></td></tr></tbody></table>\n\n<p>Then input the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(storage \"backend-fs fs /ugarit/vault\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(file-cache \"/ugarit/cache\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(hash tiger \"SALT\")</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(encryption aes \"KEY\")</span></span></p></td></tr></tbody></table>\n\n<p>Replace SALT, and KEY, with the salt and key strings that we generated\nabove. Save the file, then secure it.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ chmod 600 /ugarit/ugarit.conf</span></span></p></td></tr></tbody></table>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Basic_.Usage)\"></a>Basic Usage</h1>\n\n<h2>4.1\n <tt>&nbsp;</tt><a name=\"(part._.Creating_.Snapshots)\"></a>Creating Snapshots</h2>\n\n<p>To create a snapshot, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit snapshot /ugarit/ugarit.conf TAG DIRECTORY</span></span></p></td></tr></tbody></table>\n\n<p><span style=\"font-weight: bold\">TAG</span> is a name that you will identify the snapshot with later, while\n<span style=\"font-weight: bold\">DIRECTORY</span> is the filesystem tree that you will create a snapshot of. To\ncreate, for example, a snapshot of the directory <span class=\"stt\">pictures/</span>, with the tag\n<span class=\"stt\">pix</span>, run Ugarit like this:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit snapshot /ugarit/ugarit.conf pix pictures</span></span></p></td></tr></tbody></table>\n\n<p>After the snapshot, you&rsquo;ll see similar to the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Archiving pictures to tag pix...</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Root hash: ddc888c86db6d7c468a27cc4af9b2907d219936df82e0971</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Successfully snapshotted pictures to tag pix</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Snapshot hash: ab290399f31fff1e3158c0ede8f90f59b2b41387af48f597</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Written 910460 bytes to the vault in 4 blocks, and reused 0 bytes in 0 blocks</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">(before compression)</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">File cache has saved us 1 file hashings / 638104 bytes (before compression)</span></span></p></td></tr></tbody></table>\n\n<h2>4.2\n <tt>&nbsp;</tt><a name=\"(part._.Exploring_.Snapshots)\"></a>Exploring Snapshots</h2>\n\n<p>To interactively manage the contents of the vault, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit explore /ugarit/ugarit.conf</span></span></p></td></tr></tbody></table>\n\n<p>To list the available commands:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; help</span></span></p></td></tr></tbody></table>\n\n<p>Taking hints from the help usage, we&rsquo;ll extract a directory, that was part of\nthe snapshot earlier. Let&rsquo;s say that the original path of that directory was\n<span class=\"stt\">pictures/holiday</span>. So, to extract the directory <span class=\"stt\">holiday/</span> to the\ncurrent directory, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&gt; cd pix</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/pix&gt; cd current</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/pix/current&gt; cd contents</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/pix/current/contents&gt; get holiday</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Extracted holiday</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/pix/current/contents&gt; exit</span></span></p></td></tr></tbody></table>\n\n<h2>4.3\n <tt>&nbsp;</tt><a name=\"(part._.Extracting_.Snapshots_.Directly)\"></a>Extracting Snapshots Directly</h2>\n\n<p>If, however, you know the exact path to a file or directory that you want to\nextract, you can instead run Ugarit with the extract mode. To extract the\ndirectory <span class=\"stt\">holiday/</span> from above, directly, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit extract /ugarit/ugarit.conf /pix/current/contents/holiday</span></span></p></td></tr></tbody></table>\n\n<h1>5\n <tt>&nbsp;</tt><a name=\"(part._.Tips)\"></a>Tips</h1>\n\n<h2>5.1\n <tt>&nbsp;</tt><a name=\"(part._.Remote_.Filesystems)\"></a>Remote Filesystems</h2>\n\n<p>Ugarit is not limited to creating snapshots of a local filesystem. It can also\nbe used to create snapshots of trees, from a remote host, mounted locally. If\nyou have an <a href=\"http://fuse.sourceforge.net/sshfs.html\">SSHFS</a> mount,\nfor example, you can still create a snapshot of it, just like any other local\nfilesystem:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sshfs remotehost:/ ~/mnt/sshfs/remotehost</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd ~/mnt/sshfs</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit snapshot /ugarit/ugarit.conf remotehost</span></span></p></td></tr></tbody></table>\n\n<p>The same applies to <a href=\"http://www.samba.org/samba/smbfs/\">SMBFS</a>\nmounts:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo mount -t cifs -o user=$USER,uid=$USER //winhost/c ~/mnt/smbfs/winhost/c</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd ~/mnt/smbfs</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit snapshot /ugarit/ugarit.conf winhost</span></span></p></td></tr></tbody></table>\n\n<h2>5.2\n <tt>&nbsp;</tt><a name=\"(part._.Miscellany)\"></a>Miscellany</h2>\n\n<p>To disable output, when creating snapshots:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit snapshot /ugarit/ugarit.conf -q ...</span></span></p></td></tr></tbody></table>\n\n<p>To enable very verbose output, when creating snapshots:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ ugarit snapshot -:a256 /ugarit/ugarit.conf ...</span></span></p></td></tr></tbody></table>\n\n<h1>6\n <tt>&nbsp;</tt><a name=\"(part._.Notes)\"></a>Notes</h1>\n\n<p>When you are doubtful of the performance of the disk where you&rsquo;ll be storing\nthe snapshots, disable the\n<a href=\"http://linux.about.com/library/cmd/blcmdl1_updatedb.htm\">locate\nand updatedb</a> service. It is usually run periodically via cron. It places a\nlot of load on the disk, and may over-stress it. Your mileage may vary.</p>\n\n<p>An important caveat worth mentioning is that, due to the way Ugarit works,\nsnapshot deletions do not exist. The storage mechanism works similarly to Git,\nonly that there is no rebase option.</p>\n\n<p>Ugarit was created by <a href=\"http://www.snell-pym.org.uk/alaric/\">Alaric\nSnell-Pym</a>. If you want to learn more about it, head over to\n<a href=\"http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki\">kitten-technologies.co.uk/project/ugarit/</a>. To report bugs, go to\n<a href=\"http://www.kitten-technologies.co.uk/project/ugarit/reportlist\">kitten-technologies.co.uk/project/ugarit/reportlist</a>.</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2013-05-09-over-under-and-elsewhere.scrbl" . unix) f post (u . "Over, Under, and Elsewhere") (? . 0) 1374050988 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2013/05/09/over-under-and-elsewhere/index.html" . unix) "/blog/2013/05/09/over-under-and-elsewhere/" (u . "2013-05-09T16:08:36") (? . 9) (? . 7) (c (u . "rants")) (u . "\n<p>Our cunning ability for oversight is deridingly high. Whether it may\nbe solving a problem or just trying to be creative. Our impulse to\nover-engineer is unusually prevalent if our initial expectations are\nnot met. We drag our consciousness to lengths almost unfathomable\nbecause we think that if we pour in a lot of thought, the outcome is\npositively and proportionately high according to our convictions. We\ncomplain about our lack of tools. We complain about our lack of\nresources. Yet, we are astonished and brought to shocking disbelief\nwhen someone does it with far less than what our hands have. We\ndisenchant the probability that what we are precisely looking for, is\nright on our ear. Our ability to dismiss ideal options hulking right\nin front of us, is appalling. Why do we need to dig an underground\ntunnel to get in, when all that is needed is to knock?</p>") #t (u . "\n<p>Our cunning ability for oversight is deridingly high. Whether it may\nbe solving a problem or just trying to be creative. Our impulse to\nover-engineer is unusually prevalent if our initial expectations are\nnot met. We drag our consciousness to lengths almost unfathomable\nbecause we think that if we pour in a lot of thought, the outcome is\npositively and proportionately high according to our convictions. We\ncomplain about our lack of tools. We complain about our lack of\nresources. Yet, we are astonished and brought to shocking disbelief\nwhen someone does it with far less than what our hands have. We\ndisenchant the probability that what we are precisely looking for, is\nright on our ear. Our ability to dismiss ideal options hulking right\nin front of us, is appalling. Why do we need to dig an underground\ntunnel to get in, when all that is needed is to knock?</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<p>It is very disturbing that we unjustifiably position ourselves to\nunfailingly accept words just because we have been told to assimilate\nthem. We believe that they are truths without making the slightest\nadvance towards ensuring that what you just heard is infallible. It is\nalso disconcerting that for many, if not most, that they&rsquo;d rather take\nwhat they have been told, as is, rather than be criticized for raising\ntheir hand to ask what could possibly be dubious claims. When we say\nyes, without giving the slightest amount of thought, we have\neffectively enveloped ourselves with a cloud-like cushion, that, while\nit makes everything immediately adjacent from your skin heavenly, we\nneglect to pursue the intellectual safety and we give ourselves\nself-approved parachutes.</p>\n\n<p>On a higher note, I also find that a lot of people radically position\nthemselves to absolute positions. We are very fond of inventing and\nassigning labels among ourselves. We think that by moving ourselves to\nthought-bunkers, we build assumptions that because of the security\nthat our bunker provides, we have prevailed. From our DNA that\nprovides us with the information that contains the code of what makes\nus tick, we turn to our brains to store yet more information. These\nvarious pieces of information and high in breadth, that our humble DNA\ncan no longer even begin to contain. But alas, what we have in our\nindividual brains is still not enough to house our ever-growing house\nof knowledge. We needed to find a way to record them outside our\nbodies, stored somewhere where data retrieval is one of its most\ncritical operations &ndash; we wrote and created records. We began by\nwriting on stones, walls, and anything that would hopefully persist to\ncontain what it must, across generations of readers. We have built\ncolossal libraries, with gargantuan collections of books. With it, we\nhave stored an immense amount of records, far beyond what all the\nbrains of all humans can contain. Then, the libraries became computer\ndatabases. We took yet another step in building tower houses of what\nour ancestors knew, and what we know today. But both by intrigue and\ndisturbance, we see that not even our most advanced technology is able\nto carefully record, with predictability, our coordinates in space in\ntime, for the past, present, and future. We are in a time wherein we\ncan, with high certainty, tell whether a drinking glass has something\nin it or not.</p>\n\n<p>Some of us persist in delusions that claim to know what they have\nnever ventured, or at the least, observed. It is very disheartening\nthat instead of taking a step back and gaze at the sky for a moment,\npeople instead immerse themselves in wonderland. This very\nintoxicating habit, harms not an individual, but the whole\nmankind. When someone tells you that answers to his questions can only\nbe exclusively be answered always by a yes or no, leave him and that\nhe no longer deserve to have your attention again. If you do not know\nthe answer, you should say that you do not know the answer, instead of\ndoing trapeze jumps without anyone to catch your hands.</p>\n\n<p>Oftentimes, we overlook that all the tools that we need are right with\nus.</p>")) ((p+ #"/home/rmm/home/src/www/rmm.meta.ph/_src/posts/2014-02-19-an-introduction-to-frog.scrbl" . unix) f post (u . "An Introduction To Frog") (? . 8) 1393454949 (p+ #"/home/rmm/home/src/www/rmm.meta.ph/blog/2014/02/19/an-introduction-to-frog/index.html" . unix) "/blog/2014/02/19/an-introduction-to-frog/" (u . "2014-02-19T14:07:11") (? . 3) (? . 10) (c (u . "racket") c (u . "web")) (u . "\n<p>When publishing blog content to the web, most would rely on pre-fabricated\nservices, that do most of the heavy lifting. However, there are instances when\nwe want to have more control over our stuff. A good example of which are the\nconstraints that providers enforce. Another is the presence of ads, or the use\nof freemium services, i.e., things can be done, only up to a certain visible\nlimit.</p>\n\n<p>One may argue that all they need is a platform to blog with, and that they\ndon&rsquo;t need the extra flexibility. While that is fine, some of us, including me,\nwant to free from these shackles. I don&rsquo;t want ads on my site. I don&rsquo;t want\nsurprise censorship. I don&rsquo;t want to pay for services that I can get for\nfree. I want freedom. Now, if you&rsquo;re like me, then read on.</p>") #t (u . "\n<p>When publishing blog content to the web, most would rely on pre-fabricated\nservices, that do most of the heavy lifting. However, there are instances when\nwe want to have more control over our stuff. A good example of which are the\nconstraints that providers enforce. Another is the presence of ads, or the use\nof freemium services, i.e., things can be done, only up to a certain visible\nlimit.</p>\n\n<p>One may argue that all they need is a platform to blog with, and that they\ndon&rsquo;t need the extra flexibility. While that is fine, some of us, including me,\nwant to free from these shackles. I don&rsquo;t want ads on my site. I don&rsquo;t want\nsurprise censorship. I don&rsquo;t want to pay for services that I can get for\nfree. I want freedom. Now, if you&rsquo;re like me, then read on.</p>\n\n<p>&lt;!&ndash; more &ndash;&gt;</p>\n\n<h1>1\n <tt>&nbsp;</tt><a name=\"(part._.Introduction)\"></a>Introduction</h1>\n\n<p>When I was looking for tools to create this blog, I became dissatisfied with\nmost of the mainstream options. Some are the just too difficult to setup, while\nsome are lacking in features. I became frustrated because each end of the\nspectrum forces me to use something that is extremely mediocre in at least one\ncritical aspect. Fortunately, I found\n<a href=\"http://github.com/greghendershott/frog\">Frog</a>, via a suggestion\non #racket.</p>\n\n<p>Frog, in layman&rsquo;s terms, is a site creator, that is very easy to use,\nconfigure, and customize. Whatever you write, will appear on your blog &ndash; you\nget what you expect. There are no weird terms of use, nor arbitrary limits, nor\ncoercion &ndash; it&rsquo;s very close to full control, at the tip of your fingertips.</p>\n\n<p>Frog operates somewhere in the middle. That is, it looks like this:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Raw content -&gt; Frog -&gt; HTML</span></span></p></td></tr></tbody></table>\n\n<p>Where raw content is either Markdown, Scribble, or HTML source files, or a\ncombination of all. Frog takes in those input files, and it outputs nice HTML\nthat you can upload to your web server. Easy? No, it&rsquo;s even easier that it\nsounds.</p>\n\n<h1>2\n <tt>&nbsp;</tt><a name=\"(part._.Installation)\"></a>Installation</h1>\n\n<p>In the succeeding sections, let&rsquo;s presume that your username is\n<span class=\"stt\">john</span>, and your home directory is <span class=\"stt\">/home/john/</span>.</p>\n\n<p>To install Frog, we need to install Racket, first. Chances are, your package\nmanager already has it. To install Racket on Debian, run:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ sudo apt-get install racket</span></span></p></td></tr></tbody></table>\n\n<p>In the unlikely event that it can&rsquo;t be installed using your package manager, go\nto <a href=\"http://racket-lang.org/download/\">racket-lang.org/download/</a>, then follow the instructions from there.</p>\n\n<p>Next, we need to install Frog.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco pkg install frog</span></span></p></td></tr></tbody></table>\n\n<p>After which, you&rsquo;ll get the <span class=\"stt\">raco frog</span> command. Let&rsquo;s display its help\noptions:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco frog -h</span></span></p></td></tr></tbody></table>\n\n<h1>3\n <tt>&nbsp;</tt><a name=\"(part._.First_.Use)\"></a>First Use</h1>\n\n<p>Sweet. Now that we have Frog installed, let&rsquo;s get rolling. To create your first\nFrog-powered website, we&rsquo;ll create a project directory first:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ mkdir blog</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cd blog</span></span></p></td></tr></tbody></table>\n\n<p>We&rsquo;ll then fire the spark plug, to initialize the site repository:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco frog --init</span></span></p></td></tr></tbody></table>\n\n<p>You&rsquo;ll see a message saying that your website is ready. Let&rsquo;s follow the\nsuggested command:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco frog -bp</span></span></p></td></tr></tbody></table>\n\n<p>What that command does is that it builds the HTML files from the sample source\nfiles created with the <span class=\"stt\"></span><span class=\"stt\">&ndash;</span><span class=\"stt\">init</span> switch, then it runs a local web server,\nserving by default, the location http://localhost:3000. Frog will then open a\nnew browser tab, or window, pointing to that URL. The page that you&rsquo;ll see\ncontains the default site layout. When you&rsquo;re OK with it, let&rsquo;s go back to the\nterminal, and kill that process by hitting <span class=\"stt\">C-c</span>.</p>\n\n<h1>4\n <tt>&nbsp;</tt><a name=\"(part._.Creating_.New_.Posts)\"></a>Creating New Posts</h1>\n\n<p>Creating a new article from scratch is another easy task:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco frog -n \"New Blog Post.\"</span></span></p></td></tr></tbody></table>\n\n<p>What it does is that it creates a Markdown file, relative to the current\ndirectory, with the format <span class=\"stt\">_src/posts/YYYY-MM-DD-post-title.md</span>. With the\ncommand above, the absolute path would be similar to:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/home/john/blog/_src/posts/2014-02-21-new-blog-post.md</span></span></p></td></tr></tbody></table>\n\n<p>Let&rsquo;s edit that file, and see how it looks like:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs _src/posts/2014-02-21-new-blog-post.md</span></span></p></td></tr></tbody></table>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">#lang scribble/text</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">Title: New Blog Post</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">Date: 2014-02-21T18:53:42</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">Tags: DRAFT</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">_Replace this with your post text. Add one or more comma-separated</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Tags above. The special tag `DRAFT` will prevent the post from being</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">published._</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&lt;!-- more --&gt;</span></span></p></td></tr></tbody></table>\n\n<p>Bear in mind that this file, was created for us, by the command <span class=\"stt\">raco frog\n-n ...</span>. The first three lines contains metadata about our post. They&rsquo;re the\npost title, date of creation, and tags, respectively. The date was picked up\nfrom the the <span class=\"stt\">-n</span> switch that was issued, earlier. The <span style=\"font-style: italic\">Tags</span> field,\ncontains a comma-separated list of words, that Frog would later identify the\npost with. When the case-sensitive tag <span style=\"font-style: italic\">DRAFT</span> is used, the file will be\nskipped during the build phase.</p>\n\n<p>Four spaces must be prefixed, prior, to those three lines, followed by an empty\nline. The rest will be the actual article content, in Markdown format. When a\nline by its own contain just the text <span class=\"stt\">&lt;!</span><span class=\"stt\">&ndash;</span><span class=\"stt\"> more </span><span class=\"stt\">&ndash;</span><span class=\"stt\">&gt;</span>, that line will be\nreplaced by a hyperlink in the final HTML form, that will point to the rest of\nthe article. That means, all text, after the <span class=\"stt\">&lt;!</span><span class=\"stt\">&ndash;</span><span class=\"stt\"> more </span><span class=\"stt\">&ndash;</span><span class=\"stt\">&gt;</span> line will not\nappear in the blog index, but will appear in the link for the whole post.</p>\n\n<p>Let&rsquo;s say we change that file to look something like the following:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">Title: New Blog Post</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">Date: 2014-02-21T18:53:42</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"stt\">Tags: arts, history</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh,</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">viverra non, semper suscipit, posuere a, pede.</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&lt;!-- more --&gt;</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Donec nec justo eget felis facilisis fermentum. Aliquam porttitor mauris sit</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">amet orci. Aenean dignissim pellentesque felis.</span></span></p></td></tr></tbody></table>\n\n<p>Then, run the build command, again:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco frog -bp</span></span></p></td></tr></tbody></table>\n\n<p>We now have two posts, as displayed in the index. To remove the auto-generated\ninitial post, that was created by the command <span class=\"stt\">raco frog </span><span class=\"stt\">&ndash;</span><span class=\"stt\">init</span>, earlier,\nrun:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ rm -f _src/posts/2012-01-01-a-2012-blog-post.md</span></span></p></td></tr></tbody></table>\n\n<p>Then, rebuild the files:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ raco frog -bp</span></span></p></td></tr></tbody></table>\n\n<h1>5\n <tt>&nbsp;</tt><a name=\"(part._.Customizations)\"></a>Customizations</h1>\n\n<p>By this time, you&rsquo;re really itching to customize the site. Yep, that&rsquo;s what\nwe&rsquo;re going to do in this section.</p>\n\n<p>At the basic level, there are three files that we are going to modify, to make\nour initial changes:</p>\n\n<ul>\n <li>\n  <p>.frogrc</p></li>\n <li>\n  <p>_src/page-template.html</p></li>\n <li>\n  <p>_src/post-template.html</p></li>\n <li>\n  <p>css/bootstrap.css</p></li>\n <li>\n  <p>css/bootstrap.min.css</p></li></ul>\n\n<p>Let&rsquo;s examine each of the files in the list, closer.</p>\n\n<h2>5.1\n <tt>&nbsp;</tt><a name=\"(part.__frogrc)\"></a>.frogrc</h2>\n\n<p>This file is where top-level customizations are made. Open the file\n<span class=\"stt\">.frogrc</span>, located in the current directory:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs .frogrc</span></span></p></td></tr></tbody></table>\n\n<p>You&rsquo;ll notice that there are more than a dozen parameters that can be\ntweaked. But for now, we&rsquo;re only concerned about three parameters:</p>\n\n<ul>\n <li>\n  <p>scheme/host</p></li>\n <li>\n  <p>title</p></li>\n <li>\n  <p>author</p></li></ul>\n\n<p><span class=\"stt\">scheme/host</span> should\ncontain the (sub)domain to which you&rsquo;ll be publishing your work\nlater, <span class=\"stt\">title</span> is the name of your blog, and <span class=\"stt\">author</span> is your name.</p>\n\n<h2>5.2\n <tt>&nbsp;</tt><a name=\"(part._page-template_html)\"></a>page-template.html</h2>\n\n<p>This file contains the common content, across all types of pages, whether they\nare blog or non-blog posts. Open the file <span class=\"stt\">_src/page-template.html</span>, located\nin the current directory:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs _src/page-template.html</span></span></p></td></tr></tbody></table>\n\n<p>You&rsquo;ll see an even bigger file, compared to .frogrc. This is an special HTML\nfile, that contains Racket, and Frog-specific code. It will be used as a basis\nfor all pages that you&rsquo;ll create with Frog. There are plenty of parameters\nhere, but we&rsquo;ll just tweak some that are most usable to us, at the\nmoment. To make it easier, I&rsquo;ll just list down the items to search and\nreplace for:</p>\n\n<ul>\n <li>\n  <p>The Unknown Blogger</p></li>\n <li>\n  <p>My Blog Brand</p></li>\n <li>\n  <p>Welcome</p></li>\n <li>\n  <p>Your legal notice here</p></li></ul>\n\n<p>When you get to those respective sections, it should evident what to replace\nthem with.</p>\n\n<h2>5.3\n <tt>&nbsp;</tt><a name=\"(part._post-template_html)\"></a>post-template.html</h2>\n\n<p>Similar to <span class=\"stt\">page-template.html</span>, but this file contains content that will\nonly appear with blog posts. It is also Perhaps the easiest file to modify is\n<span class=\"stt\">_src/post-template.html</span>. Let&rsquo;s open it:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ emacs _src/post-template.html</span></span></p></td></tr></tbody></table>\n\n<p>For now, you only need to modify the text <span class=\"stt\">shortname</span>. It is the\nidentifier that links the comments section of your blog posts, to the aforesaid\nDisqus account. More about this will be discussed in the section\n<span style=\"font-weight: bold\">Comments</span>.</p>\n\n<h2>5.4\n <tt>&nbsp;</tt><a name=\"(part._bootstrap_css_and_bootstrap_min_css)\"></a>bootstrap.css and bootstrap.min.css</h2>\n\n<p>These two files are responsible for what is commonly called as \"theme\" &ndash; it\ncontrols the look of the site. To change these files, let&rsquo;s head over to\n<a href=\"http://bootswatch.com/\">bootswatch.com</a>, then let&rsquo;s select a\ntheme we like. Let&rsquo;s presume that we want to download the <span style=\"font-style: italic\">Cerulean</span>\ntheme. Click the dropdown box arrow, next to the download link, for that\ntheme. Select and download both <span class=\"stt\">bootstrap.min.css</span> and\n<span class=\"stt\">bootstrap.css</span>. After which, copy them over to the css subdirectory\n<span class=\"stt\">css/</span>.</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ cp ~/Downloads/bootstrap.*.css css/</span></span></p></td></tr></tbody></table>\n\n<h1>6\n <tt>&nbsp;</tt><a name=\"(part._.Miscellany)\"></a>Miscellany</h1>\n\n<p>When we created a new post earlier, we used the following command:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">raco frog -n \"New Blog Post\"</span></span></p></td></tr></tbody></table>\n\n<p>That command, creates a Markdown source file. Frog, however, has another mode\n&ndash; Scribble. This mode lets you use a Scribble source file, instead. To create\none, we&rsquo;ll use the following command:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">raco frog -N \"New Blog Post\"</span></span></p></td></tr></tbody></table>\n\n<p>Had you used this command earlier, the file will have the format\n<span class=\"stt\">_src/posts/YYYY-MM-DD-post-title.md</span>. With the command above, the\nabsolute path would look like:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">/home/john/blog/_src/posts/2014-02-21-new-blog-post.scrbl</span></span></p></td></tr></tbody></table>\n\n<p>Again, let&rsquo;s edit that file, and see how it looks like:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">emacs _src/posts/2014-02-21-new-blog-post.scrbl</span></span></p></td></tr></tbody></table>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">#lang scribble/manual</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Title: New Blog Post</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Date: 2014-02-21T18:53:42</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Tags: DRAFT</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Replace this with your post text. Add one or more comma-separated</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">Tags above. The special tag `DRAFT` will prevent the post from being</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">published.</span></span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\"></span></span><span class=\"hspace\">&nbsp;</span></p></td></tr>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">&lt;!-- more --&gt;</span></span></p></td></tr></tbody></table>\n\n<p>They&rsquo;re mostly the same, except with the addition of the language specifier,\n<span class=\"stt\">#lang scribble/manual</span>, and the absence of the prefix spaces for the\nmetadata fields.</p>\n\n<h1>7\n <tt>&nbsp;</tt><a name=\"(part._.Comments)\"></a>Comments</h1>\n\n<p>Frog makes use of <a href=\"http://disqus.com\">Disqus</a> to handle its\ncomments. To use it, create an account at\n<a href=\"https://disqus.com/profile/signup/?next=http%3A//disqus.com/\">disqus.com/profile/signup/</a>.</p>\n\n<p>When you already have your account, go to\n<a href=\"http://disqus.com/admin/create/\">disqus.com/admin/create/</a>\nto create a site, which will have an alias called a <span style=\"font-style: italic\">shortname</span>. The\n<span style=\"font-style: italic\">shorname</span> is what you&rsquo;ll register with Disqus to uniquely identify your\nwebsite. So, if you chose, for example, <span class=\"stt\">foobar</span>, as the shortname for the\nsite, you may then access <a href=\"http://foobar.disqus.com\">foobar.disqus.com</a> to manage the comments for that site. The shortname\nmentioned here, is what you&rsquo;ll use in the file <span class=\"stt\">_src/post-template.html</span>,\nas discussed above.</p>\n\n<p>To import comments, from an existing blog, to Disqus, go to\n<a href=\"http://import.disqus.com\">import.disqus.com</a>.</p>\n\n<h1>8\n <tt>&nbsp;</tt><a name=\"(part._.Show_.Time)\"></a>Show Time</h1>\n\n<p>To publish your work, upload the contents of the directory that Frog\nmanages; in this tutorial, it is the directory <span class=\"stt\">/home/john/blog</span>, to your\nremote web server. If the current directory is <span class=\"stt\">blog/</span>, and we want to\nsend the files via rsync, the command would look like:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ rsync -avz ./ remotehost:public_html</span></span></p></td></tr></tbody></table>\n\n<p>The directory <span class=\"stt\">public_html</span> could be something else, I just used it\nbecause it is the default with Apache.</p>\n\n<p>However, if you don&rsquo;t have a remote host that you can upload your work to, via\nrsync, and you use <a href=\"http://git-scm.com\">Git</a>, you can use the free\nhosting service of <a href=\"http://pages.github.com\">GitHub Pages</a>. If you\ndon&rsquo;t have a <a href=\"http://github.com\">GitHub</a> account yet, you may go\nto <a href=\"http://github.com\">github.com</a> to create one. To use, GitHub\nPages, create a repository named <span class=\"stt\">USERNAME.github.io</span>. So, if your\nusername is <span class=\"stt\">johndoe</span>, the repository that you need to create should be\nnamed <span class=\"stt\">johndoe.github.io</span>.</p>\n\n<p>To publish your work to GitHub Pages, we first need to add that remote\nrepository:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git remote add origin git@github.com:johndoe/johndoe.github.io.git</span></span></p></td></tr></tbody></table>\n\n<p>Then we push the commits:</p>\n\n<p></p>\n\n<table cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td>\n    <p><span class=\"stt\"><span class=\"stt\">$ git push origin master</span></span></p></td></tr></tbody></table>\n\n<p>To view your website, go to <a href=\"http://johndoe.github.io\">johndoe.github.io</a>.</p>\n\n<h1>9\n <tt>&nbsp;</tt><a name=\"(part._.Notes)\"></a>Notes</h1>\n\n<p><a href=\"https://github.com/greghendershott/frog\">Frog</a> is a viable and\nusable site creator. It is easy-to-use, highly configurable, flexible, and yes,\nopen source. It gives control, back to the author.</p>\n\n<p>Frog was created by <a href=\"http://www.greghendershott.com/\">Greg\nHendershott</a>. If you want to learn more about it, head over to\n<a href=\"http://github.com/greghendershott/frog\">github.com/greghendershott/frog</a>. To report bugs, go to\n<a href=\"https://github.com/greghendershott/frog/issues\">github.com/greghendershott/frog/issues</a>.</p>\n\n<p><span style=\"font-style: italic\">Ribbit!</span></p>"))))