<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Live. Die. Live Again.: All Posts</title>
  <description>Live. Die. Live Again.: All Posts</description>
  <link>http://www.example.com/index.html</link>
  <lastBuildDate>Fri, 21 Feb 2014 12:07:18 PHT</lastBuildDate>
  <pubDate>Fri, 21 Feb 2014 12:07:18 PHT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>An Introduction to Ugarit</title>
   <link>http://www.example.com/blog/2014/02/21/an-introduction-to-ugarit/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2014-02-21-an-introduction-to-ugarit</guid>
   <pubDate>Fri, 21 Feb 2014 12:07:18 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F02%2F21%2Fan-introduction-to-ugarit%2F" height="1" width="1" /&gt;
 &lt;p&gt;how many times have we experienced hindsight, after a catastrophic event has
happened? how many times have we told ourselves that had we created backups of
our precious data, we wouldn&amp;rsquo;t be in that dire situation, pulling our hairs out
like a maniac?&lt;/p&gt;
 &lt;p&gt;Most of us have been there &amp;ndash; we lost our precious files due inadvertent
causes. We lost them because of disk crash, data corruption, security breach,
and other reasons. But had we created a fallback, a big, safe foam that we can
land on, it wouldn&amp;rsquo;t have been a lot of trouble, and heart ache. On the flip
side, creating and managing backups can be daunting, and equally dangerous.&lt;/p&gt;
 &lt;p&gt;In this post, we&amp;rsquo;ll talk about
&lt;a href="http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki"&gt;Ugarit&lt;/a&gt;, a nice piece of technology, that combines ease-of-use, and security,
in a single tool.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;Ugarit is a classic example of a tool, that requires minimal setup and
configuration, but is used many times. That once the initial tinkering is done,
all we need to do is reuse the tool. But that isn&amp;rsquo;t Ugarit&amp;rsquo;s main strength &amp;ndash;
it is the almost unholy marriage of convenience and security.&lt;/p&gt;
 &lt;p&gt;Most, if not all the time, convenience is inversely proportional to
security. That is, the more convenient something is, the less secure it
is. With Ugarit, creating and managing backups is as easy as typing a short
command.&lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h1&gt;
 &lt;p&gt;First, we need to install &lt;a href="http://www.call-cc.org/"&gt;Chicken&lt;/a&gt;. Most
likely, it can be installed via your package manager:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo apt-get install chicken-bin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;If it isn&amp;rsquo;t available on your system, you may download it from
&lt;a href="http://code.call-cc.org/"&gt;code.call-cc.org&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;After Chicken is installed, let&amp;rsquo;s install Ugarit itself, and some dependencies:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ chicken-install -s ugarit tiger-hash aes&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After this command completes, the command &lt;span class="stt"&gt;ugarit&lt;/span&gt; will become
available. To display command-line help:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit -h&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Configuration)"&gt;&lt;/a&gt;Configuration&lt;/h1&gt;
 &lt;p&gt;Ugarit at this point isn&amp;rsquo;t usable yet &amp;ndash; we need to specify where will it store
the snapshots. When creating a snapshot of a directory several terabytes big, it is
ideal to store the data on a fast, reliable, stress-tolerant disk. It is not
uncommon for the command &lt;span class="stt"&gt;ls&lt;/span&gt; to experience a noticeable lag when ran inside
the data directory. Let&amp;rsquo;s presume that &lt;span class="stt"&gt;/dev/sdb1&lt;/span&gt; is a large filesystem and
we want to mount it to &lt;span class="stt"&gt;/ugarit/&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo mkdir /ugarit&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo mount /dev/sdb1 /ugarit&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo mkdir /ugarit/vault&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo chown -R $USER /ugarit&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Another, equally important requirement that we need to have is its config file,
usually named &lt;span class="stt"&gt;ugarit.conf&lt;/span&gt;. It is supplied as part of the required command
line arguments. It is important to note, that this file does not reside in a
fixed location, in contrast with some programs that look for a config file at
start-up, from $tt{~/}. But before we actually create that file, we need to run
some commands. Save the outputs of these commands, because we&amp;rsquo;ll be needing them
later:&lt;/p&gt;
 &lt;p&gt;Create a salt, for the hash function:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ dd if=/dev/random bs=1 count=64 2&amp;gt;/dev/null | base64 -w 0 | tail -1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Create the key, for the vault:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ dd if=/dev/random bs=32 count=1 2&amp;gt;/dev/null | od -An -tx1 | tr -d ' \t\n'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After we run those commands, we&amp;rsquo;ll create the config file, &lt;span class="stt"&gt;ugarit.conf&lt;/span&gt;. To
make it consistent with the example above, we&amp;rsquo;ll store it inside &lt;span class="stt"&gt;/ugarit&lt;/span&gt;:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs /ugarit/ugarit.conf&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then input the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(storage "backend-fs fs /ugarit/vault")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(file-cache "/ugarit/cache")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(hash tiger "SALT")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(encryption aes "KEY")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Replace SALT, and KEY, with the salt and key strings that we generated
above. Save the file, then secure it.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ chmod 600 /ugarit/ugarit.conf&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Basic_.Usage)"&gt;&lt;/a&gt;Basic Usage&lt;/h1&gt;
 &lt;h2&gt;4.1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Creating_.Snapshots)"&gt;&lt;/a&gt;Creating Snapshots&lt;/h2&gt;
 &lt;p&gt;To create a snapshot, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit snapshot /ugarit/ugarit.conf TAG DIRECTORY&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;TAG&lt;/span&gt; is a name that you will identify the snapshot with later, while
&lt;span style="font-weight: bold"&gt;DIRECTORY&lt;/span&gt; is the filesystem tree that you will create a snapshot of. To
create, for example, a snapshot of the directory &lt;span class="stt"&gt;pictures/&lt;/span&gt;, with the tag
&lt;span class="stt"&gt;pix&lt;/span&gt;, run Ugarit like this:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit snapshot /ugarit/ugarit.conf pix pictures&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After the snapshot, you&amp;rsquo;ll see similar to the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Archiving pictures to tag pix...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Root hash: ddc888c86db6d7c468a27cc4af9b2907d219936df82e0971&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Successfully snapshotted pictures to tag pix&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Snapshot hash: ab290399f31fff1e3158c0ede8f90f59b2b41387af48f597&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Written 910460 bytes to the vault in 4 blocks, and reused 0 bytes in 0 blocks&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(before compression)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;File cache has saved us 1 file hashings / 638104 bytes (before compression)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h2&gt;4.2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Exploring_.Snapshots)"&gt;&lt;/a&gt;Exploring Snapshots&lt;/h2&gt;
 &lt;p&gt;To interactively manage the contents of the vault, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit explore /ugarit/ugarit.conf&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;To list the available commands:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; help&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Taking hints from the help usage, we&amp;rsquo;ll extract a directory, that was part of
the snapshot earlier. Let&amp;rsquo;s say that the original path of that directory was
&lt;span class="stt"&gt;pictures/holiday&lt;/span&gt;. So, to extract the directory &lt;span class="stt"&gt;holiday/&lt;/span&gt; to the
current directory, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; cd pix&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/pix&amp;gt; cd current&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/pix/current&amp;gt; cd contents&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/pix/current/contents&amp;gt; get holiday&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Extracted holiday&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/pix/current/contents&amp;gt; exit&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h2&gt;4.3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Extracting_.Snapshots_.Directly)"&gt;&lt;/a&gt;Extracting Snapshots Directly&lt;/h2&gt;
 &lt;p&gt;If, however, you know the exact path to a file or directory that you want to
extract, you can instead run Ugarit with the extract mode. To extract the
directory &lt;span class="stt"&gt;holiday/&lt;/span&gt; from above, directly, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit extract /ugarit/ugarit.conf /pix/current/contents/holiday&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;5
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Tips)"&gt;&lt;/a&gt;Tips&lt;/h1&gt;
 &lt;h2&gt;5.1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Remote_.Filesystems)"&gt;&lt;/a&gt;Remote Filesystems&lt;/h2&gt;
 &lt;p&gt;Ugarit is not limited to creating snapshots of a local filesystem. It can also
be used to create snapshots of trees, from a remote host, mounted locally. If
you have an &lt;a href="http://fuse.sourceforge.net/sshfs.html"&gt;SSHFS&lt;/a&gt; mount,
for example, you can still create a snapshot of it, just like any other local
filesystem:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sshfs remotehost:/ ~/mnt/sshfs/remotehost&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd ~/mnt/sshfs&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit snapshot /ugarit/ugarit.conf remotehost&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The same applies to &lt;a href="http://www.samba.org/samba/smbfs/"&gt;SMBFS&lt;/a&gt;
mounts:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo mount -t cifs -o user=$USER,uid=$USER //winhost/c ~/mnt/smbfs/winhost/c&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd ~/mnt/smbfs&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit snapshot /ugarit/ugarit.conf winhost&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h2&gt;5.2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Miscellany)"&gt;&lt;/a&gt;Miscellany&lt;/h2&gt;
 &lt;p&gt;To disable output, when creating snapshots:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit snapshot /ugarit/ugarit.conf -q ...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;To enable very verbose output, when creating snapshots:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ugarit snapshot -:a256 /ugarit/ugarit.conf ...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;6
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Conclusion)"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
 &lt;p&gt;When you are doubtful of the performance of the disk where you&amp;rsquo;ll be storing
the snapshots, disable the
&lt;a href="http://linux.about.com/library/cmd/blcmdl1_updatedb.htm"&gt;locate
and updatedb&lt;/a&gt; service. It is usually run periodically via cron. It places a
lot of load on the disk, and may over-stress it. Your mileage may vary.&lt;/p&gt;
 &lt;p&gt;An important caveat worth mentioning is that, due to the way Ugarit works,
snapshot deletions do not exist. The storage mechanism works similarly to Git,
only that there is no rebase option.&lt;/p&gt;
 &lt;p&gt;Ugarit was created by &lt;a href="http://www.snell-pym.org.uk/alaric/"&gt;Alaric
Snell-Pym&lt;/a&gt;. If you want to learn more about it, head over to
&lt;a href="http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki"&gt;kitten-technologies.co.uk/project/ugarit/&lt;/a&gt;. To report bugs, go to
&lt;a href="http://www.kitten-technologies.co.uk/project/ugarit/reportlist"&gt;kitten-technologies.co.uk/project/ugarit/reportlist&lt;/a&gt;.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>An Introduction To Frog</title>
   <link>http://www.example.com/blog/2014/02/19/an-introduction-to-frog/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2014-02-19-an-introduction-to-frog</guid>
   <pubDate>Wed, 19 Feb 2014 14:07:11 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F02%2F19%2Fan-introduction-to-frog%2F" height="1" width="1" /&gt;
 &lt;p&gt;When publishing blog content to the web, most would rely on pre-fabricated
services, that do most of the heavy lifting. However, there are instances when
we want to have more control over our stuff. A good example of which are the
constraints that providers enforce. Another is the presence of ads, or the use
of freemium services, i.e., things can be done, only up to a certain visible
limit.&lt;/p&gt;
 &lt;p&gt;One may argue that all they need is a platform to blog with, and that they
don&amp;rsquo;t need the extra flexibility. While that is fine, some of us, including me,
want to free from these shackles. I don&amp;rsquo;t want ads on my site. I don&amp;rsquo;t want
surprise censorship. I don&amp;rsquo;t want to pay for services that I can get for
free. I want freedom. Now, if you&amp;rsquo;re like me, then read on.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;When I was looking for tools to create this blog, I became dissatisfied with
most of the mainstream options. Some are the just too difficult to setup, while
some are lacking in features. I became frustrated because each end of the
spectrum forces me to use something that is extremely mediocre in at least one
critical aspect. Fortunately, I found
&lt;a href="http://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt;, via a suggestion
on #racket.&lt;/p&gt;
 &lt;p&gt;Frog, in layman&amp;rsquo;s terms, is a site creator, that is very easy to use,
configure, and customize. Whatever you write, will appear on your blog &amp;ndash; you
get what you expect. There are no weird terms of use, nor arbitrary limits, nor
coercion &amp;ndash; it&amp;rsquo;s very close to full control, at the tip of your fingertips.&lt;/p&gt;
 &lt;p&gt;Frog operates somewhere in the middle. That is, it looks like this:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Raw content -&amp;gt; Frog -&amp;gt; HTML&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Where raw content is either Markdown, Scribble, or HTML source files, or a
combination of all. Frog takes in those input files, and it outputs nice HTML
that you can upload to your web server. Easy? No, it&amp;rsquo;s even easier that it
sounds.&lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h1&gt;
 &lt;p&gt;In the succeeding sections, let&amp;rsquo;s presume that your username is
&lt;span class="stt"&gt;john&lt;/span&gt;, and your home directory is &lt;span class="stt"&gt;/home/john/&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;To install Frog, we need to install Racket, first. Chances are, your package
manager already has it. To install Racket on Debian, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo apt-get install racket&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;In the unlikely event that it can&amp;rsquo;t be installed using your package manager, go
to &lt;a href="http://racket-lang.org/download/"&gt;racket-lang.org/download/&lt;/a&gt;, then follow the instructions from there.&lt;/p&gt;
 &lt;p&gt;Next, we need to install Frog.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco pkg install frog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After which, you&amp;rsquo;ll get the &lt;span class="stt"&gt;raco frog&lt;/span&gt; command. Let&amp;rsquo;s display its help
options:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco frog -h&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.First_.Use)"&gt;&lt;/a&gt;First Use&lt;/h1&gt;
 &lt;p&gt;Sweet. Now that we have Frog installed, let&amp;rsquo;s get rolling. To create your first
Frog-powered website, we&amp;rsquo;ll create a project directory first:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ mkdir blog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd blog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;We&amp;rsquo;ll then fire the spark plug, to initialize the site repository:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco frog --init&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;You&amp;rsquo;ll see a message saying that your website is ready. Let&amp;rsquo;s follow the
suggested command:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco frog -bp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;What that command does is that it builds the HTML files from the sample source
files created with the &lt;span class="stt"&gt;&lt;/span&gt;&lt;span class="stt"&gt;&amp;ndash;&lt;/span&gt;&lt;span class="stt"&gt;init&lt;/span&gt; switch, then it runs a local web server,
serving by default, the location http://localhost:3000. Frog will then open a
new browser tab, or window, pointing to that URL. The page that you&amp;rsquo;ll see
contains the default site layout. When you&amp;rsquo;re OK with it, let&amp;rsquo;s go back to the
terminal, and kill that process by hitting &lt;span class="stt"&gt;C-c&lt;/span&gt;.&lt;/p&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Creating_.New_.Posts)"&gt;&lt;/a&gt;Creating New Posts&lt;/h1&gt;
 &lt;p&gt;Creating a new article from scratch is another easy task:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco frog -n "New Blog Post."&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;What it does is that it creates a Markdown file, relative to the current
directory, with the format &lt;span class="stt"&gt;_src/posts/YYYY-MM-DD-post-title.md&lt;/span&gt;. With the
command above, the absolute path would be similar to:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/home/john/blog/_src/posts/2014-02-21-new-blog-post.md&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Let&amp;rsquo;s edit that file, and see how it looks like:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs _src/posts/2014-02-21-new-blog-post.md&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;#lang scribble/text&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Title: New Blog Post&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Date: 2014-02-21T18:53:42&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Tags: DRAFT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;_Replace this with your post text. Add one or more comma-separated&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Tags above. The special tag `DRAFT` will prevent the post from being&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;published._&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Bear in mind that this file, was created for us, by the command &lt;span class="stt"&gt;raco frog
-n ...&lt;/span&gt;. The first three lines contains metadata about our post. They&amp;rsquo;re the
post title, date of creation, and tags, respectively. The date was picked up
from the the &lt;span class="stt"&gt;-n&lt;/span&gt; switch that was issued, earlier. The &lt;span style="font-style: italic"&gt;Tags&lt;/span&gt; field,
contains a comma-separated list of words, that Frog would later identify the
post with. When the case-sensitive tag &lt;span style="font-style: italic"&gt;DRAFT&lt;/span&gt; is used, the file will be
skipped during the build phase.&lt;/p&gt;
 &lt;p&gt;Four spaces must be prefixed, prior, to those three lines, followed by an empty
line. The rest will be the actual article content, in Markdown format. When a
line by its own contain just the text &lt;span class="stt"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="stt"&gt;&amp;ndash;&lt;/span&gt;&lt;span class="stt"&gt; more &lt;/span&gt;&lt;span class="stt"&gt;&amp;ndash;&lt;/span&gt;&lt;span class="stt"&gt;&amp;gt;&lt;/span&gt;, that line will be
replaced by a hyperlink in the final HTML form, that will point to the rest of
the article. That means, all text, after the &lt;span class="stt"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="stt"&gt;&amp;ndash;&lt;/span&gt;&lt;span class="stt"&gt; more &lt;/span&gt;&lt;span class="stt"&gt;&amp;ndash;&lt;/span&gt;&lt;span class="stt"&gt;&amp;gt;&lt;/span&gt; line will not
appear in the blog index, but will appear in the link for the whole post.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s say we change that file to look something like the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Title: New Blog Post&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Date: 2014-02-21T18:53:42&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Tags: arts, history&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh,&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;viverra non, semper suscipit, posuere a, pede.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Donec nec justo eget felis facilisis fermentum. Aliquam porttitor mauris sit&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;amet orci. Aenean dignissim pellentesque felis.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then, run the build command, again:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco frog -bp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;We now have two posts, as displayed in the index. To remove the auto-generated
initial post, that was created by the command &lt;span class="stt"&gt;raco frog &lt;/span&gt;&lt;span class="stt"&gt;&amp;ndash;&lt;/span&gt;&lt;span class="stt"&gt;init&lt;/span&gt;, earlier,
run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ rm -f _src/posts/2012-01-01-a-2012-blog-post.md&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then, rebuild the files:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco frog -bp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;5
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Customizations)"&gt;&lt;/a&gt;Customizations&lt;/h1&gt;
 &lt;p&gt;By this time, you&amp;rsquo;re really itching to customize the site. Yep, that&amp;rsquo;s what
we&amp;rsquo;re going to do in this section.&lt;/p&gt;
 &lt;p&gt;At the basic level, there are three files that we are going to modify, to make
our initial changes:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   &lt;p&gt;.frogrc&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;_src/page-template.html&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;_src/post-template.html&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;css/bootstrap.css&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;css/bootstrap.min.css&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;Let&amp;rsquo;s examine each of the files in the list, closer.&lt;/p&gt;
 &lt;h2&gt;5.1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part.__frogrc)"&gt;&lt;/a&gt;.frogrc&lt;/h2&gt;
 &lt;p&gt;This file is where top-level customizations are made. Open the file
&lt;span class="stt"&gt;.frogrc&lt;/span&gt;, located in the current directory:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs .frogrc&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;You&amp;rsquo;ll notice that there are more than a dozen parameters that can be
tweaked. But for now, we&amp;rsquo;re only concerned about three parameters:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   &lt;p&gt;scheme/host&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;title&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;author&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;&lt;span class="stt"&gt;scheme/host&lt;/span&gt; should
contain the (sub)domain to which you&amp;rsquo;ll be publishing your work
later, &lt;span class="stt"&gt;title&lt;/span&gt; is the name of your blog, and &lt;span class="stt"&gt;author&lt;/span&gt; is your name.&lt;/p&gt;
 &lt;h2&gt;5.2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._page-template_html)"&gt;&lt;/a&gt;page-template.html&lt;/h2&gt;
 &lt;p&gt;This file contains the common content, across all types of pages, whether they
are blog or non-blog posts. Open the file &lt;span class="stt"&gt;_src/page-template.html&lt;/span&gt;, located
in the current directory:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs _src/page-template.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;You&amp;rsquo;ll see an even bigger file, compared to .frogrc. This is an special HTML
file, that contains Racket, and Frog-specific code. It will be used as a basis
for all pages that you&amp;rsquo;ll create with Frog. There are plenty of parameters
here, but we&amp;rsquo;ll just tweak some that are most usable to us, at the
moment. To make it easier, I&amp;rsquo;ll just list down the items to search and
replace for:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   &lt;p&gt;The Unknown Blogger&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;My Blog Brand&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Welcome&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
   &lt;p&gt;Your legal notice here&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;When you get to those respective sections, it should evident what to replace
them with.&lt;/p&gt;
 &lt;h2&gt;5.3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._post-template_html)"&gt;&lt;/a&gt;post-template.html&lt;/h2&gt;
 &lt;p&gt;Similar to &lt;span class="stt"&gt;page-template.html&lt;/span&gt;, but this file contains content that will
only appear with blog posts. It is also Perhaps the easiest file to modify is
&lt;span class="stt"&gt;_src/post-template.html&lt;/span&gt;. Let&amp;rsquo;s open it:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs _src/post-template.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;For now, you only need to modify the text &lt;span class="stt"&gt;shortname&lt;/span&gt;. It is the
identifier that links the comments section of your blog posts, to the aforesaid
Disqus account. More about this will be discussed in the section
&lt;span style="font-weight: bold"&gt;Comments&lt;/span&gt;.&lt;/p&gt;
 &lt;h2&gt;5.4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._bootstrap_css_and_bootstrap_min_css)"&gt;&lt;/a&gt;bootstrap.css and bootstrap.min.css&lt;/h2&gt;
 &lt;p&gt;These two files are responsible for what is commonly called as "theme" &amp;ndash; it
controls the look of the site. To change these files, let&amp;rsquo;s head over to
&lt;a href="http://bootswatch.com/"&gt;bootswatch.com&lt;/a&gt;, then let&amp;rsquo;s select a
theme we like. Let&amp;rsquo;s presume that we want to download the &lt;span style="font-style: italic"&gt;Cerulean&lt;/span&gt;
theme. Click the dropdown box arrow, next to the download link, for that
theme. Select and download both &lt;span class="stt"&gt;bootstrap.min.css&lt;/span&gt; and
&lt;span class="stt"&gt;bootstrap.css&lt;/span&gt;. After which, copy them over to the css subdirectory
&lt;span class="stt"&gt;css/&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cp ~/Downloads/bootstrap.*.css css/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;6
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Miscellany)"&gt;&lt;/a&gt;Miscellany&lt;/h1&gt;
 &lt;p&gt;When we created a new post earlier, we used the following command:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;raco frog -n "New Blog Post"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;That command, creates a Markdown source file. Frog, however, has another mode
&amp;ndash; Scribble. This mode lets you use a Scribble source file, instead. To create
one, we&amp;rsquo;ll use the following command:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;raco frog -N "New Blog Post"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Had you used this command earlier, the file will have the format
&lt;span class="stt"&gt;_src/posts/YYYY-MM-DD-post-title.md&lt;/span&gt;. With the command above, the
absolute path would look like:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/home/john/blog/_src/posts/2014-02-21-new-blog-post.scrbl&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Again, let&amp;rsquo;s edit that file, and see how it looks like:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;emacs _src/posts/2014-02-21-new-blog-post.scrbl&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;#lang scribble/manual&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Title: New Blog Post&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Date: 2014-02-21T18:53:42&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Tags: DRAFT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Replace this with your post text. Add one or more comma-separated&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Tags above. The special tag `DRAFT` will prevent the post from being&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;published.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;They&amp;rsquo;re mostly the same, except with the addition of the language specifier,
&lt;span class="stt"&gt;#lang scribble/manual&lt;/span&gt;, and the absence of the prefix spaces for the
metadata fields.&lt;/p&gt;
 &lt;h1&gt;7
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Comments)"&gt;&lt;/a&gt;Comments&lt;/h1&gt;
 &lt;p&gt;Frog makes use of &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; to handle its
comments. To use it, create an account at
&lt;a href="https://disqus.com/profile/signup/?next=http%3A//disqus.com/"&gt;disqus.com/profile/signup/&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;When you already have your account, go to
&lt;a href="http://disqus.com/admin/create/"&gt;disqus.com/admin/create/&lt;/a&gt;
to create a site, which will have an alias called a &lt;span style="font-style: italic"&gt;shortname&lt;/span&gt;. The
&lt;span style="font-style: italic"&gt;shorname&lt;/span&gt; is what you&amp;rsquo;ll register with Disqus to uniquely identify your
website. So, if you chose, for example, &lt;span class="stt"&gt;foobar&lt;/span&gt;, as the shortname for the
site, you may then access &lt;a href="http://foobar.disqus.com"&gt;foobar.disqus.com&lt;/a&gt; to manage the comments for that site. The shortname
mentioned here, is what you&amp;rsquo;ll use in the file &lt;span class="stt"&gt;_src/post-template.html&lt;/span&gt;,
as discussed above.&lt;/p&gt;
 &lt;p&gt;To import comments, from an existing blog, to Disqus, go to
&lt;a href="http://import.disqus.com"&gt;import.disqus.com&lt;/a&gt;.&lt;/p&gt;
 &lt;h1&gt;8
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Show_.Time)"&gt;&lt;/a&gt;Show Time&lt;/h1&gt;
 &lt;p&gt;To publish your work, upload the contents of the directory that Frog
manages; in this tutorial, it is the directory &lt;span class="stt"&gt;/home/john/blog&lt;/span&gt;, to your
remote web server. If the current directory is &lt;span class="stt"&gt;blog/&lt;/span&gt;, and we want to
send the files via rsync, the command would look like:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ rsync -avz ./ remotehost:public_html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The directory &lt;span class="stt"&gt;public_html&lt;/span&gt; could be something else, I just used it
because it is the default with Apache.&lt;/p&gt;
 &lt;p&gt;However, if you don&amp;rsquo;t have a remote host that you can upload your work to, via
rsync, and you use &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, you can use the free
hosting service of &lt;a href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. If you
don&amp;rsquo;t have a &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; account yet, you may go
to &lt;a href="http://github.com"&gt;github.com&lt;/a&gt; to create one. To use, GitHub
Pages, create a repository named &lt;span class="stt"&gt;USERNAME.github.io&lt;/span&gt;. So, if your
username is &lt;span class="stt"&gt;johndoe&lt;/span&gt;, the repository that you need to create should be
named &lt;span class="stt"&gt;johndoe.github.io&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;To publish your work to GitHub Pages, we first need to add that remote
repository:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git remote add origin git@github.com:johndoe/johndoe.github.io.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then we push the commits:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git push origin master&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;To view your website, go to &lt;a href="http://johndoe.github.io"&gt;johndoe.github.io&lt;/a&gt;.&lt;/p&gt;
 &lt;h1&gt;9
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Notes)"&gt;&lt;/a&gt;Notes&lt;/h1&gt;
 &lt;p&gt;&lt;a href="https://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt; is a viable and
usable site creator. It is easy-to-use, highly configurable, flexible, and yes,
open source. It gives control, back to the author.&lt;/p&gt;
 &lt;p&gt;Frog was created by &lt;a href="http://www.greghendershott.com/"&gt;Greg
Hendershott&lt;/a&gt;. If you want to learn more about it, head over to
&lt;a href="http://github.com/greghendershott/frog"&gt;github.com/greghendershott/frog&lt;/a&gt;. To report bugs, go to
&lt;a href="https://github.com/greghendershott/frog/issues"&gt;github.com/greghendershott/frog/issues&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;span style="font-style: italic"&gt;Ribbit!&lt;/span&gt;&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs and Mail</title>
   <link>http://www.example.com/blog/2014/02/17/emacs-and-mail/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2014-02-17-emacs-and-mail</guid>
   <pubDate>Mon, 17 Feb 2014 16:02:38 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2014%2F02%2F17%2Femacs-and-mail%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this day and age, checking our mail means going to the website of our mail
provider, or using a mobile app. However, there are some cases when we want to
have more control over our messages, especially when the feature we want is not
present with the mainstream options.&lt;/p&gt;
 &lt;p&gt;Emacs provides a plethora (gnus, wanderlust, vm, etc.) of ways of sending and
receiving mail. In this post, we&amp;rsquo;re going to talk
&lt;a href="http://pyropus.ca/software/getmail/"&gt;getmail&lt;/a&gt;,
&lt;a href="http://www.djcbsoftware.nl/code/mu/"&gt;mu&lt;/a&gt;, and
&lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e.html"&gt;mu4e&lt;/a&gt;, and how to
set them up quickly. In this tutorial We&amp;rsquo;ll assume that we&amp;rsquo;re going to get our
messages from &lt;a href="http://gmail.com"&gt;Gmail&lt;/a&gt; via its IMAP interface.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Fetching_.Messages)"&gt;&lt;/a&gt;Fetching Messages&lt;/h1&gt;
 &lt;p&gt;We first need to have a way to download our mails, off our mail server. A
easy-to-use application that will do that for us is
&lt;a href="http://pyropus.ca/software/getmail/"&gt;getmail&lt;/a&gt;.&lt;/p&gt;
 &lt;h2&gt;1.1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h2&gt;
 &lt;p&gt;Most of the time, getmail can be readily installed via your system&amp;rsquo;s package
manager. If you are using a
&lt;a href="https://www.debian.org/misc/children-distros"&gt;Debian-based
system&lt;/a&gt;, you can install it by running:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo apt-get install getmail4&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;If you are using &lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;, you can
install by running:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ nix-env -i getmail&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;However, if your system doesn&amp;rsquo;t provide an easy way for you to install getmail,
you can always head to its &lt;a href="http://pyropus.ca/software/getmail/"&gt;homepage&lt;/a&gt;, then download the tarball.&lt;/p&gt;
 &lt;h2&gt;1.2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Configuration)"&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
 &lt;p&gt;Next, we need to conjure the incantation so that getmail knows how to get your
stuff. Create the file &lt;span class="stt"&gt;~/.getmail/getmailrc&lt;/span&gt;. In addition to that, we
need to create and specify where the messages will go:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ mkdir ~/Maildir&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ mkdir ~/.getmail&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs ~/.getmail/getmailrc&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then put in the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;[retriever]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;type = SimpleIMAPSSLRetriever&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;server = imap.gmail.com&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;username = USERNAME@gmail.com&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;password = PASSWORD&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;[destination]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;type = Maildir&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;path = ~/Maildir/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;[options]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;verbose = 2&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;message_log = ~/.getmail/gmail.log&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;read_all = false&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;delivered_to = false&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;received = false&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Replace USERNAME with your Gmail username, then replace PASSWORD with your
Gmail password. However, if you are using
&lt;a href="http://www.google.com/landing/2step/"&gt;2-step authentication&lt;/a&gt;, use
an &lt;a href="https://accounts.google.com/IssuedAuthSubTokens"&gt;application-specific&lt;/a&gt; password for the password field. Take note, that
&lt;span class="stt"&gt;~/Maildir&lt;/span&gt; is the default directory that Mail Transfer Agents (MTA) which
use the &lt;a href="https://en.wikipedia.org/wiki/Maildir"&gt;maildir&lt;/a&gt; format
use, to store data.&lt;/p&gt;
 &lt;h2&gt;1.3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Execution)"&gt;&lt;/a&gt;Execution&lt;/h2&gt;
 &lt;p&gt;To verify that we can indeed fetch our messages, run getmail:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ getmail&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;If it doesn&amp;rsquo;t choke, and displays something like the following, then you have
configured getmail correctly.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;getmail version 4.43.0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;Copyright (C) 1998-2012 Charles Cazabon.&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;Licensed under the GNU GPL version 2.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;SimpleIMAPSSLRetriever:foobar@gmail.com@imap.gmail.com:993:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Reading_.Messages)"&gt;&lt;/a&gt;Reading Messages&lt;/h1&gt;
 &lt;p&gt;Now that we can download our messages, we need to have a way to read them. This
is where mu and the accompanying emacs-based client, mu, comes in.&lt;/p&gt;
 &lt;h2&gt;2.1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h2&gt;
 &lt;p&gt;Just like with getmail above, chances are, mu can be installed via your
system&amp;rsquo;s package manager. If you are using a
&lt;a href="https://www.debian.org/misc/children-distros"&gt;Debian-based
system&lt;/a&gt;, you can install it by running:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ sudo apt-get install maildir-utils&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;If you are using &lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;, you can
install by running:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ nix-env -i mu&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;In addition to the above, we need to fetch mu4e. This comes with mu&amp;rsquo;s source
code. Download it by running:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ mkdir ~/.emacs.d&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd ~/.emacs.d&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git clone git@github.com:djcb/mu.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This creates a &lt;span class="stt"&gt;mu/&lt;/span&gt; directory in the current directory, which happens to
be the default location from which emacs looks for init files. Take note, that
the git command above actually fetches the source code of mu, and we can
actually use it to install mu. But since, you have your package manager, we&amp;rsquo;ll
ignore that. Also the location from which the &lt;span class="stt"&gt;mu/mu4e/&lt;/span&gt; subdirectory exists
from the package manager&amp;rsquo;s installation, varies between systems. So, for now,
we&amp;rsquo;re only interested with the &lt;span class="stt"&gt;mu/mu4e/&lt;/span&gt; subdirectory.&lt;/p&gt;
 &lt;h2&gt;2.2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Configuration)"&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
 &lt;p&gt;We now need to make that mu4e directory accessible to emacs. To do so, we need
to edit either &lt;span class="stt"&gt;~/.emacs.d/init.el&lt;/span&gt; or &lt;span class="stt"&gt;~/.emacs&lt;/span&gt;:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs ~/.emacs.d/init.el&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then add the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(setq load-path (append load-path '("~/.emacs.d/mu/mu4e")))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'mu4e)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Additionally we need to put in some information about us, so that emacs won&amp;rsquo;t
bother asking us about those details later on:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(setq user-full-name "Foo B. Baz"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;user-mail-address "foo@bar.baz")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;To make our life even easier, we&amp;rsquo;ll set some variables:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(setq mu4e-get-mail-command "getmail"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;mu4e-update-interval 300&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;mu4e-attachment-dir "~/Downloads")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h2&gt;2.3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Execution)"&gt;&lt;/a&gt;Execution&lt;/h2&gt;
 &lt;p&gt;You can restart emacs so that those settings can take effect, or alternatively,
you can mark (C-space) those lines, then hit:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x eval-region&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;At this point, you can now use mu4e, by hitting:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x mu4e&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;You&amp;rsquo;ll get a sexy menu, wherein you can hit shortcuts to get you to where you
want. To compose a message, hit &lt;span class="stt"&gt;C&lt;/span&gt;, fill in the fields, then hit
&lt;span class="stt"&gt;C-c C-c&lt;/span&gt; to send the message. The rest of the commands should be
self-explanatory, but if you want to learn more, you can read the nice
&lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e/index.html"&gt;mu4e manual&lt;/a&gt;.&lt;/p&gt;
 &lt;h2&gt;2.4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Encryption)"&gt;&lt;/a&gt;Encryption&lt;/h2&gt;
 &lt;p&gt;Optionally, you may want to add some tweaks so that encryption and
decryption of messages, will be easier. This is actually one of my primary
reasons why I&amp;rsquo;m using mu4e &amp;ndash; it has been pointed out to me that despite using
browser extensions like &lt;a href="http://getfiregpg.org/s/home"&gt;FireGPG&lt;/a&gt;, and
&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/its-all-text/"&gt;It&amp;rsquo;s
All Text!&lt;/a&gt;, the supposedly private message that you composed got auto-saved by
default to the &lt;span style="font-style: italic"&gt;Drafts&lt;/span&gt; folder. This implies, that your unencrypted
message, was still saved somewhere. Ahem.&lt;/p&gt;
 &lt;p&gt;To make use of these cryptographic utilities, edit your emacs init:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ emacs ~/.emacs.d/init.el&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Then add the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'mml2015)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'epa-file)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun encrypt-message (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(mml-secure-message-encrypt-pgp))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun decrypt-message (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(epa-decrypt-armor-in-region (point-min) (point-max)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defalias 'ec 'encrypt-message)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defalias 'dc 'decrypt-message)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Mark those lines, then hit:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x eval-region&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;To make the settings take effect, immediately.&lt;/p&gt;
 &lt;p&gt;To send an encrypt a message, hit &lt;span class="stt"&gt;C&lt;/span&gt; from the main menu of mu4e, fill in
the usual fields like &lt;span class="stt"&gt;To:&lt;/span&gt;, and &lt;span class="stt"&gt;Subject:&lt;/span&gt;, then on the message
body, hit:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x ec&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This will tag your outgoing message to be signed and encrypted. To send the
it, hit &lt;span class="stt"&gt;C-c C-c&lt;/span&gt;. This will then prompt you to input your
passphrase. It will also ask you to fill in some information regarding your
outgoing mail server (SMTP). The SMTP server for Gmail is
&lt;span style="font-style: italic"&gt;smtp.gmail.com&lt;/span&gt;, then use USERNAME@gmail.com when prompted for the
username. Use your regular password, when prompted, or input your
application-specific password, as described earlier. These information will be
saved to &lt;span class="stt"&gt;~/.authinfo&lt;/span&gt;, and will be used for later messages.&lt;/p&gt;
 &lt;p&gt;To decrypt a message, open the message, then hit:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x dc&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This will prompt you to input your passphrase. After which, you&amp;rsquo;ll be prompted
if you&amp;rsquo;ll want to replace the contents of the buffer, say yes to this.&lt;/p&gt;
 &lt;p&gt;These approaches are not fool-proof, because there&amp;rsquo;s at least two gaping holes
that you have to be aware of &amp;ndash; emacs backups, and mu4e drafts. With the
former, when you are using emacs&amp;rsquo; backup facility, or a package like
&lt;a href="http://www.emacswiki.org/emacs/BackupDirectory"&gt;backup-dir&lt;/a&gt;,
messages that you compose, presumably before you encrypt it, will have an
unencrypted copy to the local disk. With the latter, the same principle
applies. So be wary of these situations, and tweak your configuration, as
necessary.&lt;/p&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Conclusion)"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
 &lt;p&gt;Bear in mind that I purposely avoided fleshing out many details, as it would
conflate the attempt of this article to make things simple. However, if you
want to learn more, you can always go to the
&lt;a href="http://pyropus.ca/software/getmail/documentation.html"&gt;getmail&lt;/a&gt;
and &lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e/index.html"&gt;mu4e&lt;/a&gt;
documentation, to fill in missing gaps, that you may have.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs and Racket</title>
   <link>http://www.example.com/blog/2013/09/29/emacs-and-racket/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-09-29-emacs-and-racket</guid>
   <pubDate>Sun, 29 Sep 2013 22:21:19 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F09%2F29%2Femacs-and-racket%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this post, I&amp;rsquo;ll discuss the easiest approach that I took to setup up a
&lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; development environment on
Emacs. Take note, that this is not the only approach available &amp;ndash; some did it
in arguably better ways. In this article, I&amp;rsquo;ll try to explain the shortest
route that I took.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;Editing Racket code with Emacs has traditionally been done by rudimentary modes
that mostly lacked flexibility. They were able to evaluate current definitions,
last definitions, and entire buffers, for the most part. Unfortunately, that
didn&amp;rsquo;t suffice with the way Racket dealt with things. A more intelligent way of
handling code, was needed.&lt;/p&gt;
 &lt;p&gt;Fortunately, we have &lt;a href="http://www.nongnu.org/geiser/"&gt;Geiser&lt;/a&gt;. To
quote the first paragraph on its homepage:&lt;/p&gt;
 &lt;p&gt;&lt;span style="font-style: italic"&gt;Geiser is a collection of Emacs major and minor modes that conspire with
one or more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws
inspiration (and a bit more) from environments such as Common Lisp&amp;#8217;s Slime,
Factor&amp;#8217;s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking
inside Emacs (even more) fun.&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;I saw several other major modes that tries to do what Geiser does, but I became
most comfortable with what Geiser offered. Some similar libraries can co-exist
with Geiser, too. I tried those, but it became too complex, for me. I wound up
just using Geiser. Also, as a semi-related note, I&amp;rsquo;m using Emacs to edit Racket
code because I don&amp;rsquo;t know of any other editor that does it so well. I don&amp;rsquo;t use
DrRacket, except when I need to use its nice GUI debugger. &lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h1&gt;
 &lt;p&gt;My installation method is crude, but it works, at least for me. Other
installation methods exist, but I couldn&amp;rsquo;t wrap my brain around them, so I
opted instead for something that requires the minimal amount of chore. Also,
I&amp;rsquo;m still not sure what are the hidden consequences of not doing it the
"elegant" way, presuming there is one.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s say that you want to install your Geiser files in
&lt;span class="RktSym"&gt;~/.emacs.d/elisp/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;. We&amp;rsquo;ll issue the following commands to install Geiser
to that location:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ mkdir ~/.emacs.d/elisp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd ~/.emacs.d/elisp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git clone http://git.sv.gnu.org/r/geiser.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After that, in &lt;span class="RktSym"&gt;~/.emacs.d/elisp/geiser/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, you&amp;rsquo;ll have something that
looks like the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;AUTHORS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;autogen.sh*&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;bin/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;ChangeLog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;configure.ac&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;COPYING&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;doc/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;elisp/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;.git/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;.gitignore&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;INSTALL&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Makefile.am&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;NEWS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;README&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;README.elpa&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;scheme/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;THANKS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Next, we want the directory &lt;span class="RktSym"&gt;~/.emacs.d/elisp/geiser/elisp/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; to be a
member of the Emacs variable &lt;span class="RktSym"&gt;load-path&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; so that &lt;span class="RktSym"&gt;require&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; and
friends will know where to find things. To do that, add the following to your
Emacs init file &amp;ndash; either in &lt;span class="RktSym"&gt;~/.emacs.d/init.el&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, or in &lt;span class="RktSym"&gt;~/.emacs&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;
(deprecated):&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(add-to-list 'load-path "~/.emacs.d/elisp/geiser/elisp/")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Next, we&amp;rsquo;ll put in the actual code that invokes and configures Geiser:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'geiser)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(setq geiser-active-implementations '(racket))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun geiser-save ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(geiser-repl--write-input-ring))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The first expression loads Geiser, itself. The second one specifies that it
won&amp;rsquo;t prompt you for other implementations if it finds them. The last one is
optional &amp;ndash; it enables you to execute &lt;span class="RktSym"&gt;M-x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;geiser-save&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; in the REPL buffer
to force saving of the history to the disk file, which is
&lt;span class="RktSym"&gt;~/.geiser_history.racket&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, by default. It is useful if you want to save
your REPL session, immediately (Nothing is more horrifying than losing
&lt;span style="font-style: italic"&gt;THAT&lt;/span&gt; expression). For all the Emacs code above, to take effect, you can
evaluate them now using members of the eval-* troupe (&lt;span class="RktSym"&gt;eval-defun&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;,
&lt;span class="RktSym"&gt;eval-last-sexp&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, &lt;span class="RktSym"&gt;eval-region&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;), or, you can still opt to respawn a
new Emacs process.&lt;/p&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Usage)"&gt;&lt;/a&gt;Usage&lt;/h1&gt;
 &lt;p&gt;To reap what you sowed, create or open a &lt;span class="RktSym"&gt;.rkt&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; file, with at least a
proper module declaration. Then hit:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x run-geiser&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;And, boomshakalaka! A new (Emacs) window opens, containing the &lt;span class="RktSym"&gt;*&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Racket&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;REPL&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;*&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; buffer. Whatever you can do with the REPL invoked with vanilla
command-line &lt;span class="RktSym"&gt;racket&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, you can also do with this, and more. This major
mode is actually Comint mode, under the hood, with hooks to a a Racket
process. For those of you who are unfamiliar with Comint mode, it is the same
mode that handles &lt;span class="RktSym"&gt;M-x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;shell&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;So, what can we do with it? While editing &lt;span class="RktSym"&gt;.rkt&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; file, here are some of
the usual shortcuts that I use (The full list of keys are
&lt;a href="http://www.nongnu.org/geiser/geiser_5.html#Cheat-sheet"&gt;available
here&lt;/a&gt;). Take note, that the description of the keys that I used below, are for
myself initially, to help me understand what they do. They may, or may not
diverge from the official description, listed on the aforementioned link.&lt;/p&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;Racket buffer&lt;/span&gt;&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-z&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to the REPL&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-a&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate buffer, then switch to the REPL&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-M-x&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate current expression&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-x C-e&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate last expression&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-r&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate region&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Insert a &amp;#955; symbol&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;REPL buffer&lt;/span&gt;&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-z&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to the Racket buffer&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;M-p&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to previous history item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;M-n&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to next history item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c M-p&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Jump to previous prompt&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c M-p&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Jump to next prompt&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-q&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Quit the REPL&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Conclusion)"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
 &lt;p&gt;I have intentionally skipped many topics from the
&lt;a href="http://www.nongnu.org/geiser/"&gt;official manual&lt;/a&gt; because it makes
it unattractive to people who are averse to reading long blocks of text
(ironically, this article may even qualify as one.). The methods described
above are by in no way representative of community-advised ways of installing
and using Racket with Emacs. Feel free to drop a comment below!  Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs and Dired</title>
   <link>http://www.example.com/blog/2013/09/26/emacs-and-dired/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-09-26-emacs-and-dired</guid>
   <pubDate>Thu, 26 Sep 2013 17:57:00 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F09%2F26%2Femacs-and-dired%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this post, I&amp;rsquo;ll be focusing on one of the novel ways Emacs handles
&lt;span style="font-style: italic"&gt;"directory editing"&lt;/span&gt;. The directory editor, or &lt;span style="font-weight: bold"&gt;dired&lt;/span&gt; (pronounced
dir-ed, not die-rd), for short, is the Emacs equivalent of a file
manager. Whatever you can do with regular file buffers, you can also do it with
dired buffers, to a certain extent.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;To run dired, run emacs on the command line, supplying a directory as its argument:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;emacs ~/Desktop/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Or, alternatively, you can press &lt;span class="stt"&gt;C-x d&lt;/span&gt; inside Emacs. If you are
currently editing a file, the directory of that file will be presented as the
default value in the minibuffer area. Either way, when you hit &lt;span class="stt"&gt;Enter&lt;/span&gt;, a
buffer of the directory will load, that looks like the output of
&lt;span class="stt"&gt;ls -l&lt;/span&gt;:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/home/john/Desktop/foo:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;total used in directory 84 available 540767396&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;-rw-r--r-- 1 john users 5935 Sep 27 18:17 index.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;-rw-r--r-- 1 john users 5944 Sep 27 18:17 index2.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;drwxr-xr-x 3 john users 4096 Sep 26 17:42 pics&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;drwxr-xr-x 3 john users 4096 Sep 26 05:39 vids&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Okay, now that we have it, what can we do with it? Well, here is a short list
of what, we can do with it. Take note, that the keyboard shortcuts in this
article are case-sensitive, unless explicitly stated otherwise.&lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Common_commands)"&gt;&lt;/a&gt;Common commands&lt;/h1&gt;
 &lt;p&gt;These are the usual commands that you would use, in a dired buffer. In addition
to that, they can operate on single, or multiple items. Using them for multiple
items will be explained, next.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;R&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Rename item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Copy item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;D&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Delete item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;O&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change item(s) owner&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;G&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change item(s) group&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;M&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change item(s) permission&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;S&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Create symlink&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;T&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Touch item(s), like "touch"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;X&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Execute a shell command on item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Mark_commands)"&gt;&lt;/a&gt;Mark commands&lt;/h1&gt;
 &lt;p&gt;These commands perform mark-related operations on items. Creating marks simply
means putting a tag on items, so that you can perform the operations in the
previous section, on them.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Mark an item, for the above-listed commands&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;u&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Unmark a single item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;U&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Unmark all items&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;t&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Toggle marks between marked and unmarked items&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Other_commands)"&gt;&lt;/a&gt;Other commands&lt;/h1&gt;
 &lt;p&gt;These commands act on their own. They operate on single items, and they don&amp;rsquo;t
make use of marks. The &lt;span style="font-weight: bold"&gt;w&lt;/span&gt; command, however, is an exception.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;+&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Create directory&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;^&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Go up, one level, like "cd .."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;e&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Edit an item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;f&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Edit an item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;v&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;View an item, like "less" or "more"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;g&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Reload the current directory&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;j&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Jump to an item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;s&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change sort order&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;y&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Show file type of item, like "file"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;w&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Copy item name(s) to the clipboard&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;5
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.W.Dired_mode)"&gt;&lt;/a&gt;WDired mode&lt;/h1&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;BUT&lt;/span&gt;, one of the coolest, and often-overlooked feature of dired is the
&lt;span style="font-weight: bold"&gt;WDired&lt;/span&gt; mode. What it does is that it gives you a decent ability to edit
the item names in a dired buffer, just as you would on a typical buffer. To
enter wdired mode, hit &lt;span class="stt"&gt;M-x wdired-change-to-wdired-mode&lt;/span&gt;. The major mode
changes from &lt;span style="font-weight: bold"&gt;&lt;span style="font-style: italic"&gt;Dired&lt;/span&gt;&lt;/span&gt; to &lt;span style="font-weight: bold"&gt;&lt;span style="font-style: italic"&gt;Editable Dired&lt;/span&gt;&lt;/span&gt;. You can then
rename the files, and directories, with ease. You can even use rectangle and
replace functions on them, to make things easier. The changes you have made at
this point are not yet saved. To save the changes, press &lt;span class="stt"&gt;C-c C-c&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;Well, that is it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs and Hax</title>
   <link>http://www.example.com/blog/2013/09/10/emacs-and-hax/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-09-10-emacs-and-hax</guid>
   <pubDate>Tue, 10 Sep 2013 13:23:34 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F09%2F10%2Femacs-and-hax%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this series of posts, I will be sharing my personal hacks on how
I use Emacs for my day-to-day stuff. Most, if not all of the code
contained in these posts are excerpts from the respective
configuration files that I use.&lt;/p&gt;
 &lt;p&gt;The rest of the configuration can be found at
&lt;a href="http://github.com/ebzzry/dotemacs"&gt;http://github.com/ebzzry/dotemacs&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun delete-forward-char-or-region (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (region-active-p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(delete-region (region-beginning)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(region-end))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(delete-forward-char arg)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [deletechar] 'delete-forward-char-or-region)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [del] 'delete-forward-char-or-region)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This command deletes a region if one is active, or deletes the
character underneath the cursor. I have this bound to the DEL key.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun compile-file ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(compile "make -k"))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control ?x) ?c] 'compile-file)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;I use this command frequently, and I use it from typesetting LaTeX
documents, compiling Scribble documents, compiling code, and just
about anything that I can use Make with.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun geiser-save ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(geiser-repl--write-input-ring))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This comes in very handy for me, because sometimes I lose the REPL
buffer before the input ring has been saved. When I need to run I
execute &amp;lsquo;M-x geiser-save&amp;lsquo;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun my-scheme-mode-hook ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(put '&amp;#955; 'scheme-indent-function 1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(define-key scheme-mode-map [(control ?c) tab] 'completion-at-point))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;I also have the above, since I want to align the &amp;lsquo;&amp;#955;&amp;lsquo; symbol nicely.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'tramp)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(add-to-list 'tramp-remote-path "/var/run/current-system/sw/bin")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The above snippet is applicable only to users of NixOS, since the
filesystem tree is deviantly different from "regular" nixen.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun other-window-1 (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window (- arg)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control left)] 'other-window-1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control right)] 'other-window)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;One of my favorites, and I may be biased because I&amp;rsquo;m using a
[Kinesis Advantage keyboard](http://www.kinesis-ergo.com/advantage.htm),
wherein the arrow keys are very easy to reach, but nevertheless, YMMV.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun find-two-files (orientation directory file1 file2)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(let ((file-path1 (file-truename file1))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(file-path2 (file-truename file2)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(delete-other-windows)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(case orientation&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(vertical (progn (split-window-right)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window 1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path2)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(horizontal (progn (split-window)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window 1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path2)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window 1))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun find-two-files-vertically (directory file1 file2)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-two-files 'vertical directory file1 file2))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun find-two-files-horizontally (directory file1 file2)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-two-files 'horizontal directory file1 file2))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;ev () {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;emacsclient -nw --eval "(find-two-files-vertically \"$(pwd)\" \"$1\" \"$2\")"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;eh () {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;emacsclient -nw --eval "(find-two-files-horizontally \"$(pwd)\" \"$1\" \"$2\")"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The two snippets above, for Elisp and Zsh (or your shell),
respectively, load two files into an Emacs buffer, oriented
horizontally, and vertically, respectively.&lt;/p&gt;
 &lt;p&gt;So, to load &amp;lsquo;~/test1.txt&amp;lsquo; and &amp;lsquo;~/test2.txt&amp;lsquo; in Emacs, split windows,
horizontally, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ev ~/test1.txt ~/test2.txt&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'server)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(unless (server-running-p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(server-start))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This snippet runs the server instance, when it is not
running, yet:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun kill-current-buffer ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(kill-buffer (current-buffer)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control ?x) (control ?k)] 'kill-current-buffer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;A lot of us have this, but this is my simple, unconvoluted version&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun mark-line (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (not mark-active)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(progn&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(beginning-of-line)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(push-mark)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(setq mark-active t)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(forward-line arg))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(shift ? )] 'mark-line)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control ?z)] 'mark-line)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;There have been plenty of times in the past when I needed this
function, and I would have to press a long series of keystrokes just
to get it down. The above is what I have, instead.&lt;/p&gt;
 &lt;p&gt;Well, that is it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Livefrog: A LiveJournal Utility</title>
   <link>http://www.example.com/blog/2013/05/29/livefrog-a-livejournal-utility/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-05-29-livefrog-a-livejournal-utility</guid>
   <pubDate>Wed, 29 May 2013 15:10:34 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F29%2Flivefrog-a-livejournal-utility%2F" height="1" width="1" /&gt;
 &lt;p&gt;I am pleased to announce the release of &lt;span style="font-weight: bold"&gt;livefrog&lt;/span&gt;, a utility written in
Racket, used to migrate LiveJournal posts and comments to the
&lt;a href="http://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt; blogging platform.&lt;/p&gt;
 &lt;p&gt;The sources, along with additional information, are located at
&lt;a href="http://github.com/ebzzry/livefrog"&gt;http://github.com/ebzzry/livefrog&lt;/a&gt;.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Usync: A Data Synchronizer</title>
   <link>http://www.example.com/blog/2013/05/21/usync-a-data-synchronizer/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-05-21-usync-a-data-synchronizer</guid>
   <pubDate>Tue, 21 May 2013 19:18:33 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F21%2Fusync-a-data-synchronizer%2F" height="1" width="1" /&gt;
 &lt;p&gt;I am pleased to announce the release of &lt;span style="font-weight: bold"&gt;Usync&lt;/span&gt;, a site-to-site
synchronization tool written in &lt;a href="http://www.scsh.net"&gt;Scsh&lt;/a&gt;. It
makes use of &lt;a href="http://www.cis.upenn.edu/~bcpierce/unison/"&gt;Unison&lt;/a&gt;,
and &lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;, for bi- and uni-directional
synchronizations, respectively.&lt;/p&gt;
 &lt;p&gt;The sources, along with additional information, are located at
&lt;a href="http://github.com/ebzzry/usync"&gt;http://github.com/ebzzry/usync&lt;/a&gt;.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Squandered Relentlessness</title>
   <link>http://www.example.com/blog/2013/05/09/squandered-relentlessness/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-05-09-squandered-relentlessness</guid>
   <pubDate>Thu, 09 May 2013 16:11:03 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F09%2Fsquandered-relentlessness%2F" height="1" width="1" /&gt;
 &lt;p&gt;There is a disturbing, and eerie sensation that I feel whenever the
damping realization that I am no longer a young child, is observed in
my consciousness. The uneasy struggle between learning to let go of my
portentous past and my capricious future, grips me, with heavy
clench. It is not about the inability to redo gratuitous expenditure
of somewhat liberally-provided lax confinements of time, but it is
about the unsettling observation that the mindset I previously took
for granted, is now something that would require me Atlas strength to
even begin to summon. I miss the unrelenting inquisitiveness that I
once wielded with ease, to my daily scuffling scores with the hordes
of raids of life.&lt;/p&gt;
 &lt;p&gt;When we move past our zones of comfort, we are filled with eagerness
to return back to our own fortified bunkers. We see our own phantasmal
doppelgangers, communicating and showing to us what impending
atrocities may rise out of the ground, ready to devour us alive. The
longer we stay outside, the higher the probability of death. We make
ourselves believe our own convictions. We justify through our own
uncalibrated scales of what choices to make. Whenever unfamiliar
territory is explored, we almost instantly coil ourselves, back, into
seemingly intractable forms. We do it because of fear. We do it
because we do not like the unfamiliar. We do it because of our
affinity and devotion to safety.&lt;/p&gt;
 &lt;p&gt;We complain of the stifling absence of bounty, and yet we voluntarily
stop ourselves from making even an inch of movement of a limb towards
making the advancement on a prey. We are so romantically in love, with
fervor, on the seeking of rationale to our unjustifiable excuses, but
we equally seek sound reason. It is even more appalling to see that
some of us insidiously advertise illusions of grandeur, with claims of
full reprising sensations of the bounty&amp;rsquo;s meat. Our personal biases
towards reaching the reward, effectively stops us from actually
reaching it. We succumb to the remorseless claims of others, on their
failure, effectively rendering us ignorant of the unseen reality. When
the number of persons that flock around us, is high enough, according
to our personal metrics, we ignorantly instill to ourselves what they
buzz to us, and then we impair ourselves and subsequently kill the
essence of our individuality.&lt;/p&gt;
 &lt;p&gt;As adults, we are taught to restrain ourselves inside cages that we
ourselves have built. It is unnerving to see this monstrous act unfold
before my short field of view, everyday. We drag ourselves towards
solitary confinements of our own barbed rooms. We make ourselves fond
of preaching doubt to our fellowmen. And if our own kind does the
same, we see feelings of accomplishment. That is not only horrendous,
but also unsurprisingly stupid. When we were still young, we reach out
to empty space, and create our own discoveries. We find out about
things previously untaught to us. We have the willful disregard for
danger and authority. We do not care how about the scratches and
bruises that we get, as long as we satisfy our wild and insatiable
taste for discovery. When fueled by curiosity, we discover yet another
realm of possibilities &amp;ndash; we find ourselves immersed in dimensions
never before heard or seen, and no matter how much dirt and mud we
lather up to our bodies, we did not care. All that mattered to us was
to have fun in walking the unending journey of discovery. And yet, we
learned.&lt;/p&gt;
 &lt;p&gt;It is ironic that just when we think we are already old enough to
venture the world unaided by our training wheels, we smother ourselves
with mediocre goals of pseudo-discovery. When the curtain is unveiled,
we are confronted by an unsettling sight &amp;ndash; we have lost the drive
that once propelled us to have insights. We grew afraid to exercise
the same techniques and principles we had once as children. We stopped
ourselves from making curious inquisitions about what&amp;rsquo;s out there. We
have made ourselves feel comfortable with what is served on the
institutionalized plates, without the slightest attempt to bolster up
to devise questions. The society, which we are all part of, is part of
the disease. This very illness is what we have been aiding to develop,
from its inception. This unit is what we have been working hard on, to
form our own senses of individuality. We wanted to stand out, and yet
all we do is just blend in. How can a formidable hunter become so
docile that he becomes the prey himself? Why do we throw away our
spears when they are all we have to give us the ability to fight back?
Our sensibilities have drifted away into black, bottomless pits, which
we have all contributed to making.&lt;/p&gt;
 &lt;p&gt;It is aggreging to our shoulders, to see that generations after
generations, we squander and believe that discoveries should always be
made for us, peeled off then fed to our mouths. What have we become as
sailors of the stars? Have we given up the drive to motivate ourselves
to see what is on the other side of the rainbow? Have we tame
ourselves too much, that we became willing to be incarcerated in zoos,
for the pleasure of others?  Or did we just flush out our sense of
power, to make ourselves stand out less, and mix more with the crowd,
greatly reducing our distinctiveness when viewed from afar? It seems
that, for now, we refuse to answer some questions, yet we retaliate to
the idea that we are being interrogated of things deemed to be simpler
than high school classroom lessons. But some things are common to us,
albeit not all: we are afraid to see how society may react to our
actions, no matter how silly or grave our actions may be. But on
matters of more weight, we readily blend in, because we do not want
rejection. Most of us are more than happy to think and move with the
herd, without any forethought.&lt;/p&gt;
 &lt;p&gt;When we voluntarily attach to our legs, heavy chains and balls of
steel, we should not expect to be able to run around the colosseum
with ease. When we dare to explore uncharted territories, without
regrets, without dis-enchantments, without the necessity to have
another ship propel us forward, we have triumphed.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Over, Under, and Elsewhere</title>
   <link>http://www.example.com/blog/2013/05/09/over-under-and-elsewhere/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-05-09-over-under-and-elsewhere</guid>
   <pubDate>Thu, 09 May 2013 16:08:36 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F09%2Fover-under-and-elsewhere%2F" height="1" width="1" /&gt;
 &lt;p&gt;Our cunning ability for oversight is deridingly high. Whether it may
be solving a problem or just trying to be creative. Our impulse to
over-engineer is unusually prevalent if our initial expectations are
not met. We drag our consciousness to lengths almost unfathomable
because we think that if we pour in a lot of thought, the outcome is
positively and proportionately high according to our convictions. We
complain about our lack of tools. We complain about our lack of
resources. Yet, we are astonished and brought to shocking disbelief
when someone does it with far less than what our hands have. We
disenchant the probability that what we are precisely looking for, is
right on our ear. Our ability to dismiss ideal options hulking right
in front of us, is appalling. Why do we need to dig an underground
tunnel to get in, when all that is needed is to knock?&lt;/p&gt;
 &lt;p&gt;It is very disturbing that we unjustifiably position ourselves to
unfailingly accept words just because we have been told to assimilate
them. We believe that they are truths without making the slightest
advance towards ensuring that what you just heard is infallible. It is
also disconcerting that for many, if not most, that they&amp;rsquo;d rather take
what they have been told, as is, rather than be criticized for raising
their hand to ask what could possibly be dubious claims. When we say
yes, without giving the slightest amount of thought, we have
effectively enveloped ourselves with a cloud-like cushion, that, while
it makes everything immediately adjacent from your skin heavenly, we
neglect to pursue the intellectual safety and we give ourselves
self-approved parachutes.&lt;/p&gt;
 &lt;p&gt;On a higher note, I also find that a lot of people radically position
themselves to absolute positions. We are very fond of inventing and
assigning labels among ourselves. We think that by moving ourselves to
thought-bunkers, we build assumptions that because of the security
that our bunker provides, we have prevailed. From our DNA that
provides us with the information that contains the code of what makes
us tick, we turn to our brains to store yet more information. These
various pieces of information and high in breadth, that our humble DNA
can no longer even begin to contain. But alas, what we have in our
individual brains is still not enough to house our ever-growing house
of knowledge. We needed to find a way to record them outside our
bodies, stored somewhere where data retrieval is one of its most
critical operations &amp;ndash; we wrote and created records. We began by
writing on stones, walls, and anything that would hopefully persist to
contain what it must, across generations of readers. We have built
colossal libraries, with gargantuan collections of books. With it, we
have stored an immense amount of records, far beyond what all the
brains of all humans can contain. Then, the libraries became computer
databases. We took yet another step in building tower houses of what
our ancestors knew, and what we know today. But both by intrigue and
disturbance, we see that not even our most advanced technology is able
to carefully record, with predictability, our coordinates in space in
time, for the past, present, and future. We are in a time wherein we
can, with high certainty, tell whether a drinking glass has something
in it or not.&lt;/p&gt;
 &lt;p&gt;Some of us persist in delusions that claim to know what they have
never ventured, or at the least, observed. It is very disheartening
that instead of taking a step back and gaze at the sky for a moment,
people instead immerse themselves in wonderland. This very
intoxicating habit, harms not an individual, but the whole
mankind. When someone tells you that answers to his questions can only
be exclusively be answered always by a yes or no, leave him and that
he no longer deserve to have your attention again. If you do not know
the answer, you should say that you do not know the answer, instead of
doing trapeze jumps without anyone to catch your hands.&lt;/p&gt;
 &lt;p&gt;Oftentimes, we overlook that all the tools that we need are right with
us.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>The Y Combinator in Six Easy Steps</title>
   <link>http://www.example.com/blog/2013/05/09/the-y-combinator-in-six-easy-steps/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-05-09-the-y-combinator-in-six-easy-steps</guid>
   <pubDate>Thu, 09 May 2013 12:43:11 PHT</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=all&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F09%2Fthe-y-combinator-in-six-easy-steps%2F" height="1" width="1" /&gt;
 &lt;p&gt;A lot of us have been taught that to be able to define a recursive procedure,
the recursive invocation must "use" the name of the recursive procedure. The
&lt;a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator"&gt;Y combinator&lt;/a&gt;, however, lets us perform recursion, without referring to the
named identifier.&lt;/p&gt;
 &lt;p&gt;The Y combinator has been both a source of inspiration and frustration
for many. It evokes a eureka-like sensation once you get past the
wall, but it also renders us scratching our heads when it just doesn&amp;rsquo;t
make sense to traverse the labyrinth. This post aims to bring my own
approach on how to derive the Y combinator. It may not be the most
elegant way, but it may work for you.&lt;/p&gt;
 &lt;p&gt;In the code examples in this post, the &lt;span class="stt"&gt;&amp;gt;&lt;/span&gt; symbol denotes the prompt
symbol for your Scheme implementation.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s start by defining a procedure named &lt;span class="stt"&gt;sum0&lt;/span&gt; that computes the
&lt;a href="http://en.wikipedia.org/wiki/Summation"&gt;summation&lt;/a&gt; of a positive
integer, down to zero. In the following snippet, the recursive call happens
when &lt;span class="stt"&gt;sum0&lt;/span&gt; is applied in the else part of the condition.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define sum0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (sum0 (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (sum0 100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;You have have observed that I have defined &lt;span class="stt"&gt;sum0&lt;/span&gt; using an explicit
&lt;span class="stt"&gt;lambda&lt;/span&gt;. You&amp;rsquo;ll see shortly, why.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s break that procedure futher, into more elementary components,
and we&amp;rsquo;ll apply it, using
&lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define sum0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n ((f f) (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; ((sum0 sum0) 100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The extra &lt;span class="stt"&gt;lambda&lt;/span&gt; was needed because we needed to have a way to
"anonymize" the recursive procedure. In this case, we used the
identifier &lt;span class="stt"&gt;f&lt;/span&gt; to bind to the recursive procedure, which is &lt;span class="stt"&gt;sum0&lt;/span&gt;,
itself. The weird-looking &lt;span class="stt"&gt;((f f) ...)&lt;/span&gt; is needed, because we have to
perform the same procedure invocation method used initially: &lt;span class="stt"&gt;((sum0 sum0) 100)&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;We&amp;rsquo;re now going to exploit that property, to use a "nameless"
approach, that is, without using the &lt;span class="stt"&gt;sum0&lt;/span&gt; name.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n ((f f) (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n ((f f) (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Take note, that at this point, we&amp;rsquo;re no longer using the &lt;span class="stt"&gt;sum0&lt;/span&gt; name,
to refer the the definition, except for later.&lt;/p&gt;
 &lt;p&gt;Next, we need to move the &lt;span class="stt"&gt;(f f)&lt;/span&gt; part outside, to isolate the general
(Y combinator), from the specific (&lt;span class="stt"&gt;sum0&lt;/span&gt;) code.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (v) ((f f) v))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (v) ((f f) v)))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;During the procedure application, the identifier &lt;span class="stt"&gt;p&lt;/span&gt; will be bound to
&lt;span class="stt"&gt;(lambda (v) ((f f) v))&lt;/span&gt;, and the identifier &lt;span class="stt"&gt;v&lt;/span&gt; will be bound to &lt;span class="stt"&gt;(-
n 1)&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;Finally, we&amp;rsquo;re going to isolate the Y combinator, from the &lt;span class="stt"&gt;sum0&lt;/span&gt;
procedure.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (((lambda (x)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;We replace the &lt;span class="stt"&gt;sum0&lt;/span&gt;-specific definition with &lt;span class="stt"&gt;x&lt;/span&gt;. This requires us
again, to create an enveloping &lt;span class="stt"&gt;lambda&lt;/span&gt;. Since &lt;span class="stt"&gt;x&lt;/span&gt; is bound to the
computing procedure, we no longer need to repeat it.&lt;/p&gt;
 &lt;p&gt;Optionally, we can explicitly create separate procedure definitions for
the Y combinator itself, and the &lt;span class="stt"&gt;sum0&lt;/span&gt; procedure.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define y&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (x)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define %sum0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define sum0 (y %sum0))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (sum0 100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;I hope this post has been useful in making you understand the
Y combinator, currying, and procedure application. Please post your
comments and suggestions, below. &amp;lt;-:&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>