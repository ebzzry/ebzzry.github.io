<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Live. Die. Repeat.: Posts tagged 'emacs'</title>
  <description>Live. Die. Repeat.: Posts tagged 'emacs'</description>
  <link>http://ebzzry.github.io/tags/emacs.html</link>
  <lastBuildDate>Tue, 14 Oct 2014 09:41:20 UT</lastBuildDate>
  <pubDate>Tue, 14 Oct 2014 09:41:20 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Emacs &amp; Hacks (part 2)</title>
   <link>http://ebzzry.github.io/blog/2014/10/14/emacs-hacks-part-2/?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2014-10-14-emacs-hacks-part-2</guid>
   <pubDate>Tue, 14 Oct 2014 09:41:20 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;This is part 2 of my Emacs tips series. The contents of this post are written in no particular order. Like last time, the rest of the configuration can be found at &lt;a href="http://github.com/ebzzry/dotemacs"&gt;github.com/ebzzry/dotemacs&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="session-management"&gt;Session Management&lt;/h1&gt;

&lt;h2 id="desktop"&gt;Desktop&lt;/h2&gt;

&lt;p&gt;An indispensable tool that I use now is desktop. It saves the state of my Emacs session, so that in the event of crash, power outage, or anything that will make me lose my session, I can back to it. Desktop comes built-in with the recent versions of GNU Emacs. Here&amp;rsquo;s my snippet:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;desktop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;desktop-save-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desktop-dirname&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d"&lt;/span&gt;
      &lt;span class="nv"&gt;desktop-base-file-name&lt;/span&gt; &lt;span class="s"&gt;"desktop"&lt;/span&gt;
      &lt;span class="nv"&gt;desktop-base-lock-name&lt;/span&gt; &lt;span class="s"&gt;"desktop.lock"&lt;/span&gt;
      &lt;span class="nv"&gt;desktop-restore-frames&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;desktop-restore-reuses-frames&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;desktop-restore-in-current-display&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;desktop-restore-forces-onscreen&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-desktop-save&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;desktop-owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;emacs-pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;desktop-save&lt;/span&gt; &lt;span class="nv"&gt;desktop-dirname&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;auto-save-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-desktop-save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id="savehist"&gt;Savehist&lt;/h2&gt;

&lt;p&gt;Another important functionality that I use is savehist. It saves the minibuffer history. It&amp;rsquo;s roughly similar to saving the command line history. Here&amp;rsquo;s my snippet&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;savehist-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;savehist-file&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/savehist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id="consolidation"&gt;Consolidation&lt;/h2&gt;

&lt;p&gt;No, that is not the name of the library. There are a lot of times, when I want to manually save the state of as much session information that I could save. I&amp;rsquo;d want to save the buffers, minibuffer history, bookmarks, and comint mode histories. To do that, I have the following:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;save-defaults&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;desktop-save&lt;/span&gt; &lt;span class="nv"&gt;desktop-dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;savehist-save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bookmark-save&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;save-histories&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-excursion&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-history&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;save&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-histories&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="packages"&gt;Packages&lt;/h1&gt;

&lt;h2 id="elpa"&gt;ELPA&lt;/h2&gt;

&lt;p&gt;If you aren&amp;rsquo;t using the package system yet, use it now. All you need to get started is the following:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-archives&lt;/span&gt;
      &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"gnu"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"http://elpa.gnu.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"marmalade"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"http://marmalade-repo.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"http://melpa.milkbox.net/packages/"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;pi&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;pl&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-list-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To list all the available packages, just hit &lt;code&gt;M-x pl&lt;/code&gt;. If you know the name of package, hit &lt;code&gt;M-x pi RET package RET&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="use-package"&gt;use-package&lt;/h2&gt;

&lt;p&gt;This one is a real gem. It&amp;rsquo;s like &lt;code&gt;require&lt;/code&gt;, but on steroids. When &amp;ldquo;requiring&amp;rdquo; a package, you have the option to specify to install that package, if it does not exist, yet. It also enables you to configure that package, in a unified expression. But unlike &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;use-package&lt;/code&gt; does not come built-in with Emacs. We need to install it via &lt;code&gt;package-install&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;RET&lt;/span&gt; &lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;RET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can then require it, on subsequent uses:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To install &lt;code&gt;markdown-mode&lt;/code&gt;, even if it doesn&amp;rsquo;t exist yet, and configure its related options, after loading it, have:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;markdown-mode&lt;/span&gt;
    &lt;span class="ss"&gt;:ensure&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
    &lt;span class="ss"&gt;:config&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.text\\&amp;#39;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;markdown-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;auto-mode-alist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.markdown\\&amp;#39;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;markdown-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;auto-mode-alist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.md\\&amp;#39;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;markdown-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;auto-mode-alist&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="general"&gt;General&lt;/h1&gt;

&lt;h2 id="line-numbers"&gt;Line Numbers&lt;/h2&gt;

&lt;p&gt;I really like to have the line numbers displayed at the left margin. It gives me a rough idea how big the file is, and where am I currently. Turn on &lt;code&gt;linum-mode&lt;/code&gt; achieves this:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;linum-format&lt;/span&gt; &lt;span class="s"&gt;"%4d"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-linum-mode-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;linum-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;find-file-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-linum-mode-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id="timestamps"&gt;Timestamps&lt;/h2&gt;

&lt;p&gt;I frequently find the need to insert timestamps, especially when I&amp;rsquo;m editing my daily log file. Here are some snippets to help with it:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;insert-date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;system-time-locale&lt;/span&gt; &lt;span class="s"&gt;"en_US.UTF-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;format-time-string&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;insert-date/long&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert-date&lt;/span&gt; &lt;span class="s"&gt;"%A, %B %d %Y"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;insert-date/short&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert-date&lt;/span&gt; &lt;span class="s"&gt;"%Y-%m-%d"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Set the correct value for &lt;code&gt;system-time-locale&lt;/code&gt;, and bind keys for &lt;code&gt;insert-date/long&lt;/code&gt; and &lt;code&gt;insert-date/short&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="keys"&gt;Keys&lt;/h2&gt;

&lt;p&gt;The last, but definitely not the least, is key bindings management. When your key bindings are not organized, it&amp;rsquo;s not easy to find what key did you bind to what. Fortunately, we have &lt;code&gt;bind-key&lt;/code&gt;, which comes as part of &lt;code&gt;use-package&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A sample would look like the following:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bind-keys&lt;/span&gt;
 &lt;span class="ss"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eval-expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;delete-indentation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;delete-indentation-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mark-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-r"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;isearch-backward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-s"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;isearch-forward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-M-r"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;isearch-backward-regexp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-M-s"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;isearch-forward-regexp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bind-keys&lt;/span&gt;
 &lt;span class="ss"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;emacs-lisp-mode-map&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-."&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;find-function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-x C-r"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eval-region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;";"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;sp-comment&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bind-keys&lt;/span&gt;
 &lt;span class="ss"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;dired-mode-map&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-x w"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;wdired-change-to-wdired-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs &amp; Mail</title>
   <link>http://ebzzry.github.io/blog/2014/02/17/emacs-mail/?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2014-02-17-emacs-mail</guid>
   <pubDate>Mon, 17 Feb 2014 08:02:38 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In this day and age, checking our mail means going to the website of our mail provider, or using a mobile app. however, there are some cases when we want to have more control over our messages, especially when the feature we want is not present with the mainstream options.&lt;/p&gt;

&lt;p&gt;emacs provides a plethora (gnus, wanderlust, vm, etc.) of ways of sending and receiving mail. in this post, we&amp;rsquo;re going to talk &lt;a href="http://pyropus.ca/software/getmail/"&gt;getmail&lt;/a&gt;, &lt;a href="http://www.djcbsoftware.nl/code/mu/"&gt;mu&lt;/a&gt;, and &lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e.html"&gt;mu4e&lt;/a&gt;, and how to set them up quickly. In this tutorial We&amp;rsquo;ll assume that we&amp;rsquo;re going to get our messages from &lt;a href="http://gmail.com"&gt;Gmail&lt;/a&gt; via its IMAP interface.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="fetching-messages"&gt;Fetching Messages&lt;/h1&gt;

&lt;p&gt;We first need to have a way to download our mails, off our mail server. A easy-to-use application that will do that for us is &lt;a href="http://pyropus.ca/software/getmail/"&gt;getmail&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;

&lt;p&gt;Most of the time, getmail can be readily installed via your system&amp;rsquo;s package manager. If you are using a &lt;a href="https://www.debian.org/misc/children-distros"&gt;Debian-based system&lt;/a&gt; , you can install it by running:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install getmail4
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If you are using &lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;, you can install by running:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; nix-env -i getmail
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;However, if your system doesn&amp;rsquo;t provide an easy way for you to install getmail, you can always head to its &lt;a href="http://pyropus.ca/software/getmail/"&gt;homepage&lt;/a&gt; , then download the tarball.&lt;/p&gt;

&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Next, we need to conjure the incantation so that getmail knows how to get your stuff. Create the file &lt;code&gt;~/.getmail/getmailrc&lt;/code&gt;. In addition to that, we need to create and specify where the messages will go:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/Maildir
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/.getmail
&lt;span class="gp"&gt;$&lt;/span&gt; emacs ~/.getmail/getmailrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then put in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[retriever]
type = SimpleIMAPSSLRetriever
server = imap.gmail.com
username = USERNAME@gmail.com
password = PASSWORD

[destination]
type = Maildir
path = ~/Maildir/

[options]
verbose = 2
message_log = ~/.getmail/gmail.log
read_all = false
delivered_to = false
received = false&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace USERNAME with your Gmail username, then replace PASSWORD with your Gmail password. However, if you are using &lt;a href="http://www.google.com/landing/2step/"&gt;2-step authentication&lt;/a&gt;, use an &lt;a href="https://accounts.google.com/IssuedAuthSubTokens"&gt;application-specific&lt;/a&gt; password for the password field. Take note, that &lt;code&gt;~/Maildir&lt;/code&gt; is the default directory that Mail Transfer Agents (MTA) which use the &lt;a href="https://en.wikipedia.org/wiki/Maildir"&gt;maildir&lt;/a&gt; format use, to store data.&lt;/p&gt;

&lt;h2 id="execution"&gt;Execution&lt;/h2&gt;

&lt;p&gt;To verify that we can indeed fetch our messages, run getmail:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; getmail
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If it doesn&amp;rsquo;t choke, and displays something like the following, then you have configured getmail correctly.&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="go"&gt;getmail version 4.43.0&lt;/span&gt;
&lt;span class="go"&gt;Copyright (C) 1998-2012 Charles Cazabon.  Licensed under the GNU GPL version 2.&lt;/span&gt;
&lt;span class="go"&gt;SimpleIMAPSSLRetriever:foobar@gmail.com@imap.gmail.com:993:&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="reading-messages"&gt;Reading Messages&lt;/h1&gt;

&lt;p&gt;Now that we can download our messages, we need to have a way to read them. This is where mu and the accompanying emacs-based client, mu, comes in.&lt;/p&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;

&lt;p&gt;Just like with getmail above, chances are, mu can be installed via your system&amp;rsquo;s package manager. If you are using a &lt;a href="https://www.debian.org/misc/children-distros"&gt;Debian-based system&lt;/a&gt;, you can install it by running:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install maildir-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If you are using &lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;, you can install by running:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; nix-env -i mu
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In addition to the above, we need to fetch mu4e. This comes with mu&amp;rsquo;s source code. Download it by running:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/.emacs.d
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.emacs.d
&lt;span class="gp"&gt;$&lt;/span&gt; git clone git@github.com:djcb/mu.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This creates a &lt;code&gt;mu/&lt;/code&gt; directory in the current directory, which happens to be the default location from which emacs looks for init files. Take note, that the git command above actually fetches the source code of mu, and we can actually use it to install mu. But since, you have your package manager, we&amp;rsquo;ll ignore that. Also the location from which the &lt;code&gt;mu/mu4e/&lt;/code&gt; subdirectory exists from the package manager&amp;rsquo;s installation, varies between systems. So, for now, we&amp;rsquo;re only interested with the &lt;code&gt;mu/mu4e/&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;

&lt;p&gt;We now need to make that mu4e directory accessible to emacs. To do so, we need to edit either &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; or &lt;code&gt;~/.emacs&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs ~/.emacs.d/init.el
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then add the following:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;load-path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt; &lt;span class="nv"&gt;load-path&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/.emacs.d/mu/mu4e"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;mu4e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Additionally we need to put in some information about us, so that emacs won&amp;rsquo;t bother asking us about those details later on:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;user-full-name&lt;/span&gt; &lt;span class="s"&gt;"Foo B. Baz"&lt;/span&gt;
       &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;"foo@bar.baz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To make our life even easier, we&amp;rsquo;ll set some variables:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;mu4e-get-mail-command&lt;/span&gt; &lt;span class="s"&gt;"getmail"&lt;/span&gt;
      &lt;span class="nv"&gt;mu4e-update-interval&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
      &lt;span class="nv"&gt;mu4e-attachment-dir&lt;/span&gt; &lt;span class="s"&gt;"~/Downloads"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id="execution"&gt;Execution&lt;/h2&gt;

&lt;p&gt;You can restart emacs so that those settings can take effect, or alternatively, you can mark (C-space) those lines, then hit:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;eval-region&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you can now use mu4e, by hitting:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;mu4e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll get a sexy menu, wherein you can hit shortcuts to get you to where you want. To compose a message, hit &lt;code&gt;C&lt;/code&gt;, fill in the fields, then hit &lt;code&gt;C-c C-c&lt;/code&gt; to send the message. The rest of the commands should be self-explanatory, but if you want to learn more, you can read the nice &lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e/index.html"&gt;mu4e manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="encryption"&gt;Encryption&lt;/h2&gt;

&lt;p&gt;Optionally, you may want to add some tweaks so that encryption and decryption of messages, will be easier. This is actually one of my primary reasons why I&amp;rsquo;m using mu4e &amp;mdash; it has been pointed out to me that despite using browser extensions like &lt;a href="http://getfiregpg.org/s/home"&gt;FireGPG&lt;/a&gt;, and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/its-all-text/"&gt;It&amp;rsquo;s All Text!&lt;/a&gt;, the supposedly private message that you composed got auto-saved by default to the &lt;em&gt;Drafts&lt;/em&gt; folder. This implies, that your unencrypted message, was still saved somewhere. Ahem.&lt;/p&gt;

&lt;p&gt;To make use of these cryptographic utilities, edit your emacs init:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs ~/.emacs.d/init.el
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then add the following:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;mml2015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;epa-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;encrypt-message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mml-secure-message-encrypt-pgp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;decrypt-message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;epa-decrypt-armor-in-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;ec&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;encrypt-message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;dc&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;decrypt-message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Mark those lines, then hit:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;eval-region&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To make the settings take effect, immediately.&lt;/p&gt;

&lt;p&gt;To send an encrypt a message, hit &lt;code&gt;C&lt;/code&gt; from the main menu of mu4e, fill in the usual fields like &lt;code&gt;To:&lt;/code&gt;, and &lt;code&gt;Subject:&lt;/code&gt;, then on the message body, hit:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;ec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This will tag your outgoing message to be signed and encrypted. To send the it, hit &lt;code&gt;C-c C-c&lt;/code&gt;. This will then prompt you to input your passphrase. It will also ask you to fill in some information regarding your outgoing mail server (SMTP). The SMTP server for Gmail is &lt;em&gt;smtp.gmail.com&lt;/em&gt;, then use &lt;code&gt;USERNAME@gmail&lt;/code&gt;.com when prompted for the username. Use your regular password, when prompted, or input your application-specific password, as described earlier. These information will be saved to &lt;code&gt;~/.authinfo&lt;/code&gt;, and will be used for later messages.&lt;/p&gt;

&lt;p&gt;To decrypt a message, open the message, then hit:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;dc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This will prompt you to input your passphrase. After which, you&amp;rsquo;ll be prompted if you&amp;rsquo;ll want to replace the contents of the buffer, say yes to this.&lt;/p&gt;

&lt;p&gt;These approaches are not fool-proof, because there&amp;rsquo;s at least two gaping holes that you have to be aware of &amp;mdash; emacs backups, and mu4e drafts. With the former, when you are using emacs&amp;rsquo; backup facility, or a package like &lt;a href="http://www.emacswiki.org/emacs/BackupDirectory"&gt;backup-dir&lt;/a&gt;, messages that you compose, presumably before you encrypt it, will have an unencrypted copy to the local disk. With the latter, the same principle applies. So be wary of these situations, and tweak your configuration, as necessary.&lt;/p&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Bear in mind that I purposely avoided fleshing out many details, as it would conflate the attempt of this article to make things simple. However, if you want to learn more, you can always go to the &lt;a href="http://pyropus.ca/software/getmail/documentation.html"&gt;getmail&lt;/a&gt; and &lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e/index.html"&gt;mu4e&lt;/a&gt; documentation, to fill in missing gaps, that you may have.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs &amp; Racket</title>
   <link>http://ebzzry.github.io/blog/2013/09/29/emacs-racket/?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2013-09-29-emacs-racket</guid>
   <pubDate>Sun, 29 Sep 2013 14:21:19 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll discuss the easiest approach that I took to setup up a &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; development environment on Emacs. Take note, that this is not the only approach available &amp;mdash; some did it in arguably better ways. In this article, I&amp;rsquo;ll try to explain the shortest route that I took.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Editing Racket code with Emacs has traditionally been done by rudimentary modes that mostly lacked flexibility. They were able to evaluate current definitions, last definitions, and entire buffers, for the most part. Unfortunately, that didn&amp;rsquo;t suffice with the way Racket dealt with things. A more intelligent way of handling code, was needed.&lt;/p&gt;

&lt;p&gt;Fortunately, we have &lt;a href="http://www.nongnu.org/geiser/"&gt;Geiser&lt;/a&gt;. To quote the first paragraph on its homepage:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Geiser is a collection of Emacs major and minor modes that conspire with one or more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws inspiration (and a bit more) from environments such as Common Lisp’s Slime, Factor’s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking inside Emacs (even more) fun.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I saw several other major modes that tries to do what Geiser does, but I became most comfortable with what Geiser offered. Some similar libraries can co-exist with Geiser, too. I tried those, but it became too complex, for me. I wound up just using Geiser. Also, as a semi-related note, I&amp;rsquo;m using Emacs to edit Racket code because I don&amp;rsquo;t know of any other editor that does it so well. I don&amp;rsquo;t use DrRacket, except when I need to use its nice GUI debugger.&lt;/p&gt;

&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;

&lt;p&gt;My installation method is crude, but it works, at least for me. Other installation methods exist, but I couldn&amp;rsquo;t wrap my brain around them, so I opted instead for something that requires the minimal amount of chore. Also, I&amp;rsquo;m still not sure what are the hidden consequences of not doing it the &amp;ldquo;elegant&amp;rdquo; way, presuming there is one.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that you want to install your Geiser files in &lt;code&gt;~/.emacs.d/elisp/&lt;/code&gt;. We&amp;rsquo;ll issue the following commands to install Geiser to that location:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/.emacs.d/elisp
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.emacs.d/elisp
&lt;span class="gp"&gt;$&lt;/span&gt; git clone http://git.sv.gnu.org/r/geiser.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;After that, in &lt;code&gt;~/.emacs.d/elisp/geiser/&lt;/code&gt;, you&amp;rsquo;ll have something that looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AUTHORS
autogen.sh*
bin/
ChangeLog
configure.ac
COPYING
doc/
elisp/
.git/
.gitignore
INSTALL
Makefile.am
NEWS
README
README.elpa
scheme/
THANKS&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we want the directory &lt;code&gt;~/.emacs.d/elisp/geiser/elisp/&lt;/code&gt; to be a member of the Emacs variable &lt;code&gt;load-path&lt;/code&gt; so that &lt;code&gt;require&lt;/code&gt; and friends will know where to find things. To do that, add the following to your Emacs init file &amp;mdash; either in &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, or in &lt;code&gt;~/.emacs&lt;/code&gt; (deprecated):&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/elisp/geiser/elisp/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Next, we&amp;rsquo;ll put in the actual code that invokes and configures Geiser:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;geiser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;geiser-active-implementations&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;racket&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;geiser-save&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;geiser-repl--write-input-ring&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The first expression loads Geiser, itself. The second one specifies that it won&amp;rsquo;t prompt you for other implementations if it finds them. The last one is optional &amp;mdash; it enables you to execute &lt;code&gt;M-x geiser-save&lt;/code&gt; in the REPL buffer to force saving of the history to the disk file, which is &lt;code&gt;~/.geiser_history.racket&lt;/code&gt;, by default. It is useful if you want to save your REPL session, immediately (Nothing is more horrifying than losing &lt;strong&gt;THAT&lt;/strong&gt; expression). For all the Emacs code above, to take effect, you can evaluate them now using members of the eval-* troupe (&lt;code&gt;eval-defun&lt;/code&gt;, &lt;code&gt;eval-last-sexp&lt;/code&gt;, &lt;code&gt;eval-region&lt;/code&gt;), or, you can still opt to respawn a new Emacs process.&lt;/p&gt;

&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;

&lt;p&gt;To reap what you sowed, create or open a &lt;code&gt;.rkt&lt;/code&gt; file, with at least a proper module declaration. Then hit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M-x run-geiser&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, boomshakalaka! A new (Emacs) window opens, containing the &lt;code&gt;* Racket
REPL *&lt;/code&gt; buffer. Whatever you can do with the REPL invoked with vanilla command-line &lt;code&gt;racket&lt;/code&gt;, you can also do with this, and more. This major mode is actually Comint mode, under the hood, with hooks to a a Racket process. For those of you who are unfamiliar with Comint mode, it is the same mode that handles &lt;code&gt;M-x shell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, what can we do with it? While editing &lt;code&gt;.rkt&lt;/code&gt; file, here are some of the usual shortcuts that I use (The full list of keys are &lt;a href="http://www.nongnu.org/geiser/geiser_5.html#Cheat-sheet"&gt;available here&lt;/a&gt;). Take note, that the description of the keys that I used below, are for myself initially, to help me understand what they do. They may, or may not diverge from the official description, listed on the aforementioned link.&lt;/p&gt;

&lt;h2 id="racket-buffer"&gt;Racket Buffer&lt;/h2&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-z&lt;/td&gt;
  &lt;td&gt;Switch to the REPL buffer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-a&lt;/td&gt;
  &lt;td&gt;Evaluate current buffer, then switch to the REPL buffer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-M-x&lt;/td&gt;
  &lt;td&gt;Evaluate current expression&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-x C-e&lt;/td&gt;
  &lt;td&gt;Evaluate last expression&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-r&lt;/td&gt;
  &lt;td&gt;Evaluate region&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-\&lt;/td&gt;
  &lt;td&gt;Insert a λ symbol&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="repl-buffer"&gt;REPL Buffer&lt;/h2&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-z&lt;/td&gt;
  &lt;td&gt;Switch to the Racket buffer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;M-p&lt;/td&gt;
  &lt;td&gt;Switch to the previous history item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;M-n&lt;/td&gt;
  &lt;td&gt;Switch to the next history item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c M-p&lt;/td&gt;
  &lt;td&gt;Jump to previous prompt&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c M-n&lt;/td&gt;
  &lt;td&gt;Jump to next prompt&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-q&lt;/td&gt;
  &lt;td&gt;Quit the REPL buffer&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I have intentionally skipped many topics from the &lt;a href="http://www.nongnu.org/geiser/"&gt;official document&lt;/a&gt; because it makes it unattractive to people who are averse to reading long blocks of text (ironically, this article may even qualify as one.). The methods described above are by in no way representative of community-advised ways of installing and using Racket with Emacs. Feel free to drop a comment below! Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs &amp; Dired</title>
   <link>http://ebzzry.github.io/blog/2013/09/26/emacs-dired/?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2013-09-26-emacs-dired</guid>
   <pubDate>Thu, 26 Sep 2013 09:57:00 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll be focusing on one of the novel ways Emacs handles &lt;em&gt;directory editing&lt;/em&gt;. The directory editor, or &lt;strong&gt;dired&lt;/strong&gt; (pronounced dir-ed, not die-rd), for short, is the Emacs equivalent of a file manager. Whatever you can do with regular file buffers, you can also do it with dired buffers, to a certain extent.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;To run dired, run emacs on the command line, supplying a directory as its argument:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs ~/Desktop/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Or, alternatively, you can press &lt;code&gt;C-x d&lt;/code&gt; inside Emacs. If you are currently editing a file, the directory of that file will be presented as the default value in the minibuffer area. Either way, when you hit &lt;code&gt;Enter&lt;/code&gt;, a buffer of the directory will load, that looks like the output of &lt;code&gt;ls -l&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/john/Desktop/foo:
total used in directory 84 available 540767396
-rw-r--r-- 1 john users 5935 Sep 27 18:17 index.html
-rw-r--r-- 1 john users 5944 Sep 27 18:17 index2.html
drwxr-xr-x 3 john users 4096 Sep 26 17:42 pics
drwxr-xr-x 3 john users 4096 Sep 26 05:39 vids&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, now that we have it, what can we do with it? Well, here is a short list of what, we can do with it. Take note, that the keyboard shortcuts in this article are case-sensitive, unless explicitly stated otherwise.&lt;/p&gt;

&lt;h1 id="common-commands"&gt;Common commands&lt;/h1&gt;

&lt;p&gt;These are the usual commands that you would use, in a dired buffer. In addition to that, they can operate on single, or multiple items. Using them for multiple items will be explained, next.&lt;/p&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;R&lt;/td&gt;
  &lt;td&gt;Rename item(s)&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C&lt;/td&gt;
  &lt;td&gt;Copy item(s)&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;D&lt;/td&gt;
  &lt;td&gt;Delete item(s)&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;O&lt;/td&gt;
  &lt;td&gt;Change item(s) owner&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;G&lt;/td&gt;
  &lt;td&gt;Change item(s) group&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;M&lt;/td&gt;
  &lt;td&gt;Change item(s) permission&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;S&lt;/td&gt;
  &lt;td&gt;Create symlink&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;T&lt;/td&gt;
  &lt;td&gt;Touch item(s), a la `touch`&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;X&lt;/td&gt;
  &lt;td&gt;Execute a shell command on item(s)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="mark-commands"&gt;Mark commands&lt;/h1&gt;

&lt;p&gt;These commands perform mark-related operations on items. Creating marks simply means putting a tag on items, so that you can perform the operations in the previous section, on them.&lt;/p&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;m&lt;/td&gt;
  &lt;td&gt;Mark an item, for the above-listed commands&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;d&lt;/td&gt;
  &lt;td&gt;Mark an item for deletion operations&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;x&lt;/td&gt;
  &lt;td&gt;Perform actual deletion&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;u&lt;/td&gt;
  &lt;td&gt;Unmark a single item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;U&lt;/td&gt;
  &lt;td&gt;Unmark all items&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;t&lt;/td&gt;
  &lt;td&gt;Toggle marks between marked and unmarked items&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="other-commands"&gt;Other commands&lt;/h1&gt;

&lt;p&gt;These commands act on their own. They operate on single items, and they don&amp;rsquo;t make use of marks. The &lt;strong&gt;w&lt;/strong&gt; command, however, is an exception.&lt;/p&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;+&lt;/td&gt;
  &lt;td&gt;Create directory&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;^&lt;/td&gt;
  &lt;td&gt;Go up, one level, like `cd ..`&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;e&lt;/td&gt;
  &lt;td&gt;Edit an item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;f&lt;/td&gt;
  &lt;td&gt;Edit an item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;v&lt;/td&gt;
  &lt;td&gt;View an item, like `less` or `more`&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;g&lt;/td&gt;
  &lt;td&gt;Reload the current directory&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;j&lt;/td&gt;
  &lt;td&gt;Jump to an item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;s&lt;/td&gt;
  &lt;td&gt;Change sort order&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;y&lt;/td&gt;
  &lt;td&gt;Show file type of item, like `file`&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;w&lt;/td&gt;
  &lt;td&gt;Copy item name(s) to the clipboard&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="wdired-mode"&gt;WDired mode&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;BUT&lt;/em&gt;, one of the coolest, and often-overlooked feature of dired is the &lt;strong&gt;WDired&lt;/strong&gt; mode. What it does is that it gives you a decent ability to edit the item names in a dired buffer, just as you would on a typical buffer. To enter wdired mode, hit &lt;code&gt;M-x wdired-change-to-wdired-mode&lt;/code&gt;. The major mode changes from &lt;code&gt;Dired&lt;/code&gt; to &lt;code&gt;Editable Dired&lt;/code&gt;. You can then rename the files, and directories, with ease. You can even use rectangle and replace functions on them, to make things easier. The changes you have made at this point are not yet saved. To save the changes, press &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, that is it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs &amp; Hacks (part 1)</title>
   <link>http://ebzzry.github.io/blog/2013/09/10/emacs-hacks-part-1/?utm_source=emacs&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2013-09-10-emacs-hacks-part-1</guid>
   <pubDate>Tue, 10 Sep 2013 05:23:34 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In this series of posts, I will be sharing my personal hacks on how I use Emacs for my day-to-day stuff. Most, if not all of the code contained in these posts are excerpts from the respective configuration files that I use.&lt;/p&gt;

&lt;p&gt;The rest of the configuration can be found at &lt;a href="http://github.com/ebzzry/dotemacs"&gt;github.com/ebzzry/dotemacs&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;delete-forward-char-or-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;region-active-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;delete-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;region-beginning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;region-end&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;delete-forward-char&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[deletechar]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;delete-forward-char-or-region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[del]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;delete-forward-char-or-region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This command deletes a region if one is active, or deletes the character underneath the cursor. I have this bound to the DEL key.&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nb"&gt;compile-file&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="s"&gt;"make -k"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;?c]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;compile-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I use this command frequently, and I use it from typesetting LaTeX documents, compiling Scribble documents, compiling code, and just about anything that I can use Make with.&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;geiser-save&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;geiser-repl--write-input-ring&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This comes in very handy for me, because sometimes I lose the REPL buffer before the input ring has been saved. When I need to run I execute &lt;code&gt;M-x geiser-save&lt;/code&gt;.&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-scheme-mode-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;put&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;scheme-indent-function&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;scheme-mode-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;tab]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;completion-at-point&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;scheme-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-scheme-mode-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I also have the above, since I want to align the &lt;code&gt;λ&lt;/code&gt; symbol nicely.&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;tramp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;tramp-remote-path&lt;/span&gt; &lt;span class="s"&gt;"/var/run/current-system/sw/bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The above snippet is applicable only to users of NixOS, since the filesystem tree is deviantly different from &amp;ldquo;regular&amp;rdquo; nixen.&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;other-window-1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;other-window&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;other-window-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;One of my favorites, and I may be biased because I&amp;rsquo;m using a &lt;a href="http://www.kinesis-ergo.com/advantage.htm"&gt;Kinesis Advantage keyboard&lt;/a&gt;, wherein the arrow keys are very easy to reach, but nevertheless, YMMV.&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;find-two-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;orientation&lt;/span&gt; &lt;span class="nb"&gt;directory&lt;/span&gt; &lt;span class="nv"&gt;file1&lt;/span&gt; &lt;span class="nv"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;file-path1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-truename&lt;/span&gt; &lt;span class="nv"&gt;file1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-path2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-truename&lt;/span&gt; &lt;span class="nv"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;delete-other-windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;orientation&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vertical&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;split-window-right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file&lt;/span&gt; &lt;span class="nv"&gt;file-path1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file&lt;/span&gt; &lt;span class="nv"&gt;file-path2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;horizontal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;split-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file&lt;/span&gt; &lt;span class="nv"&gt;file-path1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file&lt;/span&gt; &lt;span class="nv"&gt;file-path2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;other-window&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;find-two-files-vertically&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;directory&lt;/span&gt; &lt;span class="nv"&gt;file1&lt;/span&gt; &lt;span class="nv"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-two-files&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;vertical&lt;/span&gt; &lt;span class="nb"&gt;directory&lt;/span&gt; &lt;span class="nv"&gt;file1&lt;/span&gt; &lt;span class="nv"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;find-two-files-horizontally&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;directory&lt;/span&gt; &lt;span class="nv"&gt;file1&lt;/span&gt; &lt;span class="nv"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-two-files&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;horizontal&lt;/span&gt; &lt;span class="nb"&gt;directory&lt;/span&gt; &lt;span class="nv"&gt;file1&lt;/span&gt; &lt;span class="nv"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;div class="brush: shell"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;ev &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; emacsclient -nw --eval &lt;span class="s2"&gt;"(find-two-files-vertically \"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;\" \"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;\" \"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;\")"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
eh &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; emacsclient -nw --eval &lt;span class="s2"&gt;"(find-two-files-horizontally \"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;\" \"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;\" \"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;\")"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The two snippets above, for Elisp and Zsh (or your shell), respectively, load two files into an Emacs buffer, oriented horizontally, and vertically, respectively.&lt;/p&gt;

&lt;p&gt;So, to load &lt;code&gt;~/test1.txt&lt;/code&gt; and &lt;code&gt;~/test2.txt&lt;/code&gt; in Emacs, split windows, horizontally, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ev ~/test1.txt ~/test2.txt&lt;/code&gt;&lt;/pre&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;server-running-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;server-start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This snippet runs the server instance, when it is not running, yet:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;kill-current-buffer&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;kill-current-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A lot of us have this, but this is my simple, unconvoluted version&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mark-line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;mark-active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;beginning-of-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;push-mark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;mark-active&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;forward-line&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;?&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;mark-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;mark-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;There have been plenty of times in the past when I needed this function, and I would have to press a long series of keystrokes just to get it down. The above is what I have, instead.&lt;/p&gt;

&lt;p&gt;Well, that is it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>