<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Live. Die. Live Again.: Posts tagged 'programming'</title>
 <link rel="self" href="http://www.example.com/feeds/programming.atom.xml" />
 <link href="http://www.example.com/tags/programming.html" />
 <id>urn:http-www-example-com:-tags-programming-html</id>
 <updated>2013-09-29T22:21:19Z</updated>
 <entry>
  <title type="text">Emacs and Racket</title>
  <link rel="alternate" href="http://www.example.com/blog/2013/09/29/emacs-and-racket/?utm_source=programming&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2013-09-29-emacs-and-racket</id>
  <published>2013-09-29T22:21:19Z</published>
  <updated>2013-09-29T22:21:19Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=programming&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2013%2F09%2F29%2Femacs-and-racket%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this post, I&amp;rsquo;ll discuss the easiest approach that I took to setup up a
&lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; development environment on
Emacs. Take note, that this is not the only approach available &amp;ndash; some did it
in arguably better ways. In this article, I&amp;rsquo;ll try to explain the shortest
route that I took.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;Editing Racket code with Emacs has traditionally been done by rudimentary modes
that mostly lacked flexibility. They were able to evaluate current definitions,
last definitions, and entire buffers, for the most part. Unfortunately, that
didn&amp;rsquo;t suffice with the way Racket dealt with things. A more intelligent way of
handling code, was needed.&lt;/p&gt;
 &lt;p&gt;Fortunately, we have &lt;a href="http://www.nongnu.org/geiser/"&gt;Geiser&lt;/a&gt;. To
quote the first paragraph on its homepage:&lt;/p&gt;
 &lt;p&gt;&lt;span style="font-style: italic"&gt;Geiser is a collection of Emacs major and minor modes that conspire with
one or more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws
inspiration (and a bit more) from environments such as Common Lisp&amp;#8217;s Slime,
Factor&amp;#8217;s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking
inside Emacs (even more) fun.&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;I saw several other major modes that tries to do what Geiser does, but I became
most comfortable with what Geiser offered. Some similar libraries can co-exist
with Geiser, too. I tried those, but it became too complex, for me. I wound up
just using Geiser. Also, as a semi-related note, I&amp;rsquo;m using Emacs to edit Racket
code because I don&amp;rsquo;t know of any other editor that does it so well. I don&amp;rsquo;t use
DrRacket, except when I need to use its nice GUI debugger. &lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h1&gt;
 &lt;p&gt;My installation method is crude, but it works, at least for me. Other
installation methods exist, but I couldn&amp;rsquo;t wrap my brain around them, so I
opted instead for something that requires the minimal amount of chore. Also,
I&amp;rsquo;m still not sure what are the hidden consequences of not doing it the
"elegant" way, presuming there is one.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s say that you want to install your Geiser files in
&lt;span class="RktSym"&gt;~/.emacs.d/elisp/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;. We&amp;rsquo;ll issue the following commands to install Geiser
to that location:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ mkdir ~/.emacs.d/elisp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd ~/.emacs.d/elisp&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git clone http://git.sv.gnu.org/r/geiser.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After that, in &lt;span class="RktSym"&gt;~/.emacs.d/elisp/geiser/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, you&amp;rsquo;ll have something that
looks like the following:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;AUTHORS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;autogen.sh*&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;bin/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;ChangeLog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;configure.ac&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;COPYING&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;doc/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;elisp/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;.git/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;.gitignore&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;INSTALL&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;Makefile.am&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;NEWS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;README&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;README.elpa&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;scheme/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;THANKS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Next, we want the directory &lt;span class="RktSym"&gt;~/.emacs.d/elisp/geiser/elisp/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; to be a
member of the Emacs variable &lt;span class="RktSym"&gt;load-path&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; so that &lt;span class="RktSym"&gt;require&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; and
friends will know where to find things. To do that, add the following to your
Emacs init file &amp;ndash; either in &lt;span class="RktSym"&gt;~/.emacs.d/init.el&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, or in &lt;span class="RktSym"&gt;~/.emacs&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;
(deprecated):&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(add-to-list 'load-path "~/.emacs.d/elisp/geiser/elisp/")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Next, we&amp;rsquo;ll put in the actual code that invokes and configures Geiser:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'geiser)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(setq geiser-active-implementations '(racket))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun geiser-save ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(geiser-repl--write-input-ring))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The first expression loads Geiser, itself. The second one specifies that it
won&amp;rsquo;t prompt you for other implementations if it finds them. The last one is
optional &amp;ndash; it enables you to execute &lt;span class="RktSym"&gt;M-x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;geiser-save&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; in the REPL buffer
to force saving of the history to the disk file, which is
&lt;span class="RktSym"&gt;~/.geiser_history.racket&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, by default. It is useful if you want to save
your REPL session, immediately (Nothing is more horrifying than losing
&lt;span style="font-style: italic"&gt;THAT&lt;/span&gt; expression). For all the Emacs code above, to take effect, you can
evaluate them now using members of the eval-* troupe (&lt;span class="RktSym"&gt;eval-defun&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;,
&lt;span class="RktSym"&gt;eval-last-sexp&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, &lt;span class="RktSym"&gt;eval-region&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;), or, you can still opt to respawn a
new Emacs process.&lt;/p&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Usage)"&gt;&lt;/a&gt;Usage&lt;/h1&gt;
 &lt;p&gt;To reap what you sowed, create or open a &lt;span class="RktSym"&gt;.rkt&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; file, with at least a
proper module declaration. Then hit:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;M-x run-geiser&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;And, boomshakalaka! A new (Emacs) window opens, containing the &lt;span class="RktSym"&gt;*&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Racket&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;REPL&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;*&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; buffer. Whatever you can do with the REPL invoked with vanilla
command-line &lt;span class="RktSym"&gt;racket&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;, you can also do with this, and more. This major
mode is actually Comint mode, under the hood, with hooks to a a Racket
process. For those of you who are unfamiliar with Comint mode, it is the same
mode that handles &lt;span class="RktSym"&gt;M-x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;shell&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;So, what can we do with it? While editing &lt;span class="RktSym"&gt;.rkt&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt; file, here are some of
the usual shortcuts that I use (The full list of keys are
&lt;a href="http://www.nongnu.org/geiser/geiser_5.html#Cheat-sheet"&gt;available
here&lt;/a&gt;). Take note, that the description of the keys that I used below, are for
myself initially, to help me understand what they do. They may, or may not
diverge from the official description, listed on the aforementioned link.&lt;/p&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;Racket buffer&lt;/span&gt;&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-z&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to the REPL&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-a&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate buffer, then switch to the REPL&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-M-x&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate current expression&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-x C-e&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate last expression&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-r&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Evaluate region&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Insert a &amp;#955; symbol&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;REPL buffer&lt;/span&gt;&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-z&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to the Racket buffer&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;M-p&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to previous history item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;M-n&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Switch to next history item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c M-p&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Jump to previous prompt&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c M-p&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Jump to next prompt&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C-c C-q&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Quit the REPL&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Conclusion)"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
 &lt;p&gt;I have intentionally skipped many topics from the
&lt;a href="http://www.nongnu.org/geiser/"&gt;official manual&lt;/a&gt; because it makes
it unattractive to people who are averse to reading long blocks of text
(ironically, this article may even qualify as one.). The methods described
above are by in no way representative of community-advised ways of installing
and using Racket with Emacs. Feel free to drop a comment below!  Ciao!&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Emacs and Dired</title>
  <link rel="alternate" href="http://www.example.com/blog/2013/09/26/emacs-and-dired/?utm_source=programming&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2013-09-26-emacs-and-dired</id>
  <published>2013-09-26T17:57:00Z</published>
  <updated>2013-09-26T17:57:00Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=programming&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2013%2F09%2F26%2Femacs-and-dired%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this post, I&amp;rsquo;ll be focusing on one of the novel ways Emacs handles
&lt;span style="font-style: italic"&gt;"directory editing"&lt;/span&gt;. The directory editor, or &lt;span style="font-weight: bold"&gt;dired&lt;/span&gt; (pronounced
dir-ed, not die-rd), for short, is the Emacs equivalent of a file
manager. Whatever you can do with regular file buffers, you can also do it with
dired buffers, to a certain extent.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;To run dired, run emacs on the command line, supplying a directory as its argument:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;emacs ~/Desktop/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Or, alternatively, you can press &lt;span class="stt"&gt;C-x d&lt;/span&gt; inside Emacs. If you are
currently editing a file, the directory of that file will be presented as the
default value in the minibuffer area. Either way, when you hit &lt;span class="stt"&gt;Enter&lt;/span&gt;, a
buffer of the directory will load, that looks like the output of
&lt;span class="stt"&gt;ls -l&lt;/span&gt;:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;/home/john/Desktop/foo:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;total used in directory 84 available 540767396&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;-rw-r--r-- 1 john users 5935 Sep 27 18:17 index.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;-rw-r--r-- 1 john users 5944 Sep 27 18:17 index2.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;drwxr-xr-x 3 john users 4096 Sep 26 17:42 pics&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;drwxr-xr-x 3 john users 4096 Sep 26 05:39 vids&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Okay, now that we have it, what can we do with it? Well, here is a short list
of what, we can do with it. Take note, that the keyboard shortcuts in this
article are case-sensitive, unless explicitly stated otherwise.&lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Common_commands)"&gt;&lt;/a&gt;Common commands&lt;/h1&gt;
 &lt;p&gt;These are the usual commands that you would use, in a dired buffer. In addition
to that, they can operate on single, or multiple items. Using them for multiple
items will be explained, next.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;R&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Rename item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;C&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Copy item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;D&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Delete item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;O&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change item(s) owner&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;G&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change item(s) group&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;M&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change item(s) permission&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;S&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Create symlink&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;T&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Touch item(s), like "touch"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;X&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Execute a shell command on item(s)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Mark_commands)"&gt;&lt;/a&gt;Mark commands&lt;/h1&gt;
 &lt;p&gt;These commands perform mark-related operations on items. Creating marks simply
means putting a tag on items, so that you can perform the operations in the
previous section, on them.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;m&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Mark an item, for the above-listed commands&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;u&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Unmark a single item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;U&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Unmark all items&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;t&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Toggle marks between marked and unmarked items&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Other_commands)"&gt;&lt;/a&gt;Other commands&lt;/h1&gt;
 &lt;p&gt;These commands act on their own. They operate on single items, and they don&amp;rsquo;t
make use of marks. The &lt;span style="font-weight: bold"&gt;w&lt;/span&gt; command, however, is an exception.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0" class="boxed"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;Key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;What it does&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;+&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Create directory&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;^&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Go up, one level, like "cd .."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;e&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Edit an item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;f&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Edit an item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;v&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;View an item, like "less" or "more"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;g&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Reload the current directory&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;j&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Jump to an item&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;s&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Change sort order&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;y&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Show file type of item, like "file"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span style="font-weight: bold"&gt;w&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;td&gt;
     &lt;p&gt;Copy item name(s) to the clipboard&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;5
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.W.Dired_mode)"&gt;&lt;/a&gt;WDired mode&lt;/h1&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;BUT&lt;/span&gt;, one of the coolest, and often-overlooked feature of dired is the
&lt;span style="font-weight: bold"&gt;WDired&lt;/span&gt; mode. What it does is that it gives you a decent ability to edit
the item names in a dired buffer, just as you would on a typical buffer. To
enter wdired mode, hit &lt;span class="stt"&gt;M-x wdired-change-to-wdired-mode&lt;/span&gt;. The major mode
changes from &lt;span style="font-weight: bold"&gt;&lt;span style="font-style: italic"&gt;Dired&lt;/span&gt;&lt;/span&gt; to &lt;span style="font-weight: bold"&gt;&lt;span style="font-style: italic"&gt;Editable Dired&lt;/span&gt;&lt;/span&gt;. You can then
rename the files, and directories, with ease. You can even use rectangle and
replace functions on them, to make things easier. The changes you have made at
this point are not yet saved. To save the changes, press &lt;span class="stt"&gt;C-c C-c&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;Well, that is it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Emacs and Hax</title>
  <link rel="alternate" href="http://www.example.com/blog/2013/09/10/emacs-and-hax/?utm_source=programming&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2013-09-10-emacs-and-hax</id>
  <published>2013-09-10T13:23:34Z</published>
  <updated>2013-09-10T13:23:34Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=programming&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2013%2F09%2F10%2Femacs-and-hax%2F" height="1" width="1" /&gt;
 &lt;p&gt;In this series of posts, I will be sharing my personal hacks on how
I use Emacs for my day-to-day stuff. Most, if not all of the code
contained in these posts are excerpts from the respective
configuration files that I use.&lt;/p&gt;
 &lt;p&gt;The rest of the configuration can be found at
&lt;a href="http://github.com/ebzzry/dotemacs"&gt;github.com/ebzzry/dotemacs&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun delete-forward-char-or-region (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (region-active-p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(delete-region (region-beginning)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(region-end))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(delete-forward-char arg)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [deletechar] 'delete-forward-char-or-region)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [del] 'delete-forward-char-or-region)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This command deletes a region if one is active, or deletes the
character underneath the cursor. I have this bound to the DEL key.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun compile-file ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(compile "make -k"))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control ?x) ?c] 'compile-file)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;I use this command frequently, and I use it from typesetting LaTeX
documents, compiling Scribble documents, compiling code, and just
about anything that I can use Make with.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun geiser-save ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(geiser-repl--write-input-ring))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This comes in very handy for me, because sometimes I lose the REPL
buffer before the input ring has been saved. When I need to run I
execute &amp;lsquo;M-x geiser-save&amp;lsquo;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun my-scheme-mode-hook ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(put '&amp;#955; 'scheme-indent-function 1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(define-key scheme-mode-map [(control ?c) tab] 'completion-at-point))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;I also have the above, since I want to align the &amp;lsquo;&amp;#955;&amp;lsquo; symbol nicely.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'tramp)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(add-to-list 'tramp-remote-path "/var/run/current-system/sw/bin")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The above snippet is applicable only to users of NixOS, since the
filesystem tree is deviantly different from "regular" nixen.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun other-window-1 (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window (- arg)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control left)] 'other-window-1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control right)] 'other-window)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;One of my favorites, and I may be biased because I&amp;rsquo;m using a
[Kinesis Advantage keyboard](http://www.kinesis-ergo.com/advantage.htm),
wherein the arrow keys are very easy to reach, but nevertheless, YMMV.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun find-two-files (orientation directory file1 file2)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(let ((file-path1 (file-truename file1))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(file-path2 (file-truename file2)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(delete-other-windows)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(case orientation&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(vertical (progn (split-window-right)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window 1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path2)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(horizontal (progn (split-window)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window 1)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-file file-path2)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(other-window 1))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun find-two-files-vertically (directory file1 file2)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-two-files 'vertical directory file1 file2))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun find-two-files-horizontally (directory file1 file2)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(find-two-files 'horizontal directory file1 file2))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;ev () {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;emacsclient -nw --eval "(find-two-files-vertically \"$(pwd)\" \"$1\" \"$2\")"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;eh () {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;emacsclient -nw --eval "(find-two-files-horizontally \"$(pwd)\" \"$1\" \"$2\")"&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The two snippets above, for Elisp and Zsh (or your shell),
respectively, load two files into an Emacs buffer, oriented
horizontally, and vertically, respectively.&lt;/p&gt;
 &lt;p&gt;So, to load &amp;lsquo;~/test1.txt&amp;lsquo; and &amp;lsquo;~/test2.txt&amp;lsquo; in Emacs, split windows,
horizontally, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ ev ~/test1.txt ~/test2.txt&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(require 'server)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(unless (server-running-p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(server-start))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;This snippet runs the server instance, when it is not
running, yet:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun kill-current-buffer ()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(kill-buffer (current-buffer)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control ?x) (control ?k)] 'kill-current-buffer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;A lot of us have this, but this is my simple, unconvoluted version&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(defun mark-line (&amp;amp;optional arg)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(interactive "p")&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (not mark-active)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(progn&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(beginning-of-line)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(push-mark)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(setq mark-active t)))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(forward-line arg))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(shift ? )] 'mark-line)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;(define-key global-map [(control ?z)] 'mark-line)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;There have been plenty of times in the past when I needed this
function, and I would have to press a long series of keystrokes just
to get it down. The above is what I have, instead.&lt;/p&gt;
 &lt;p&gt;Well, that is it for now. Ciao!&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Livefrog: A LiveJournal Utility</title>
  <link rel="alternate" href="http://www.example.com/blog/2013/05/29/livefrog-a-livejournal-utility/?utm_source=programming&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2013-05-29-livefrog-a-livejournal-utility</id>
  <published>2013-05-29T15:10:34Z</published>
  <updated>2013-05-29T15:10:34Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=programming&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F29%2Flivefrog-a-livejournal-utility%2F" height="1" width="1" /&gt;
 &lt;p&gt;I am pleased to announce the release of &lt;span style="font-weight: bold"&gt;livefrog&lt;/span&gt;, a utility I wrote to
migrate LiveJournal articles to
&lt;a href="http://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;The sources, along with additional information, are located at
&lt;a href="http://github.com/ebzzry/livefrog"&gt;github.com/ebzzry/livefrog&lt;/a&gt;.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;livefrog&lt;/span&gt; is a utility written in &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt;, used to migrate LiveJournal posts to
&lt;a href="https://github.com/greghendershott/frog/"&gt;Frog&lt;/a&gt;, a blogging
platform written in Racket, too. It uses the files dumped by either
&lt;a href="http://hewgill.com/ljdump/"&gt;ljdump&lt;/a&gt;, or
&lt;a href="http://github.com/ceejbot/ljmigrate"&gt;ljmigrate&lt;/a&gt;.&lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Installation)"&gt;&lt;/a&gt;Installation&lt;/h1&gt;
 &lt;p&gt;&lt;span style="font-weight: bold"&gt;livefrog&lt;/span&gt; is available via Racket&amp;rsquo;s
&lt;a href="http://pkg.racket-lang.org"&gt;Planet2&lt;/a&gt;:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco pkg install livefrog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;If that doesn&amp;rsquo;t work, you can alternately install by fetching livefrog, and the
dependencies, from github&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git clone https://github.com/jbclements/sxml.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git clone https://github.com/greghendershott/frog.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git clone https://github.com/ebzzry/livefrog.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco pkg install frog/ sxml/ livefrog/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The trailing slashes are important, to tell &lt;span class="stt"&gt;raco&lt;/span&gt; that you are
installing from local directories. Without it, it will try to fetch
the sources from the internet.&lt;/p&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Usage)"&gt;&lt;/a&gt;Usage&lt;/h1&gt;
 &lt;p&gt;This sections contains instructions for creating files suitable for
use with Frog.&lt;/p&gt;
 &lt;h2&gt;3.1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Basics)"&gt;&lt;/a&gt;Basics&lt;/h2&gt;
 &lt;p&gt;To create a Markdown file from the file entry.xml&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco livefrog -m entry.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;That, however, becomes cumbersome if you&amp;rsquo;re going to manage more than a hundred
entries. To automatically "pick up" the files created by ljdump or ljmigrate,
and convert them to Markdown.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco livefrog -am&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Bear in mind, though, that ljdump and ljmigrate differ on how the trees for the
data are created. ljdump has the following tree format, where USERNAME is your
LiveJournal account name:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;ljdump/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;build&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ChangeLog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;convertdump.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;USERNAME/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;L-1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;L-2&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;C-2&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;L-3&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljdump.config&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljdump.config.sample&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljdump-gui.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljdump.py*&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;README.txt&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;TODO&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;ljmigrate, on the other hand, uses a different format:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;ljmigrate/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;LICENSE.text&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljmigrate.cfg&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljmigrate.cfg.sample&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;ljmigrate.py*&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;README.md&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;README_windows.txt&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;TODO&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;www.livejournal.com/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;USERNAME/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;entry00001/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;entry.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;entry00002/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;entry.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;comment.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;html/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;metadata/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;userpics/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;After creating the Markdown Frog source files, you may now copy them
to your Frog source directory, designated at &lt;span class="stt"&gt;_src/posts/&lt;/span&gt;&lt;/p&gt;
 &lt;h2&gt;3.2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Comments)"&gt;&lt;/a&gt;Comments&lt;/h2&gt;
 &lt;p&gt;Frog, by default, uses &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; to handle the
comments. To import comments to this platform, we need to generate an XML file
that must adhere to Disqus&amp;rsquo; comment import rules.&lt;/p&gt;
 &lt;p&gt;To create a file, named &lt;span class="stt"&gt;comments.xml&lt;/span&gt; that will be used for importing
comments, to be used with &lt;a href="http://import.disqus.com/"&gt;import.disqus.com&lt;/a&gt;, using &lt;span class="stt"&gt;foo.bar.com&lt;/span&gt; as the root site:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco livefrog -s foo.bar.com -c comments.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Updating)"&gt;&lt;/a&gt;Updating&lt;/h1&gt;
 &lt;p&gt;If you installed livefrog using Planet2, you can update it by running:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco pkg update livefrog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;However, if you used the latter method, you may update it by pulling
the updates, uninstalling livefrog, then installing it
again:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd livefrog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ git pull origin master&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ cd ..&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco pkg remove livefrog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ raco pkg install livefrog/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;5
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Miscellany)"&gt;&lt;/a&gt;Miscellany&lt;/h1&gt;
 &lt;p&gt;To reduce typing, you may optionally create an alias to &lt;span class="stt"&gt;raco
livefrog&lt;/span&gt; in your shell.&lt;/p&gt;
 &lt;p&gt;Sh-like shells:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ echo 'alias livefrog="raco livefrog"' &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Csh-like shells:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ echo 'alias livefrog raco livefrog' &amp;gt;&amp;gt; ~/.cshrc&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Replace &lt;span class="stt"&gt;.bashrc&lt;/span&gt;, and &lt;span class="stt"&gt;.cshrc&lt;/span&gt;, with the appropriate init file for
your shell.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Usync: A Data Synchronizer</title>
  <link rel="alternate" href="http://www.example.com/blog/2013/05/21/usync-a-data-synchronizer/?utm_source=programming&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2013-05-21-usync-a-data-synchronizer</id>
  <published>2013-05-21T19:18:33Z</published>
  <updated>2013-05-21T19:18:33Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=programming&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F21%2Fusync-a-data-synchronizer%2F" height="1" width="1" /&gt;
 &lt;p&gt;I am pleased to announce the release of &lt;span style="font-weight: bold"&gt;Usync&lt;/span&gt;, a site-to-site
synchronization tool written in &lt;a href="http://www.scsh.net"&gt;Scsh&lt;/a&gt;. It
makes use of &lt;a href="http://www.cis.upenn.edu/~bcpierce/unison/"&gt;Unison&lt;/a&gt;,
and &lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;, for bi- and uni-directional
synchronizations, respectively.&lt;/p&gt;
 &lt;p&gt;The sources, along with additional information, are located at
&lt;a href="http://github.com/ebzzry/usync"&gt;github.com/ebzzry/usync&lt;/a&gt;.&lt;/p&gt;
 &lt;h1&gt;1
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Introduction)"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
 &lt;p&gt;Site-to-site synchronizations are usually needed, when two locations, which are
called sites, in this article, make file updates independently. Let&amp;rsquo;s say the
company &lt;span style="font-style: italic"&gt;Foo&lt;/span&gt; has two offices. In the first office, they have the
accounting, and logistics departments. In the second office, they have the IT,
and HR departments. Both have a common &lt;span class="stt"&gt;/pub&lt;/span&gt; tree, that has subdirectories
assigned to each department. Without synchronization, when the first office
needs information from the second office, they&amp;rsquo;d have to pull the updates,
manually. With synchronization, the first office can access the files from the
second office, as if the IT and HR departments, were in the first office. Usync
helps to achieve this.&lt;/p&gt;
 &lt;h1&gt;2
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Basic_.Usage)"&gt;&lt;/a&gt;Basic Usage&lt;/h1&gt;
 &lt;p&gt;To perform two-way synchronization of the directory &lt;span class="stt"&gt;/pub/yot/ninam&lt;/span&gt;,
between the current host, to the hosts &lt;span class="stt"&gt;tarupam&lt;/span&gt;, and &lt;span class="stt"&gt;taubetmo&lt;/span&gt;,
while preserving the directory structure remotely (take note, that
there must be no spaces between the hosts specification, due to the
&lt;span class="stt"&gt;IFS&lt;/span&gt; environment variable, found in most shells):&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ usync /pub/yot/ninam/ tarupam,taubetmo&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The command above will perform two-way synchronization of the diretory
&lt;span class="stt"&gt;ninam/&lt;/span&gt; found under &lt;span class="stt"&gt;/pub/yot/&lt;/span&gt;, to &lt;span class="stt"&gt;tarupam:/pub/yot/&lt;/span&gt;, and
&lt;span class="stt"&gt;taubetmo:/pub/yot/&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;Using our example above, the two-way synchronization system basically
tells that if the tree &lt;span class="stt"&gt;tarupam:/pub/yot/ninam/&lt;/span&gt; contains new and/or
updated items, compared with &lt;span class="stt"&gt;localhost:/pub/yot/ninam/&lt;/span&gt;, and
&lt;span class="stt"&gt;localhost:/pub/yot/ninam/&lt;/span&gt; also happens to have new and/or updated
items, then, they will trade updates.&lt;/p&gt;
 &lt;p&gt;Ideally, the result is that &lt;span class="stt"&gt;localhost:/pub/yot/ninam/&lt;/span&gt;,
&lt;span class="stt"&gt;tarupam:/pub/yot/ninam/&lt;/span&gt;, and &lt;span class="stt"&gt;taubetmo:/pub/yot/ninam/&lt;/span&gt;, are all
equal.&lt;/p&gt;
 &lt;h1&gt;3
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Semi-advanced_.Usage)"&gt;&lt;/a&gt;Semi-advanced Usage&lt;/h1&gt;
 &lt;p&gt;It is also possible to perform synchronization of multiple files, and
directories, to remote hosts. To do so, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ usync /pub/yot/ninam/ ~/file.text ~reyn/*.blend tarupam,taubetmo&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The command above will perform two-way synchronization of the paths
&lt;span class="stt"&gt;/pub/yot/ninam/&lt;/span&gt;, &lt;span class="stt"&gt;~/file.text&lt;/span&gt;, and &lt;span class="stt"&gt;~reyn/*.blend&lt;/span&gt; to the
remote hosts &lt;span class="stt"&gt;tarupam&lt;/span&gt;, and &lt;span class="stt"&gt;taubetmo&lt;/span&gt;, using the same directory
structuring system described above.&lt;/p&gt;
 &lt;p&gt;If you want to perform one-way synchronization, of the above, like
&lt;span class="stt"&gt;rsync&lt;/span&gt;, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ usync --one-way --prefer-local /pub/yot/ninam/ ~/file.text ~reyn/draft.blend tarupam,taubetmo&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;For more usage information, run:&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;$ usync --help&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;h1&gt;4
  &lt;tt&gt;&amp;nbsp;&lt;/tt&gt;&lt;a name="(part._.Caveats)"&gt;&lt;/a&gt;Caveats&lt;/h1&gt;
 &lt;p&gt;This program has been used on FreeBSD, hence making the shebang
line contain &lt;span class="stt"&gt;/usr/local/bin/scsh&lt;/span&gt;. Please change it, accordingly.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">The Y Combinator in Six Easy Steps</title>
  <link rel="alternate" href="http://www.example.com/blog/2013/05/09/the-y-combinator-in-six-easy-steps/?utm_source=programming&amp;utm_medium=Atom" />
  <id>urn:http-www-example-com:-blog-2013-05-09-the-y-combinator-in-six-easy-steps</id>
  <published>2013-05-09T12:43:11Z</published>
  <updated>2013-05-09T12:43:11Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=programming&amp;amp;utm_medium=Atom&amp;amp;utm_campaign=%2Fblog%2F2013%2F05%2F09%2Fthe-y-combinator-in-six-easy-steps%2F" height="1" width="1" /&gt;
 &lt;p&gt;A lot of us have been taught that to be able to define a recursive procedure,
the recursive invocation must "use" the name of the recursive procedure. The
&lt;a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator"&gt;Y combinator&lt;/a&gt;, however, lets us perform recursion, without referring to the
named identifier.&lt;/p&gt;
 &lt;p&gt;The Y combinator has been both a source of inspiration and frustration
for many. It evokes a eureka-like sensation once you get past the
wall, but it also renders us scratching our heads when it just doesn&amp;rsquo;t
make sense to traverse the labyrinth. This post aims to bring my own
approach on how to derive the Y combinator. It may not be the most
elegant way, but it may work for you.&lt;/p&gt;
 &lt;p&gt;In the code examples in this post, the &lt;span class="stt"&gt;&amp;gt;&lt;/span&gt; symbol denotes the prompt
symbol for your Scheme implementation.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s start by defining a procedure named &lt;span class="stt"&gt;sum0&lt;/span&gt; that computes the
&lt;a href="http://en.wikipedia.org/wiki/Summation"&gt;summation&lt;/a&gt; of a positive
integer, down to zero. In the following snippet, the recursive call happens
when &lt;span class="stt"&gt;sum0&lt;/span&gt; is applied in the else part of the condition.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define sum0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (sum0 (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (sum0 100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;You have have observed that I have defined &lt;span class="stt"&gt;sum0&lt;/span&gt; using an explicit
&lt;span class="stt"&gt;lambda&lt;/span&gt;. You&amp;rsquo;ll see shortly, why.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s break that procedure futher, into more elementary components,
and we&amp;rsquo;ll apply it, using
&lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define sum0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n ((f f) (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; ((sum0 sum0) 100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;The extra &lt;span class="stt"&gt;lambda&lt;/span&gt; was needed because we needed to have a way to
"anonymize" the recursive procedure. In this case, we used the
identifier &lt;span class="stt"&gt;f&lt;/span&gt; to bind to the recursive procedure, which is &lt;span class="stt"&gt;sum0&lt;/span&gt;,
itself. The weird-looking &lt;span class="stt"&gt;((f f) ...)&lt;/span&gt; is needed, because we have to
perform the same procedure invocation method used initially: &lt;span class="stt"&gt;((sum0 sum0) 100)&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;We&amp;rsquo;re now going to exploit that property, to use a "nameless"
approach, that is, without using the &lt;span class="stt"&gt;sum0&lt;/span&gt; name.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n ((f f) (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n ((f f) (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;Take note, that at this point, we&amp;rsquo;re no longer using the &lt;span class="stt"&gt;sum0&lt;/span&gt; name,
to refer the the definition, except for later.&lt;/p&gt;
 &lt;p&gt;Next, we need to move the &lt;span class="stt"&gt;(f f)&lt;/span&gt; part outside, to isolate the general
(Y combinator), from the specific (&lt;span class="stt"&gt;sum0&lt;/span&gt;) code.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (v) ((f f) v))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (v) ((f f) v)))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;During the procedure application, the identifier &lt;span class="stt"&gt;p&lt;/span&gt; will be bound to
&lt;span class="stt"&gt;(lambda (v) ((f f) v))&lt;/span&gt;, and the identifier &lt;span class="stt"&gt;v&lt;/span&gt; will be bound to &lt;span class="stt"&gt;(-
n 1)&lt;/span&gt;.&lt;/p&gt;
 &lt;p&gt;Finally, we&amp;rsquo;re going to isolate the Y combinator, from the &lt;span class="stt"&gt;sum0&lt;/span&gt;
procedure.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (((lambda (x)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;We replace the &lt;span class="stt"&gt;sum0&lt;/span&gt;-specific definition with &lt;span class="stt"&gt;x&lt;/span&gt;. This requires us
again, to create an enveloping &lt;span class="stt"&gt;lambda&lt;/span&gt;. Since &lt;span class="stt"&gt;x&lt;/span&gt; is bound to the
computing procedure, we no longer need to repeat it.&lt;/p&gt;
 &lt;p&gt;Optionally, we can explicitly create separate procedure definitions for
the Y combinator itself, and the &lt;span class="stt"&gt;sum0&lt;/span&gt; procedure.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;table cellspacing="0"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define y&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (x)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;((lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (f)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(x (lambda (v) ((f f) v)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define %sum0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (p)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(lambda (n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(if (zero? n)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="stt"&gt;(+ n (p (- n 1)))))))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (define sum0 (y %sum0))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;&amp;gt; (sum0 100)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;p&gt;&lt;span class="stt"&gt;&lt;span class="stt"&gt;5050&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p&gt;I hope this post has been useful in making you understand the
Y combinator, currying, and procedure application. Please post your
comments and suggestions, below. &amp;lt;-:&lt;/p&gt;&lt;/html&gt;</content></entry></feed>