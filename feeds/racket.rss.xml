<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Illusions of Cognizance: Posts tagged 'racket'</title>
  <description>Illusions of Cognizance: Posts tagged 'racket'</description>
  <link>http://ebzzry.github.io/tags/racket.html</link>
  <lastBuildDate>Wed, 19 Feb 2014 06:07:11 UT</lastBuildDate>
  <pubDate>Wed, 19 Feb 2014 06:07:11 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>An Introduction To Frog</title>
   <link>http://ebzzry.github.io/blog/2014/02/19/an-introduction-to-frog/?utm_source=racket&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2014-02-19-an-introduction-to-frog</guid>
   <pubDate>Wed, 19 Feb 2014 06:07:11 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;When publishing blog content to the web, most would rely on pre-fabricated services, that do most of the heavy lifting. However, there are instances when we want to have more control over our stuff. A good example of which are the constraints that providers enforce. Another is the presence of ads, or the use of freemium services, i.e., things can be done, only up to a certain visible limit.&lt;/p&gt;

&lt;p&gt;One may argue that all they need is a platform to blog with, and that they don&amp;rsquo;t need the extra flexibility. While that is fine, some of us, including me, want to free from these shackles. I don&amp;rsquo;t want ads on my site. I don&amp;rsquo;t want surprise censorship. I don&amp;rsquo;t want to pay for services that I can get for free. I want freedom. Now, if you&amp;rsquo;re like me, then read on.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When I was looking for tools to create this blog, I became dissatisfied with most of the mainstream options. Some are the just too difficult to setup, while some are lacking in features. I became frustrated because each end of the spectrum forces me to use something that is extremely mediocre in at least one critical aspect. Fortunately, I found &lt;a href="http://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt;, via a suggestion on #racket.&lt;/p&gt;

&lt;p&gt;Frog, in layman&amp;rsquo;s terms, is a site creator, that is very easy to use, configure, and customize. Whatever you write, will appear on your blog &amp;mdash; you get what you expect. There are no weird terms of use, nor arbitrary limits, nor coercion &amp;mdash; it&amp;rsquo;s very close to full control, at the tip of your fingertips.&lt;/p&gt;

&lt;p&gt;Frog operates somewhere in the middle. That is, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Raw content -&amp;gt; Frog -&amp;gt; HTML&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where raw content is either Markdown, Scribble, or HTML source files, or a combination of all. Frog takes in those input files, and it outputs nice HTML that you can upload to your web server. Easy? No, it&amp;rsquo;s even easier that it sounds.&lt;/p&gt;

&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;

&lt;p&gt;In the succeeding sections, let&amp;rsquo;s presume that your username is &lt;code&gt;john&lt;/code&gt;, and your home directory is &lt;code&gt;/home/john/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To install Frog, we need to install Racket, first. Chances are, your package manager already has it. To install Racket on Debian, run:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install racket
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In the unlikely event that it can&amp;rsquo;t be installed using your package manager, go to &lt;a href="http://racket-lang.org/download/"&gt;racket-lang.org/download/&lt;/a&gt; , then follow the instructions from there.&lt;/p&gt;

&lt;p&gt;Next, we need to install Frog.&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco pkg install frog
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;After which, you&amp;rsquo;ll get the &lt;code&gt;raco frog&lt;/code&gt; command. Let&amp;rsquo;s display its help options:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco frog -h
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="first-use"&gt;First Use&lt;/h1&gt;

&lt;p&gt;Sweet. Now that we have Frog installed, let&amp;rsquo;s get rolling. To create your first Frog-powered website, we&amp;rsquo;ll create a project directory first:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir blog
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ll then fire the spark plug, to initialize the site repository:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco frog --init
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll see a message saying that your website is ready. Let&amp;rsquo;s follow the suggested command:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco frog -bp
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;What that command does is that it builds the HTML files from the sample source files created with the &lt;code&gt;--init&lt;/code&gt; switch, then it runs a local web server, serving by default, the location &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. Frog will then open a new browser tab, or window, pointing to that URL. The page that you&amp;rsquo;ll see contains the default site layout. When you&amp;rsquo;re OK with it, let&amp;rsquo;s go back to the terminal, and kill that process by hitting &lt;code&gt;C-c&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id="creating-new-posts"&gt;Creating New Posts&lt;/h1&gt;

&lt;p&gt;Creating a new article from scratch is another easy task:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco frog -n &lt;span class="s2"&gt;"New Blog Post."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;What it does is that it creates a Markdown file, relative to the current directory, with the format &lt;code&gt;_src/posts/YYYY-MM-DD-post-title.md&lt;/code&gt;. With the command above, the absolute path would be similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/john/blog/_src/posts/2014-02-21-new-blog-post.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s edit that file, and see how it looks like:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs _src/posts/2014-02-21-new-blog-post.md
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;    Title: New Blog Post
    Date: 2014-02-21T18:53:42
    Tags: DRAFT

_Replace this with your post text. Add one or more comma-separated
Tags above. The special tag `DRAFT` will prevent the post from being
published._

&amp;lt;!-- more --&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that this file, was created for us, by the command &lt;code&gt;raco frog
-n ...&lt;/code&gt;. The first three lines contains metadata about our post. They&amp;rsquo;re the post title, date of creation, and tags, respectively. The date was picked up from the the &lt;code&gt;-n&lt;/code&gt; switch that was issued, earlier. The &lt;code&gt;Tags&lt;/code&gt; field, contains a comma-separated list of words, that Frog would later identify the post with. When the case-sensitive tag &lt;code&gt;DRAFT&lt;/code&gt; is used, the file will be skipped during the build phase.&lt;/p&gt;

&lt;p&gt;Four spaces must be prefixed, prior, to those three lines, followed by an empty line. The rest will be the actual article content, in Markdown format. When a line by its own contain just the text &lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt;, that line will be replaced by a hyperlink in the final HTML form, that will point to the rest of the article. That means, all text, after the &lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt; line will not appear in the blog index, but will appear in the link for the whole post.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we change that file to look something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Title: New Blog Post
    Date: 2014-02-21T18:53:42
    Tags: arts, history

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque
volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh,
viverra non, semper suscipit, posuere a, pede.

&amp;lt;!-- more --&amp;gt;

Donec nec justo eget felis facilisis fermentum. Aliquam porttitor mauris sit
amet orci. Aenean dignissim pellentesque felis.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, run the build command, again:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco frog -bp
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We now have two posts, as displayed in the index. To remove the auto-generated initial post, that was created by the command &lt;code&gt;raco frog --init&lt;/code&gt;, earlier, run:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rm -f _src/posts/2012-01-01-a-2012-blog-post.md
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then, rebuild the files:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco frog -bp
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="customizations"&gt;Customizations&lt;/h1&gt;

&lt;p&gt;By this time, you&amp;rsquo;re really itching to customize the site. Yep, that&amp;rsquo;s what we&amp;rsquo;re going to do in this section.&lt;/p&gt;

&lt;p&gt;At the basic level, there are three files that we are going to modify, to make our initial changes:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;.frogrc&lt;/li&gt;
 &lt;li&gt;_src/page-template.html&lt;/li&gt;
 &lt;li&gt;_src/post-template.html&lt;/li&gt;
 &lt;li&gt;css/bootstrap.css&lt;/li&gt;
 &lt;li&gt;css/bootstrap.min.css&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s examine each of the files in the list, closer.&lt;/p&gt;

&lt;h2 id="frogrc"&gt;.frogrc&lt;/h2&gt;

&lt;p&gt;This file is where top-level customizations are made. Open the file &lt;code&gt;.frogrc&lt;/code&gt;, located in the current directory:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs .frogrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll notice that there are more than a dozen parameters that can be tweaked. But for now, we&amp;rsquo;re only concerned about three parameters:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;scheme/host&lt;/li&gt;
 &lt;li&gt;title&lt;/li&gt;
 &lt;li&gt;author&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;scheme/host&lt;/code&gt; should contain the (sub)domain to which you&amp;rsquo;ll be publishing your work later, &lt;code&gt;title&lt;/code&gt; is the name of your blog, and &lt;code&gt;author&lt;/code&gt; is your name.&lt;/p&gt;

&lt;h2 id="page-templatehtml"&gt;page-template.html&lt;/h2&gt;

&lt;p&gt;This file contains the common content, across all types of pages, whether they are blog or non-blog posts. Open the file &lt;code&gt;_src/page-template.html&lt;/code&gt;, located in the current directory:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs _src/page-template.html
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll see an even bigger file, compared to .frogrc. This is an special HTML file, that contains Racket, and Frog-specific code. It will be used as a basis for all pages that you&amp;rsquo;ll create with Frog. There are plenty of parameters here, but we&amp;rsquo;ll just tweak some that are most usable to us, at the moment. To make it easier, I&amp;rsquo;ll just list down the items to search and replace for:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;The Unknown Blogger&lt;/li&gt;
 &lt;li&gt;My Blog Brand&lt;/li&gt;
 &lt;li&gt;Welcome&lt;/li&gt;
 &lt;li&gt;Your legal notice here&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;When you get to those respective sections, it should evident what to replace them with.&lt;/p&gt;

&lt;h2 id="post-templatehtml"&gt;post-template.html&lt;/h2&gt;

&lt;p&gt;Similar to &lt;code&gt;page-template.html&lt;/code&gt;, but this file contains content that will only appear with blog posts. It is also Perhaps the easiest file to modify is &lt;code&gt;_src/post-template.html&lt;/code&gt;. Let&amp;rsquo;s open it:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs _src/post-template.html
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;For now, you only need to modify the text &lt;code&gt;shortname&lt;/code&gt;. It is the identifier that links the comments section of your blog posts, to the aforesaid Disqus account. More about this will be discussed in the section &lt;strong&gt;Comments&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="bootstrapcss-and-bootstrapmincss"&gt;bootstrap.css and bootstrap.min.css&lt;/h2&gt;

&lt;p&gt;These two files are responsible for what is commonly called as &amp;ldquo;theme&amp;rdquo; &amp;mdash; it controls the look of the site. To change these files, let&amp;rsquo;s head over to &lt;a href="http://bootswatch.com/"&gt;bootswatch.com&lt;/a&gt;, then let&amp;rsquo;s select a theme we like. Let&amp;rsquo;s presume that we want to download the &lt;em&gt;Cerulean&lt;/em&gt; theme. Click the dropdown box arrow, next to the download link, for that theme. Select and download both &lt;code&gt;bootstrap.min.css&lt;/code&gt; and &lt;code&gt;bootstrap.css&lt;/code&gt;. After which, copy them over to the css subdirectory &lt;code&gt;css/&lt;/code&gt;.&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cp ~/Downloads/bootstrap.*.css css/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="miscellany"&gt;Miscellany&lt;/h1&gt;

&lt;p&gt;When we created a new post earlier, we used the following command:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="go"&gt;raco frog -n "New Blog Post"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That command, creates a Markdown source file. Frog, however, has another mode &amp;mdash; Scribble. This mode lets you use a Scribble source file, instead. To create one, we&amp;rsquo;ll use the following command:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="go"&gt;raco frog -N "New Blog Post"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Had you used this command earlier, the file will have the format &lt;code&gt;_src/posts/YYYY-MM-DD-post-title.md&lt;/code&gt;. With the command above, the absolute path would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/john/blog/_src/posts/2014-02-21-new-blog-post.scrbl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, let&amp;rsquo;s edit that file, and see how it looks like:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emacs _src/posts/2014-02-21-new-blog-post.scrbl
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;#lang scribble/manual

Title: New Blog Post
Date: 2014-02-21T18:53:42
Tags: DRAFT

Replace this with your post text. Add one or more comma-separated
Tags above. The special tag `DRAFT` will prevent the post from being
published.

&amp;lt;!-- more --&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They&amp;rsquo;re mostly the same, except with the addition of the language specifier, &lt;code&gt;#lang scribble/manual&lt;/code&gt;, and the absence of the prefix spaces for the metadata fields.&lt;/p&gt;

&lt;h1 id="comments"&gt;Comments&lt;/h1&gt;

&lt;p&gt;Frog makes use of &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; to handle its comments. To use it, create an account at &lt;a href="https://disqus.com/profile/signup/?next=http%3A//disqus.com/"&gt;disqus.com/profile/signup/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you already have your account, go to &lt;a href="http://disqus.com/admin/create/"&gt;disqus.com/admin/create/&lt;/a&gt; to create a site, which will have an alias called a &lt;em&gt;shortname&lt;/em&gt;. The &lt;em&gt;shorname&lt;/em&gt; is what you&amp;rsquo;ll register with Disqus to uniquely identify your website. So, if you chose, for example, &lt;code&gt;foobar&lt;/code&gt;, as the shortname for the site, you may then access &lt;a href="http://foobar.disqus.com"&gt;foobar.disqus.com&lt;/a&gt; to manage the comments for that site. The shortname mentioned here, is what you&amp;rsquo;ll use in the file &lt;code&gt;_src/post-template.html&lt;/code&gt;, as discussed above.&lt;/p&gt;

&lt;p&gt;To import comments, from an existing blog, to Disqus, go to &lt;a href="http://import.disqus.com"&gt;import.disqus.com&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="show-time"&gt;Show Time&lt;/h1&gt;

&lt;p&gt;To publish your work, upload the contents of the directory that Frog manages; in this tutorial, it is the directory &lt;code&gt;/home/john/blog&lt;/code&gt;, to your remote web server. If the current directory is &lt;code&gt;blog/&lt;/code&gt;, and we want to send the files via rsync, the command would look like:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rsync -avz ./ remotehost:public_html
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The directory &lt;code&gt;public_html&lt;/code&gt; could be something else, I just used it because it is the default with Apache.&lt;/p&gt;

&lt;p&gt;However, if you don&amp;rsquo;t have a remote host that you can upload your work to, via rsync, and you use &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, you can use the free hosting service of &lt;a href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. If you don&amp;rsquo;t have a GitHub account yet, you may go to &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; to create one. To use, GitHub Pages, create a repository named &lt;code&gt;USERNAME.github.io&lt;/code&gt;. So, if your username is &lt;code&gt;johndoe&lt;/code&gt;, the repository that you need to create should be named &lt;code&gt;johndoe.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To publish your work to GitHub Pages, we first need to add that remote repository:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git remote add origin git@github.com:johndoe/johndoe.github.io.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then we push the commits:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To view your website, go to &lt;a href="http://johndoe.github.io"&gt;johndoe.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="notes"&gt;Notes&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt; is a viable and usable site creator. It is easy-to-use, highly configurable, flexible, and yes, open source. It gives control, back to the author.&lt;/p&gt;

&lt;p&gt;Frog was created by &lt;a href="http://www.greghendershott.com/"&gt;Greg Hendershott&lt;/a&gt;. If you want to learn more about it, head over to &lt;a href="http://github.com/greghendershott/frog"&gt;github.com/greghendershott/frog&lt;/a&gt;. To report bugs, go to &lt;a href="https://github.com/greghendershott/frog/issues"&gt;github.com/greghendershott/frog/issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ribbit!&lt;/strong&gt;&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Emacs &amp; Racket</title>
   <link>http://ebzzry.github.io/blog/2013/09/29/emacs-racket/?utm_source=racket&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2013-09-29-emacs-racket</guid>
   <pubDate>Sun, 29 Sep 2013 14:21:19 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll discuss the easiest approach that I took to setup up a &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt; development environment on Emacs. Take note, that this is not the only approach available &amp;mdash; some did it in arguably better ways. In this article, I&amp;rsquo;ll try to explain the shortest route that I took.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Editing Racket code with Emacs has traditionally been done by rudimentary modes that mostly lacked flexibility. They were able to evaluate current definitions, last definitions, and entire buffers, for the most part. Unfortunately, that didn&amp;rsquo;t suffice with the way Racket dealt with things. A more intelligent way of handling code, was needed.&lt;/p&gt;

&lt;p&gt;Fortunately, we have &lt;a href="http://www.nongnu.org/geiser/"&gt;Geiser&lt;/a&gt;. To quote the first paragraph on its homepage:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Geiser is a collection of Emacs major and minor modes that conspire with one or more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws inspiration (and a bit more) from environments such as Common Lisp’s Slime, Factor’s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking inside Emacs (even more) fun.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I saw several other major modes that tries to do what Geiser does, but I became most comfortable with what Geiser offered. Some similar libraries can co-exist with Geiser, too. I tried those, but it became too complex, for me. I wound up just using Geiser. Also, as a semi-related note, I&amp;rsquo;m using Emacs to edit Racket code because I don&amp;rsquo;t know of any other editor that does it so well. I don&amp;rsquo;t use DrRacket, except when I need to use its nice GUI debugger.&lt;/p&gt;

&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;

&lt;p&gt;My installation method is crude, but it works, at least for me. Other installation methods exist, but I couldn&amp;rsquo;t wrap my brain around them, so I opted instead for something that requires the minimal amount of chore. Also, I&amp;rsquo;m still not sure what are the hidden consequences of not doing it the &amp;ldquo;elegant&amp;rdquo; way, presuming there is one.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that you want to install your Geiser files in &lt;code&gt;~/.emacs.d/elisp/&lt;/code&gt;. We&amp;rsquo;ll issue the following commands to install Geiser to that location:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/.emacs.d/elisp
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.emacs.d/elisp
&lt;span class="gp"&gt;$&lt;/span&gt; git clone http://git.sv.gnu.org/r/geiser.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;After that, in &lt;code&gt;~/.emacs.d/elisp/geiser/&lt;/code&gt;, you&amp;rsquo;ll have something that looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AUTHORS
autogen.sh*
bin/
ChangeLog
configure.ac
COPYING
doc/
elisp/
.git/
.gitignore
INSTALL
Makefile.am
NEWS
README
README.elpa
scheme/
THANKS&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we want the directory &lt;code&gt;~/.emacs.d/elisp/geiser/elisp/&lt;/code&gt; to be a member of the Emacs variable &lt;code&gt;load-path&lt;/code&gt; so that &lt;code&gt;require&lt;/code&gt; and friends will know where to find things. To do that, add the following to your Emacs init file &amp;mdash; either in &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, or in &lt;code&gt;~/.emacs&lt;/code&gt; (deprecated):&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/elisp/geiser/elisp/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Next, we&amp;rsquo;ll put in the actual code that invokes and configures Geiser:&lt;/p&gt;

&lt;div class="brush: elisp"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;geiser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;geiser-active-implementations&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;racket&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;geiser-save&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;geiser-repl--write-input-ring&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The first expression loads Geiser, itself. The second one specifies that it won&amp;rsquo;t prompt you for other implementations if it finds them. The last one is optional &amp;mdash; it enables you to execute &lt;code&gt;M-x geiser-save&lt;/code&gt; in the REPL buffer to force saving of the history to the disk file, which is &lt;code&gt;~/.geiser_history.racket&lt;/code&gt;, by default. It is useful if you want to save your REPL session, immediately (Nothing is more horrifying than losing &lt;strong&gt;THAT&lt;/strong&gt; expression). For all the Emacs code above, to take effect, you can evaluate them now using members of the eval-* troupe (&lt;code&gt;eval-defun&lt;/code&gt;, &lt;code&gt;eval-last-sexp&lt;/code&gt;, &lt;code&gt;eval-region&lt;/code&gt;), or, you can still opt to respawn a new Emacs process.&lt;/p&gt;

&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;

&lt;p&gt;To reap what you sowed, create or open a &lt;code&gt;.rkt&lt;/code&gt; file, with at least a proper module declaration. Then hit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M-x run-geiser&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, boomshakalaka! A new (Emacs) window opens, containing the &lt;code&gt;* Racket
REPL *&lt;/code&gt; buffer. Whatever you can do with the REPL invoked with vanilla command-line &lt;code&gt;racket&lt;/code&gt;, you can also do with this, and more. This major mode is actually Comint mode, under the hood, with hooks to a a Racket process. For those of you who are unfamiliar with Comint mode, it is the same mode that handles &lt;code&gt;M-x shell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, what can we do with it? While editing &lt;code&gt;.rkt&lt;/code&gt; file, here are some of the usual shortcuts that I use (The full list of keys are &lt;a href="http://www.nongnu.org/geiser/geiser_5.html#Cheat-sheet"&gt;available here&lt;/a&gt;). Take note, that the description of the keys that I used below, are for myself initially, to help me understand what they do. They may, or may not diverge from the official description, listed on the aforementioned link.&lt;/p&gt;

&lt;h2 id="racket-buffer"&gt;Racket Buffer&lt;/h2&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-z&lt;/td&gt;
  &lt;td&gt;Switch to the REPL buffer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-a&lt;/td&gt;
  &lt;td&gt;Evaluate current buffer, then switch to the REPL buffer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-M-x&lt;/td&gt;
  &lt;td&gt;Evaluate current expression&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-x C-e&lt;/td&gt;
  &lt;td&gt;Evaluate last expression&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-r&lt;/td&gt;
  &lt;td&gt;Evaluate region&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-\&lt;/td&gt;
  &lt;td&gt;Insert a λ symbol&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="repl-buffer"&gt;REPL Buffer&lt;/h2&gt;

&lt;table&gt;
 &lt;tr&gt;
  &lt;th&gt;Key&lt;/th&gt;
  &lt;th&gt;What it does&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-z&lt;/td&gt;
  &lt;td&gt;Switch to the Racket buffer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;M-p&lt;/td&gt;
  &lt;td&gt;Switch to the previous history item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;M-n&lt;/td&gt;
  &lt;td&gt;Switch to the next history item&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c M-p&lt;/td&gt;
  &lt;td&gt;Jump to previous prompt&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c M-n&lt;/td&gt;
  &lt;td&gt;Jump to next prompt&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;C-c C-q&lt;/td&gt;
  &lt;td&gt;Quit the REPL buffer&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I have intentionally skipped many topics from the &lt;a href="http://www.nongnu.org/geiser/"&gt;official document&lt;/a&gt; because it makes it unattractive to people who are averse to reading long blocks of text (ironically, this article may even qualify as one.). The methods described above are by in no way representative of community-advised ways of installing and using Racket with Emacs. Feel free to drop a comment below! Ciao!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>An Introduction to Livefrog</title>
   <link>http://ebzzry.github.io/blog/2013/05/29/an-introduction-to-livefrog/?utm_source=racket&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2013-05-29-an-introduction-to-livefrog</guid>
   <pubDate>Wed, 29 May 2013 07:10:34 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I am pleased to announce the release of &lt;strong&gt;livefrog&lt;/strong&gt;, a utility I wrote to migrate LiveJournal articles to &lt;a href="http://github.com/greghendershott/frog"&gt;Frog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The sources, along with additional information, are located at &lt;a href="http://github.com/ebzzry/livefrog"&gt;github.com/ebzzry/livefrog&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;livefrog is a utility written in &lt;a href="http://racket-lang.org"&gt;Racket&lt;/a&gt;, used to migrate LiveJournal posts to &lt;a href="https://github.com/greghendershott/frog/"&gt;Frog&lt;/a&gt;, a blogging platform written in Racket, too. It uses the files dumped by either &lt;a href="http://hewgill.com/ljdump/"&gt;ljdump&lt;/a&gt;, or &lt;a href="http://github.com/ceejbot/ljmigrate"&gt;ljmigrate&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;

&lt;p&gt;livefrog is available via Racket&amp;rsquo;s &lt;a href="http://pkg.racket-lang.org"&gt;Planet2&lt;/a&gt;:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco pkg install livefrog
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If that doesn&amp;rsquo;t work, you can alternately install by fetching livefrog, and the dependencies, from github&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/jbclements/sxml.git
&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/greghendershott/frog.git
&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/ebzzry/livefrog.git
&lt;span class="gp"&gt;$&lt;/span&gt; raco pkg install frog/ sxml/ livefrog/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The trailing slashes are important, to tell &lt;code&gt;raco&lt;/code&gt; that you are installing from local directories. Without it, it will try to fetch the sources from the internet.&lt;/p&gt;

&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;

&lt;p&gt;This sections contains instructions for creating files suitable for use with Frog.&lt;/p&gt;

&lt;h2 id="basics"&gt;Basics&lt;/h2&gt;

&lt;p&gt;To create a Markdown file from the file entry.xml&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco livefrog -m entry.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That, however, becomes cumbersome if you&amp;rsquo;re going to manage more than a hundred entries. To automatically &amp;ldquo;pick up&amp;rdquo; the files created by ljdump or ljmigrate, and convert them to Markdown.&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco livefrog -am
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Bear in mind, though, that ljdump and ljmigrate differ on how the trees for the data are created. ljdump has the following tree format, where USERNAME is your LiveJournal account name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ljdump/
  build
  ChangeLog
  convertdump.py
  USERNAME/
    L-1
    L-2
    C-2
    L-3
    ...
  ljdump.config
  ljdump.config.sample
  ljdump-gui.py
  ljdump.py*
  README.txt
  TODO&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ljmigrate, on the other hand, uses a different format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ljmigrate/
  LICENSE.text
  ljmigrate.cfg
  ljmigrate.cfg.sample
  ljmigrate.py*
  README.md
  README_windows.txt
  TODO
  www.livejournal.com/
    USERNAME/
      entry00001/
        entry.xml
      entry00002/
        entry.xml
        comment.xml
      html/
      metadata/
      userpics/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After creating the Markdown Frog source files, you may now copy them to your Frog source directory, designated at &lt;code&gt;_src/posts/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="comments"&gt;Comments&lt;/h2&gt;

&lt;p&gt;Frog, by default, uses &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; to handle the comments. To import comments to this platform, we need to generate an XML file that must adhere to Disqus&amp;rsquo; comment import rules.&lt;/p&gt;

&lt;p&gt;To create a file, named &lt;code&gt;comments.xml&lt;/code&gt; that will be used for importing comments, to be used with &lt;a href="http://import.disqus.com/"&gt;import.disqus.com&lt;/a&gt;, using &lt;code&gt;foo.bar.com&lt;/code&gt; as the root site:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco livefrog -s foo.bar.com -c comments.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="updating"&gt;Updating&lt;/h1&gt;

&lt;p&gt;If you installed livefrog using Planet2, you can update it by running:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; raco pkg update livefrog
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;However, if you used the latter method, you may update it by pulling the updates, uninstalling livefrog, then installing it again:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;livefrog
&lt;span class="gp"&gt;$&lt;/span&gt; git pull origin master
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="gp"&gt;$&lt;/span&gt; raco pkg remove livefrog
&lt;span class="gp"&gt;$&lt;/span&gt; raco pkg install livefrog/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id="miscellany"&gt;Miscellany&lt;/h1&gt;

&lt;p&gt;To reduce typing, you may optionally create an alias to &lt;code&gt;raco
livefrog&lt;/code&gt; in your shell.&lt;/p&gt;

&lt;p&gt;Sh-like shells:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alias livefrog="raco livefrog"&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Csh-like shells:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alias livefrog raco livefrog&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.cshrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Replace &lt;code&gt;.bashrc&lt;/code&gt;, and &lt;code&gt;.cshrc&lt;/code&gt;, with the appropriate init file for your shell.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>The Y Combinator in Six Easy Steps</title>
   <link>http://ebzzry.github.io/blog/2013/05/09/the-y-combinator-in-six-easy-steps/?utm_source=racket&amp;utm_medium=RSS</link>
   <guid>urn:http-ebzzry-github-io:-blog-2013-05-09-the-y-combinator-in-six-easy-steps</guid>
   <pubDate>Thu, 09 May 2013 04:43:11 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;A lot of us have been taught that to be able to define a recursive procedure, the recursive invocation must &amp;ldquo;use&amp;rdquo; the name of the recursive procedure. The &lt;a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator"&gt;Y combinator&lt;/a&gt; , however, lets us perform recursion, without referring to the named identifier.&lt;/p&gt;

&lt;p&gt;The Y combinator has been both a source of inspiration and frustration for many. It evokes a eureka-like sensation once you get past the wall, but it also renders us scratching our heads when it just doesn&amp;rsquo;t make sense to traverse the labyrinth. This post aims to bring my own approach on how to derive the Y combinator. It may not be the most elegant way, but it may work for you.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;In the code examples in this post, the &lt;code&gt;&amp;gt;&lt;/code&gt; symbol denotes the prompt symbol for your Scheme implementation.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by defining a procedure named &lt;code&gt;sum0&lt;/code&gt; that computes the &lt;a href="http://en.wikipedia.org/wiki/Summation"&gt;summation&lt;/a&gt; of a positive integer, down to zero. In the following snippet, the recursive call happens when &lt;code&gt;sum0&lt;/code&gt; is applied in the else part of the condition.&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;sum0&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="mi"&gt;0&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum0&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5050&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You have have observed that I have defined &lt;code&gt;sum0&lt;/code&gt; using an explicit &lt;code&gt;lambda&lt;/code&gt;. You&amp;rsquo;ll see shortly, why.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s break that procedure futher, into more elementary components, and we&amp;rsquo;ll apply it, using &lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt;.&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;sum0&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;sum0&lt;/span&gt; &lt;span class="nv"&gt;sum0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5050&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The extra &lt;code&gt;lambda&lt;/code&gt; was needed because we needed to have a way to &amp;ldquo;anonymize&amp;rdquo; the recursive procedure. In this case, we used the identifier &lt;code&gt;f&lt;/code&gt; to bind to the recursive procedure, which is &lt;code&gt;sum0&lt;/code&gt;, itself. The weird-looking &lt;code&gt;((f f) ...)&lt;/code&gt; is needed, because we have to perform the same procedure invocation method used initially: &lt;code&gt;((sum0 sum0) 100)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re now going to exploit that property, to use a &amp;ldquo;nameless&amp;rdquo; approach, that is, without using the &lt;code&gt;sum0&lt;/code&gt; name.&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5050&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Take note, that at this point, we&amp;rsquo;re no longer using the &lt;code&gt;sum0&lt;/code&gt; name, to refer the the definition, except for later.&lt;/p&gt;

&lt;p&gt;Next, we need to move the &lt;code&gt;(f f)&lt;/code&gt; part outside, to isolate the general (Y combinator), from the specific (&lt;code&gt;sum0&lt;/code&gt;) code.&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="mi"&gt;0&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="mi"&gt;0&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5050&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;During the procedure application, the identifier &lt;code&gt;p&lt;/code&gt; will be bound to &lt;code&gt;(lambda (v) ((f f) v))&lt;/code&gt;, and the identifier &lt;code&gt;v&lt;/code&gt; will be bound to &lt;code&gt;(- n 1)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we&amp;rsquo;re going to isolate the Y combinator, from the &lt;code&gt;sum0&lt;/code&gt; procedure.&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
   &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5050&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We replace the &lt;code&gt;sum0&lt;/code&gt;-specific definition with &lt;code&gt;x&lt;/code&gt;. This requires us again, to create an enveloping &lt;code&gt;lambda&lt;/code&gt;. Since &lt;code&gt;x&lt;/code&gt; is bound to the computing procedure, we no longer need to repeat it.&lt;/p&gt;

&lt;p&gt;Optionally, we can explicitly create separate procedure definitions for the Y combinator itself, and the &lt;code&gt;sum0&lt;/code&gt; procedure.&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;%sum0&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;sum0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;y&lt;/span&gt; &lt;span class="nv"&gt;%sum0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum0&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5050&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I hope this post has been useful in making you understand the Y combinator, currying, and procedure application. Please post your comments and suggestions, below. &amp;lt;-:&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>