<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Live. Die. Repeat.: Posts tagged 'sysadmin'</title>
 <link rel="self" href="http://rmm.meta.ph/feeds/sysadmin.atom.xml" />
 <link href="http://rmm.meta.ph/tags/sysadmin.html" />
 <id>urn:http-rmm-meta-ph:-tags-sysadmin-html</id>
 <updated>2014-09-17T19:53:15Z</updated>
 <entry>
  <title type="text">How to Setup GPG and SSH in KDE</title>
  <link rel="alternate" href="http://rmm.meta.ph/blog/2014/09/17/how-to-setup-gpg-and-ssh-in-kde/?utm_source=sysadmin&amp;utm_medium=Atom" />
  <id>urn:http-rmm-meta-ph:-blog-2014-09-17-how-to-setup-gpg-and-ssh-in-kde</id>
  <published>2014-09-17T19:53:15Z</published>
  <updated>2014-09-17T19:53:15Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;When both GPG and SSH are integrated with KDE, it makes inter-operating with those systems very easy. It will make the difference between a loose-fitting glove, and one that fits snugly.&lt;/p&gt;

&lt;p&gt;This quick tutorial will go over the steps on how to go about it. To accommodate everyone, I&amp;rsquo;ll still go about how to install and configure all the necessary components.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="prerequisites"&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;Chances are, you already have both GPG and SSH installed on your system. But if you don&amp;rsquo;t have them, you can install them with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gnupg2 ssh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another important software that we need to install is pinentry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install pinentry-qt4&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s the component that prompts the user for passphrases.&lt;/p&gt;

&lt;h1 id="configure-ssh"&gt;Configure SSH&lt;/h1&gt;

&lt;p&gt;Now that we have the parts in front of us, it&amp;rsquo;s time to assemble them. The first thing that we need to do (although in reality the files that we are going to open in this section can be done in any order that you wish), is create your SSH keys:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; leave the passphrase empty. Shoot yourself first in the  head, if you really want to.&lt;/p&gt;

&lt;p&gt;The above command will create two files: 1) your public key, and 2) your private key. I need not tell you what they are because you know what they are already. Am I right?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/.ssh/id_rsa.pub
~/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, copy your SSH keys to the servers that you manage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-copy-id user@host&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="configure-gpg"&gt;Configure GPG&lt;/h1&gt;

&lt;p&gt;In case you forgot how to your keys, the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg2 --gen-key&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I should have this earlier, that if you want to create strong passphrases, use the &lt;a href="http://world.std.com/~reinhold/diceware.html"&gt;Diceware method&lt;/a&gt;. An &lt;a href="https://xkcd.com/936/"&gt;XKCD comic&lt;/a&gt; was written in case you&amp;rsquo;re wondering what it is, without reading the earlier link.&lt;/p&gt;

&lt;p&gt;Next thing to do is edit the main GPG config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs ~/.gnupg/gpg.conf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the line that contains &lt;code&gt;use-agent&lt;/code&gt; and uncomment it, if it is commented. If that line does not exist just put &lt;code&gt;use agent&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;We need to edit the agent file next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs ~/.gnupg/gpg-agent.conf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then put the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;no-grab
default-cache-ttl 10800
default-cache-ttl-ssh 10800
pinentry-program /usr/bin/pinentry-qt4&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those are &lt;em&gt;my&lt;/em&gt; preferred values. If you want to change them, look at the manpage first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ man gpg-agent&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="configure-kde"&gt;Configure KDE&lt;/h1&gt;

&lt;p&gt;We now need to link the GPG agent with KDE. We&amp;rsquo;re going to create a &lt;em&gt;startup&lt;/em&gt; script for KDE that will invoke the GPG agent at startup. We&amp;rsquo;ll also tell the GPG agent to enable SSH support (in the old days, the SSH agent has to be ran separately from GPG).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ~/.kde/env
$ emacs ~/.kde/env/01_gpg-agent.sh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then put in the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

killall gpg-agent
eval `gpg-agent --enable-ssh-support --daemon`&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make it executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod +x ~/.kde/env/01_gpg-agent.sh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we&amp;rsquo;ll create the &lt;em&gt;shutdown&lt;/em&gt; script for the GPG agent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ~/.kde/shutdown
$ emacs ~/.kde/shutdown/01_gpg-agent.sh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then put in the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

killall gpg-agent&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also make it executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod +x ~/.kde/shutdown/01_gpg-agent.sh&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="verification"&gt;Verification&lt;/h1&gt;

&lt;p&gt;Unfortunately, we have to restart our KDE session to take these settings into effect. If you how to make them work, without logging out, please let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;Ctrl+Alt+Del&lt;/code&gt; to logout, then login with your account.&lt;/p&gt;

&lt;p&gt;Open a Konsole window, then connect to your favorite SSH server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh user@remotehost&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pinentry dialog box should appear prompting you for your passphrase. This passphrase will be cached according to your settings in &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt;. Subsequent SSH connection attempts will not prompt you for the passphrase within this timeout period.&lt;/p&gt;

&lt;p&gt;A similar behavior will happen if you encrypt a file with GPG:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg2 -s -e -a -r john@remotehost file.dat&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The steps outline above are meant to be succinct without going through the gory details. I avoided reiterating what was already said before so as not to bore you to death. If you found this useful, feel free to comment below.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">An Introduction to Ugarit</title>
  <link rel="alternate" href="http://rmm.meta.ph/blog/2014/02/21/an-introduction-to-ugarit/?utm_source=sysadmin&amp;utm_medium=Atom" />
  <id>urn:http-rmm-meta-ph:-blog-2014-02-21-an-introduction-to-ugarit</id>
  <published>2014-02-21T12:07:18Z</published>
  <updated>2014-02-21T12:07:18Z</updated>
  <author>
   <name>Rommel Martinez</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;How many times have we experienced hindsight, after a catastrophic event has happened? how many times have we told ourselves that had we created backups of our precious data, we wouldn&amp;rsquo;t be in that dire situation, pulling our hairs out like a maniac?&lt;/p&gt;

&lt;p&gt;Most of us have been there &amp;mdash; we lost our precious files due inadvertent causes. We lost them because of disk crash, data corruption, security breach, and other reasons. But had we created a fallback, a big, safe foam that we can land on, it wouldn&amp;rsquo;t have been a lot of trouble, and heart ache. On the flip side, creating and managing backups can be daunting, and equally dangerous.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll talk about &lt;a href="http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki"&gt;Ugarit&lt;/a&gt; , a nice piece of technology, that combines ease-of-use, and security, in a single tool.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Ugarit is a classic example of a tool, that requires minimal setup and configuration, but is used many times. That once the initial tinkering is done, all we need to do is reuse the tool. But that isn&amp;rsquo;t Ugarit&amp;rsquo;s main strength &amp;mdash; it is the almost unholy marriage of convenience and security.&lt;/p&gt;

&lt;p&gt;Most, if not all the time, convenience is inversely proportional to security. That is, the more convenient something is, the less secure it is. With Ugarit, creating and managing backups is as easy as typing a short command.&lt;/p&gt;

&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;

&lt;p&gt;First, we need to install &lt;a href="http://www.call-cc.org/"&gt;Chicken&lt;/a&gt;. Most likely, it can be installed via your package manager:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install chicken-bin&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it isn&amp;rsquo;t available on your system, you may download it from &lt;a href="http://code.call-cc.org/"&gt;code.call-cc.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Chicken is installed, let&amp;rsquo;s install Ugarit itself, and some dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chicken-install -s ugarit tiger-hash aes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this command completes, the command &lt;code&gt;ugarit&lt;/code&gt; will become available. To display command-line help:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit -h&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="configuration"&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Ugarit at this point isn&amp;rsquo;t usable yet &amp;mdash; we need to specify where will it store the snapshots. When creating a snapshot of a directory several terabytes big, it is ideal to store the data on a fast, reliable, stress-tolerant disk. It is not uncommon for the command &lt;code&gt;ls&lt;/code&gt; to experience a noticeable lag when ran inside the data directory. Let&amp;rsquo;s presume that &lt;code&gt;/dev/sdb1&lt;/code&gt; is a large filesystem and we want to mount it to &lt;code&gt;/ugarit/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /ugarit
$ sudo mount /dev/sdb1 /ugarit
$ sudo mkdir /ugarit/vault
$ sudo chown -R $USER /ugarit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another, equally important requirement that we need to have is its config file, usually named &lt;code&gt;ugarit.conf&lt;/code&gt;. It is supplied as part of the required command line arguments. It is important to note, that this file does not reside in a fixed location, in contrast with some programs that look for a config file at start-up, from &lt;code&gt;~/&lt;/code&gt;. But before we actually create that file, we need to run some commands. Save the outputs of these commands, because we&amp;rsquo;ll be needing them later:&lt;/p&gt;

&lt;p&gt;Create a salt, for the hash function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/random bs=1 count=64 2&amp;gt;/dev/null | base64 -w 0 | tail -1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the key, for the vault:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/random bs=32 count=1 2&amp;gt;/dev/null | od -An -tx1 | tr -d ' \t\n'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we run those commands, we&amp;rsquo;ll create the config file, &lt;code&gt;ugarit.conf&lt;/code&gt;. To make it consistent with the example above, we&amp;rsquo;ll store it inside &lt;code&gt;/ugarit&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs /ugarit/ugarit.conf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then input the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(storage "backend-fs fs /ugarit/vault")
(file-cache "/ugarit/cache")
(hash tiger "SALT")
(encryption aes "KEY")&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace SALT, and KEY, with the salt and key strings that we generated above. Save the file, then secure it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod 600 /ugarit/ugarit.conf&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="basic-usage"&gt;Basic Usage&lt;/h1&gt;

&lt;h2 id="creating-snapshots"&gt;Creating Snapshots&lt;/h2&gt;

&lt;p&gt;To create a snapshot, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit snapshot /ugarit/ugarit.conf TAG DIRECTORY&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TAG&lt;/strong&gt; is a name that you will identify the snapshot with later, while &lt;strong&gt;DIRECTORY&lt;/strong&gt; is the filesystem tree that you will create a snapshot of. To create, for example, a snapshot of the directory &lt;code&gt;pictures/&lt;/code&gt;, with the tag &lt;code&gt;pix&lt;/code&gt;, run Ugarit like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit snapshot /ugarit/ugarit.conf pix pictures&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the snapshot, you&amp;rsquo;ll see similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Archiving pictures to tag pix...
Root hash: ddc888c86db6d7c468a27cc4af9b2907d219936df82e0971
Successfully snapshotted pictures to tag pix
Snapshot hash: ab290399f31fff1e3158c0ede8f90f59b2b41387af48f597
Written 910460 bytes to the vault in 4 blocks, and reused 0 bytes in 0 blocks
(before compression)
File cache has saved us 1 file hashings / 638104 bytes (before compression)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="exploring-snapshots"&gt;Exploring Snapshots&lt;/h2&gt;

&lt;p&gt;To interactively manage the contents of the vault, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit explore /ugarit/ugarit.conf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list the available commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; help&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taking hints from the help usage, we&amp;rsquo;ll extract a directory, that was part of the snapshot earlier. Let&amp;rsquo;s say that the original path of that directory was &lt;code&gt;pictures/holiday&lt;/code&gt;. So, to extract the directory &lt;code&gt;holiday/&lt;/code&gt; to the current directory, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd pix
/pix&amp;gt; cd current
/pix/current&amp;gt; cd contents
/pix/current/contents&amp;gt; get holiday
Extracted holiday
/pix/current/contents&amp;gt; exit&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="extracting-snapshots-directly"&gt;Extracting Snapshots Directly&lt;/h2&gt;

&lt;p&gt;If, however, you know the exact path to a file or directory that you want to extract, you can instead run Ugarit with the extract mode. To extract the directory &lt;code&gt;holiday/&lt;/code&gt; from above, directly, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit extract /ugarit/ugarit.conf /pix/current/contents/holiday&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="tips"&gt;Tips&lt;/h1&gt;

&lt;h2 id="remote-filesystems"&gt;Remote Filesystems&lt;/h2&gt;

&lt;p&gt;Ugarit is not limited to creating snapshots of a local filesystem. It can also be used to create snapshots of trees, from a remote host, mounted locally. If you have an &lt;a href="http://fuse.sourceforge.net/sshfs.html"&gt;SSHFS&lt;/a&gt; mount, for example, you can still create a snapshot of it, just like any other local filesystem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sshfs remotehost:/ ~/mnt/sshfs/remotehost
$ cd ~/mnt/sshfs
$ ugarit snapshot /ugarit/ugarit.conf remotehost&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same applies to &lt;a href="http://www.samba.org/samba/smbfs/"&gt;SMBFS&lt;/a&gt; mounts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mount -t cifs -o user=$USER,uid=$USER //winhost/c ~/mnt/smbfs/winhost/c
$ cd ~/mnt/smbfs
$ ugarit snapshot /ugarit/ugarit.conf winhost&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="miscellany"&gt;Miscellany&lt;/h2&gt;

&lt;p&gt;To disable output, when creating snapshots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit snapshot /ugarit/ugarit.conf -q ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable very verbose output, when creating snapshots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ugarit snapshot -:a256 /ugarit/ugarit.conf ...&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="notes"&gt;Notes&lt;/h1&gt;

&lt;p&gt;When you are doubtful of the performance of the disk where you&amp;rsquo;ll be storing the snapshots, disable the &lt;a href="http://linux.about.com/library/cmd/blcmdl1_updatedb.htm"&gt;locate and updatedb&lt;/a&gt; service. It is usually run periodically via cron. It places a lot of load on the disk, and may over-stress it. Your mileage may vary.&lt;/p&gt;

&lt;p&gt;An important caveat worth mentioning is that, due to the way Ugarit works, snapshot deletions do not exist. The storage mechanism works similarly to Git, only that there is no rebase option.&lt;/p&gt;

&lt;p&gt;Ugarit was created by &lt;a href="http://www.snell-pym.org.uk/alaric/"&gt;Alaric Snell-Pym&lt;/a&gt;. If you want to learn more about it, head over to &lt;a href="http://www.kitten-technologies.co.uk/project/ugarit/doc/trunk/README.wiki"&gt;kitten-technologies.co.uk/project/ugarit/&lt;/a&gt;. To report bugs, go to &lt;a href="http://www.kitten-technologies.co.uk/project/ugarit/reportlist"&gt;kitten-technologies.co.uk/project/ugarit/reportlist&lt;/a&gt; .&lt;/p&gt;&lt;/html&gt;</content></entry></feed>